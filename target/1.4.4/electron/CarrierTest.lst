
/Users/chipmc/Documents/Maker/Particle/Projects/CarrierTest/target/1.4.4/electron/CarrierTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000038d0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080838f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  20000000  080838f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000628  20000094  20000094  00030094  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08083988  08083988  00023988  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080839b0  080839b0  000239b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b33d4  00000000  00000000  000239b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011180  00000000  00000000  000d6d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014d00  00000000  00000000  000e7f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002048  00000000  00000000  000fcc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003280  00000000  00000000  000fec50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000270a2  00000000  00000000  00101ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00027e65  00000000  00000000  00128f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a65e3  00000000  00000000  00150dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bcb8  00000000  00000000  001f73bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f003 f8f9 	bl	8083228 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f003 f8fe 	bl	808323e <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	080838f4 	.word	0x080838f4
 8080050:	20000094 	.word	0x20000094
 8080054:	20000094 	.word	0x20000094
 8080058:	200006bc 	.word	0x200006bc
 808005c:	200006bc 	.word	0x200006bc

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f001 ff91 	bl	8081f88 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	080838a8 	.word	0x080838a8
 8080088:	080838e4 	.word	0x080838e4

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 b8da 	b.w	8080244 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fa1b 	bl	80804cc <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f001 bf37 	b.w	8081f0c <_post_loop>

0808009e <_Znwj>:
 808009e:	f000 bde9 	b.w	8080c74 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f000 bdef 	b.w	8080c84 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800b6:	6803      	ldr	r3, [r0, #0]
 80800b8:	b2c9      	uxtb	r1, r1
 80800ba:	689b      	ldr	r3, [r3, #8]
 80800bc:	4718      	bx	r3

080800be <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800be:	2200      	movs	r2, #0
 80800c0:	7042      	strb	r2, [r0, #1]
}
 80800c2:	4770      	bx	lr

080800c4 <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
 80800c4:	b508      	push	{r3, lr}
  i2c_addr = addr;
 80800c6:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80800c8:	f002 f802 	bl	80820d0 <_Z19__fetch_global_Wirev>
 80800cc:	f001 fb04 	bl	80816d8 <_ZN7TwoWire5beginEv>

  // Everything seems to be properly initialised and connected 
  _framInitialised = true;
*/
  return true;
}
 80800d0:	2001      	movs	r0, #1
 80800d2:	bd08      	pop	{r3, pc}

080800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800d4:	b570      	push	{r4, r5, r6, lr}
 80800d6:	4606      	mov	r6, r0
 80800d8:	460c      	mov	r4, r1
 80800da:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800dc:	f001 fff8 	bl	80820d0 <_Z19__fetch_global_Wirev>
 80800e0:	7831      	ldrb	r1, [r6, #0]
 80800e2:	f001 fb10 	bl	8081706 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800e6:	f001 fff3 	bl	80820d0 <_Z19__fetch_global_Wirev>
 80800ea:	0a21      	lsrs	r1, r4, #8
 80800ec:	f7ff ffe3 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800f0:	f001 ffee 	bl	80820d0 <_Z19__fetch_global_Wirev>
 80800f4:	b2e1      	uxtb	r1, r4
 80800f6:	f7ff ffde 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800fa:	f001 ffe9 	bl	80820d0 <_Z19__fetch_global_Wirev>
 80800fe:	6803      	ldr	r3, [r0, #0]
 8080100:	4629      	mov	r1, r5
 8080102:	689b      	ldr	r3, [r3, #8]
 8080104:	4798      	blx	r3
  Wire.endTransmission();
 8080106:	f001 ffe3 	bl	80820d0 <_Z19__fetch_global_Wirev>
}
 808010a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
 808010e:	f001 bb05 	b.w	808171c <_ZN7TwoWire15endTransmissionEv>

08080112 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 8080112:	b538      	push	{r3, r4, r5, lr}
 8080114:	4604      	mov	r4, r0
 8080116:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080118:	f001 ffda 	bl	80820d0 <_Z19__fetch_global_Wirev>
 808011c:	7821      	ldrb	r1, [r4, #0]
 808011e:	f001 faf2 	bl	8081706 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 8080122:	f001 ffd5 	bl	80820d0 <_Z19__fetch_global_Wirev>
 8080126:	0a29      	lsrs	r1, r5, #8
 8080128:	f7ff ffc5 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 808012c:	f001 ffd0 	bl	80820d0 <_Z19__fetch_global_Wirev>
 8080130:	b2e9      	uxtb	r1, r5
 8080132:	f7ff ffc0 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080136:	f001 ffcb 	bl	80820d0 <_Z19__fetch_global_Wirev>
 808013a:	f001 faef 	bl	808171c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808013e:	f001 ffc7 	bl	80820d0 <_Z19__fetch_global_Wirev>
 8080142:	2201      	movs	r2, #1
 8080144:	7821      	ldrb	r1, [r4, #0]
 8080146:	f001 fad6 	bl	80816f6 <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
 808014a:	f001 ffc1 	bl	80820d0 <_Z19__fetch_global_Wirev>
 808014e:	6803      	ldr	r3, [r0, #0]
 8080150:	695b      	ldr	r3, [r3, #20]
 8080152:	4798      	blx	r3
}
 8080154:	b2c0      	uxtb	r0, r0
 8080156:	bd38      	pop	{r3, r4, r5, pc}

08080158 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080158:	f000 bb90 	b.w	808087c <HAL_Pin_Map>

0808015c <_Z12hardResetNow6String>:

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
 808015c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808015e:	4905      	ldr	r1, [pc, #20]	; (8080174 <_Z12hardResetNow6String+0x18>)
 8080160:	f001 fce7 	bl	8081b32 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080164:	b120      	cbz	r0, 8080170 <_Z12hardResetNow6String+0x14>
  {
    digitalWrite(hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
 8080166:	2004      	movs	r0, #4
 8080168:	2101      	movs	r1, #1
 808016a:	f001 ff6e 	bl	808204a <digitalWrite>
 808016e:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 8080170:	bd08      	pop	{r3, pc}
 8080172:	bf00      	nop
 8080174:	080833e7 	.word	0x080833e7

08080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808017a:	4605      	mov	r5, r0
 808017c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8080180:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080182:	f88d 3000 	strb.w	r3, [sp]
 8080186:	233c      	movs	r3, #60	; 0x3c
 8080188:	f001 f876 	bl	8081278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 808018c:	4628      	mov	r0, r5
 808018e:	b003      	add	sp, #12
 8080190:	bd30      	pop	{r4, r5, pc}
	...

08080194 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 8080194:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080196:	f000 fb51 	bl	808083c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808019a:	4b03      	ldr	r3, [pc, #12]	; (80801a8 <_ZN10CloudClass7processEv+0x14>)
 808019c:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 808019e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80801a2:	f000 bce7 	b.w	8080b74 <spark_process>
 80801a6:	bf00      	nop
 80801a8:	200005b0 	.word	0x200005b0

080801ac <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 80801ac:	b281      	uxth	r1, r0
 80801ae:	4801      	ldr	r0, [pc, #4]	; (80801b4 <_Z9FRAMread8j+0x8>)
 80801b0:	f7ff bfaf 	b.w	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
 80801b4:	200000ac 	.word	0x200000ac

080801b8 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
 80801b8:	460a      	mov	r2, r1
 80801ba:	b281      	uxth	r1, r0
 80801bc:	4801      	ldr	r0, [pc, #4]	; (80801c4 <_Z10FRAMwrite8jh+0xc>)
 80801be:	f7ff bf89 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80801c2:	bf00      	nop
 80801c4:	200000ac 	.word	0x200000ac

080801c8 <_Z9ResetFRAMv>:
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 80801c8:	b510      	push	{r4, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    Serial.println("Resetting Memory");
 80801ca:	f001 fdff 	bl	8081dcc <_Z16_fetch_usbserialv>
 80801ce:	4918      	ldr	r1, [pc, #96]	; (8080230 <_Z9ResetFRAMv+0x68>)
 80801d0:	f001 fbad 	bl	808192e <_ZN5Print7printlnEPKc>
    for (unsigned long i=4; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
 80801d4:	2404      	movs	r4, #4
        FRAMwrite8(i,0x0);
 80801d6:	2100      	movs	r1, #0
 80801d8:	4620      	mov	r0, r4
 80801da:	f7ff ffed 	bl	80801b8 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 80801de:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80801e2:	d103      	bne.n	80801ec <_Z9ResetFRAMv+0x24>
 80801e4:	f001 fdf2 	bl	8081dcc <_Z16_fetch_usbserialv>
 80801e8:	4912      	ldr	r1, [pc, #72]	; (8080234 <_Z9ResetFRAMv+0x6c>)
 80801ea:	e014      	b.n	8080216 <_Z9ResetFRAMv+0x4e>
        if (i==16384) Serial.println(F("50% done"));
 80801ec:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80801f0:	d103      	bne.n	80801fa <_Z9ResetFRAMv+0x32>
 80801f2:	f001 fdeb 	bl	8081dcc <_Z16_fetch_usbserialv>
 80801f6:	4910      	ldr	r1, [pc, #64]	; (8080238 <_Z9ResetFRAMv+0x70>)
 80801f8:	e00d      	b.n	8080216 <_Z9ResetFRAMv+0x4e>
        if (i==(24576)) Serial.println(F("75% done"));
 80801fa:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 80801fe:	d103      	bne.n	8080208 <_Z9ResetFRAMv+0x40>
 8080200:	f001 fde4 	bl	8081dcc <_Z16_fetch_usbserialv>
 8080204:	490d      	ldr	r1, [pc, #52]	; (808023c <_Z9ResetFRAMv+0x74>)
 8080206:	e006      	b.n	8080216 <_Z9ResetFRAMv+0x4e>
        if (i==32767) Serial.println(F("Done"));
 8080208:	f647 73ff 	movw	r3, #32767	; 0x7fff
 808020c:	429c      	cmp	r4, r3
 808020e:	d104      	bne.n	808021a <_Z9ResetFRAMv+0x52>
 8080210:	f001 fddc 	bl	8081dcc <_Z16_fetch_usbserialv>
 8080214:	490a      	ldr	r1, [pc, #40]	; (8080240 <_Z9ResetFRAMv+0x78>)
 8080216:	f001 fb8a 	bl	808192e <_ZN5Print7printlnEPKc>

void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    Serial.println("Resetting Memory");
    for (unsigned long i=4; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
 808021a:	3401      	adds	r4, #1
 808021c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8080220:	d1d9      	bne.n	80801d6 <_Z9ResetFRAMv+0xe>
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 8080222:	2107      	movs	r1, #7
 8080224:	2000      	movs	r0, #0
}
 8080226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 808022a:	f7ff bfc5 	b.w	80801b8 <_Z10FRAMwrite8jh>
 808022e:	bf00      	nop
 8080230:	08083310 	.word	0x08083310
 8080234:	08083321 	.word	0x08083321
 8080238:	0808332a 	.word	0x0808332a
 808023c:	08083333 	.word	0x08083333
 8080240:	0808333c 	.word	0x0808333c

08080244 <setup>:
int stateOfCharge = 0;            // stores battery charge level value



// setup() runs once, when the device is first turned on.
void setup() {
 8080244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pinMode(userSwitch,INPUT);                                      // Button for user input
 8080246:	2100      	movs	r1, #0
 8080248:	2005      	movs	r0, #5
 808024a:	f001 feed 	bl	8082028 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 808024e:	2100      	movs	r1, #0
 8080250:	2011      	movs	r0, #17
 8080252:	f001 fee9 	bl	8082028 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080256:	2101      	movs	r1, #1
 8080258:	2007      	movs	r0, #7
 808025a:	f001 fee5 	bl	8082028 <pinMode>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 808025e:	2101      	movs	r1, #1
 8080260:	2006      	movs	r0, #6
 8080262:	f001 fee1 	bl	8082028 <pinMode>
  digitalWrite(donePin,HIGH);
 8080266:	2101      	movs	r1, #1
 8080268:	2006      	movs	r0, #6
 808026a:	f001 feee 	bl	808204a <digitalWrite>
  digitalWrite(donePin,LOW);                                      // Pet the watchdog
 808026e:	2100      	movs	r1, #0
 8080270:	2006      	movs	r0, #6
 8080272:	f001 feea 	bl	808204a <digitalWrite>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080276:	2101      	movs	r1, #1
 8080278:	2004      	movs	r0, #4
 808027a:	f001 fed5 	bl	8082028 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 808027e:	2300      	movs	r3, #0
 8080280:	2204      	movs	r2, #4
 8080282:	4921      	ldr	r1, [pc, #132]	; (8080308 <setup+0xc4>)
 8080284:	4821      	ldr	r0, [pc, #132]	; (808030c <setup+0xc8>)
 8080286:	f000 fc65 	bl	8080b54 <spark_variable>
 808028a:	2300      	movs	r3, #0
 808028c:	2202      	movs	r2, #2
 808028e:	4920      	ldr	r1, [pc, #128]	; (8080310 <setup+0xcc>)
 8080290:	4820      	ldr	r0, [pc, #128]	; (8080314 <setup+0xd0>)
 8080292:	f000 fc5f 	bl	8080b54 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080296:	4a20      	ldr	r2, [pc, #128]	; (8080318 <setup+0xd4>)
 8080298:	4920      	ldr	r1, [pc, #128]	; (808031c <setup+0xd8>)
 808029a:	4821      	ldr	r0, [pc, #132]	; (8080320 <setup+0xdc>)
 808029c:	f000 fec5 	bl	808102a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80802a0:	2300      	movs	r3, #0
 80802a2:	2204      	movs	r2, #4
 80802a4:	491f      	ldr	r1, [pc, #124]	; (8080324 <setup+0xe0>)
 80802a6:	4820      	ldr	r0, [pc, #128]	; (8080328 <setup+0xe4>)
 80802a8:	f000 fc54 	bl	8080b54 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80802ac:	4a1f      	ldr	r2, [pc, #124]	; (808032c <setup+0xe8>)
 80802ae:	4920      	ldr	r1, [pc, #128]	; (8080330 <setup+0xec>)
 80802b0:	481b      	ldr	r0, [pc, #108]	; (8080320 <setup+0xdc>)
 80802b2:	f000 feba 	bl	808102a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802b6:	f000 fc6d 	bl	8080b94 <spark_cloud_flag_connected>
  Particle.variable("Signal", SignalString);
  Particle.function("measureNow",measureNow);



  if (!Particle.connected()) {                                     // Only going to connect if we are in connectionMode
 80802ba:	4604      	mov	r4, r0
 80802bc:	b9e0      	cbnz	r0, 80802f8 <setup+0xb4>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80802be:	f000 fc61 	bl	8080b84 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802c2:	4620      	mov	r0, r4
 80802c4:	f000 fad2 	bl	808086c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802c8:	4604      	mov	r4, r0
 80802ca:	4e1a      	ldr	r6, [pc, #104]	; (8080334 <setup+0xf0>)
 80802cc:	2500      	movs	r5, #0
 80802ce:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802d0:	2000      	movs	r0, #0
 80802d2:	f000 facb 	bl	808086c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802d6:	1b00      	subs	r0, r0, r4
 80802d8:	eb61 0105 	sbc.w	r1, r1, r5
 80802dc:	428f      	cmp	r7, r1
 80802de:	bf08      	it	eq
 80802e0:	4286      	cmpeq	r6, r0
 80802e2:	d305      	bcc.n	80802f0 <setup+0xac>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802e4:	f000 fc56 	bl	8080b94 <spark_cloud_flag_connected>
 80802e8:	b910      	cbnz	r0, 80802f0 <setup+0xac>
            spark_process();
 80802ea:	f000 fc43 	bl	8080b74 <spark_process>
 80802ee:	e7ef      	b.n	80802d0 <setup+0x8c>
 80802f0:	f000 fc50 	bl	8080b94 <spark_cloud_flag_connected>
    Particle.connect();
    waitFor(Particle.connected,90000);                             // 60 seconds then we timeout  -- *** need to add disconnected option and test
    Particle.process();
 80802f4:	f7ff ff4e 	bl	8080194 <_ZN10CloudClass7processEv>
  }

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 80802f8:	480f      	ldr	r0, [pc, #60]	; (8080338 <setup+0xf4>)
 80802fa:	f001 f98b 	bl	8081614 <_ZN9FuelGauge6getSoCEv>
 80802fe:	f002 ff5f 	bl	80831c0 <__aeabi_f2iz>
 8080302:	4b03      	ldr	r3, [pc, #12]	; (8080310 <setup+0xcc>)
 8080304:	6018      	str	r0, [r3, #0]
}
 8080306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080308:	080835c9 	.word	0x080835c9
 808030c:	08083341 	.word	0x08083341
 8080310:	200000a0 	.word	0x200000a0
 8080314:	08083349 	.word	0x08083349
 8080318:	08083354 	.word	0x08083354
 808031c:	0808015d 	.word	0x0808015d
 8080320:	08080fff 	.word	0x08080fff
 8080324:	200000af 	.word	0x200000af
 8080328:	0808335e 	.word	0x0808335e
 808032c:	08083365 	.word	0x08083365
 8080330:	08080439 	.word	0x08080439
 8080334:	00015f8f 	.word	0x00015f8f
 8080338:	200000a4 	.word	0x200000a4
 808033c:	00000000 	.word	0x00000000

08080340 <_Z14getTemperaturev>:
  Particle.publish("Test #7", "If you see this message - hard reset test failed", PRIVATE);
  BlinkForever();
}

int getTemperature()
{
 8080340:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 8080342:	200a      	movs	r0, #10
 8080344:	f001 fead 	bl	80820a2 <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080348:	f002 f9ec 	bl	8082724 <__aeabi_i2d>
 808034c:	a314      	add	r3, pc, #80	; (adr r3, 80803a0 <_Z14getTemperaturev+0x60>)
 808034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080352:	f002 fa4d 	bl	80827f0 <__aeabi_dmul>
 8080356:	f002 fc85 	bl	8082c64 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 808035a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 808035e:	f002 fddf 	bl	8082f20 <__aeabi_fmul>
 8080362:	f002 f9f1 	bl	8082748 <__aeabi_f2d>
 8080366:	2200      	movs	r2, #0
 8080368:	4b0f      	ldr	r3, [pc, #60]	; (80803a8 <_Z14getTemperaturev+0x68>)
 808036a:	f002 f88d 	bl	8082488 <__aeabi_dsub>
 808036e:	2200      	movs	r2, #0
 8080370:	4b0e      	ldr	r3, [pc, #56]	; (80803ac <_Z14getTemperaturev+0x6c>)
 8080372:	f002 fa3d 	bl	80827f0 <__aeabi_dmul>
 8080376:	f002 fc4d 	bl	8082c14 <__aeabi_d2iz>
 808037a:	f002 f9d3 	bl	8082724 <__aeabi_i2d>
 808037e:	2200      	movs	r2, #0
 8080380:	4b0b      	ldr	r3, [pc, #44]	; (80803b0 <_Z14getTemperaturev+0x70>)
 8080382:	f002 fa35 	bl	80827f0 <__aeabi_dmul>
 8080386:	2200      	movs	r2, #0
 8080388:	4b0a      	ldr	r3, [pc, #40]	; (80803b4 <_Z14getTemperaturev+0x74>)
 808038a:	f002 fb5b 	bl	8082a44 <__aeabi_ddiv>
 808038e:	2200      	movs	r2, #0
 8080390:	4b09      	ldr	r3, [pc, #36]	; (80803b8 <_Z14getTemperaturev+0x78>)
 8080392:	f002 f87b 	bl	808248c <__adddf3>
 8080396:	f002 fc3d 	bl	8082c14 <__aeabi_d2iz>
 808039a:	4b08      	ldr	r3, [pc, #32]	; (80803bc <_Z14getTemperaturev+0x7c>)
 808039c:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
 808039e:	bd08      	pop	{r3, pc}
 80803a0:	66666666 	.word	0x66666666
 80803a4:	400a6666 	.word	0x400a6666
 80803a8:	3fe00000 	.word	0x3fe00000
 80803ac:	40590000 	.word	0x40590000
 80803b0:	40220000 	.word	0x40220000
 80803b4:	40140000 	.word	0x40140000
 80803b8:	40400000 	.word	0x40400000
 80803bc:	20000098 	.word	0x20000098

080803c0 <_Z11watchdogISRv>:

void watchdogISR()
{
 80803c0:	b508      	push	{r3, lr}
  watchdogInterrupt = true;
 80803c2:	4b06      	ldr	r3, [pc, #24]	; (80803dc <_Z11watchdogISRv+0x1c>)
 80803c4:	2101      	movs	r1, #1
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
 80803c6:	2006      	movs	r0, #6
  return temperatureF;
}

void watchdogISR()
{
  watchdogInterrupt = true;
 80803c8:	7019      	strb	r1, [r3, #0]
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
 80803ca:	f001 fe3e 	bl	808204a <digitalWrite>
  digitalWrite(donePin, LOW);
}
 80803ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void watchdogISR()
{
  watchdogInterrupt = true;
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
  digitalWrite(donePin, LOW);
 80803d2:	2100      	movs	r1, #0
 80803d4:	2006      	movs	r0, #6
 80803d6:	f001 be38 	b.w	808204a <digitalWrite>
 80803da:	bf00      	nop
 80803dc:	2000009c 	.word	0x2000009c

080803e0 <_Z17getSignalStrengthv>:
  }
  else return 0;
}

void getSignalStrength()
{
 80803e0:	b530      	push	{r4, r5, lr}
 80803e2:	b08f      	sub	sp, #60	; 0x3c
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 80803e4:	4910      	ldr	r1, [pc, #64]	; (8080428 <_Z17getSignalStrengthv+0x48>)
 80803e6:	a804      	add	r0, sp, #16
 80803e8:	f000 fce2 	bl	8080db0 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 80803ec:	a804      	add	r0, sp, #16
 80803ee:	f000 fd32 	bl	8080e56 <_ZNK14CellularSignal19getAccessTechnologyEv>
 80803f2:	4604      	mov	r4, r0
 
  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 80803f4:	a804      	add	r0, sp, #16
 80803f6:	f000 fd8d 	bl	8080f14 <_ZNK14CellularSignal11getStrengthEv>
 80803fa:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 80803fc:	a804      	add	r0, sp, #16
 80803fe:	f000 fd71 	bl	8080ee4 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080402:	f002 f9a1 	bl	8082748 <__aeabi_f2d>
 8080406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808040a:	4628      	mov	r0, r5
 808040c:	f002 f99c 	bl	8082748 <__aeabi_f2d>
 8080410:	e9cd 0100 	strd	r0, r1, [sp]
 8080414:	4b05      	ldr	r3, [pc, #20]	; (808042c <_Z17getSignalStrengthv+0x4c>)
 8080416:	4a06      	ldr	r2, [pc, #24]	; (8080430 <_Z17getSignalStrengthv+0x50>)
 8080418:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 808041c:	2140      	movs	r1, #64	; 0x40
 808041e:	4805      	ldr	r0, [pc, #20]	; (8080434 <_Z17getSignalStrengthv+0x54>)
 8080420:	f000 fc40 	bl	8080ca4 <snprintf>
}
 8080424:	b00f      	add	sp, #60	; 0x3c
 8080426:	bd30      	pop	{r4, r5, pc}
 8080428:	200000f4 	.word	0x200000f4
 808042c:	20000004 	.word	0x20000004
 8080430:	08083370 	.word	0x08083370
 8080434:	200000af 	.word	0x200000af

08080438 <_Z10measureNow6String>:
    Particle.process();
  }
}


int measureNow(String command) {                                           // Function to force sending data in current hour
 8080438:	b508      	push	{r3, lr}
 808043a:	4904      	ldr	r1, [pc, #16]	; (808044c <_Z10measureNow6String+0x14>)
 808043c:	f001 fb79 	bl	8081b32 <_ZNK6String6equalsEPKc>

  if (command == "1")
 8080440:	b110      	cbz	r0, 8080448 <_Z10measureNow6String+0x10>
  {
    getSignalStrength();
 8080442:	f7ff ffcd 	bl	80803e0 <_Z17getSignalStrengthv>
    return 1;
 8080446:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080448:	bd08      	pop	{r3, pc}
 808044a:	bf00      	nop
 808044c:	080833e7 	.word	0x080833e7

08080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080450:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080452:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080454:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080456:	b17c      	cbz	r4, 8080478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080458:	6863      	ldr	r3, [r4, #4]
 808045a:	3b01      	subs	r3, #1
 808045c:	6063      	str	r3, [r4, #4]
 808045e:	b95b      	cbnz	r3, 8080478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080460:	6823      	ldr	r3, [r4, #0]
 8080462:	4620      	mov	r0, r4
 8080464:	689b      	ldr	r3, [r3, #8]
 8080466:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080468:	68a3      	ldr	r3, [r4, #8]
 808046a:	3b01      	subs	r3, #1
 808046c:	60a3      	str	r3, [r4, #8]
 808046e:	b91b      	cbnz	r3, 8080478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080470:	6823      	ldr	r3, [r4, #0]
 8080472:	4620      	mov	r0, r4
 8080474:	68db      	ldr	r3, [r3, #12]
 8080476:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080478:	4628      	mov	r0, r5
 808047a:	bd38      	pop	{r3, r4, r5, pc}

0808047c <_Z12BlinkForeverv>:
  watchdogInterrupt = true;
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
  digitalWrite(donePin, LOW);
}

void BlinkForever() {
 808047c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  delay(1000);
 808047e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080482:	f000 fc27 	bl	8080cd4 <delay>
 8080486:	4b0f      	ldr	r3, [pc, #60]	; (80804c4 <_Z12BlinkForeverv+0x48>)
 8080488:	2200      	movs	r2, #0
 808048a:	781b      	ldrb	r3, [r3, #0]
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
 808048c:	a802      	add	r0, sp, #8
 808048e:	f88d 2000 	strb.w	r2, [sp]
 8080492:	490d      	ldr	r1, [pc, #52]	; (80804c8 <_Z12BlinkForeverv+0x4c>)
 8080494:	f7ff fe70 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080498:	a803      	add	r0, sp, #12
 808049a:	f7ff ffd9 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("Test Failed" "Reset Device to Continue", PRIVATE);
  while(1) {
    digitalWrite(blueLED,HIGH);
 808049e:	2101      	movs	r1, #1
 80804a0:	2007      	movs	r0, #7
 80804a2:	f001 fdd2 	bl	808204a <digitalWrite>
    delay(2000);
 80804a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80804aa:	f000 fc13 	bl	8080cd4 <delay>
    digitalWrite(blueLED,LOW);
 80804ae:	2100      	movs	r1, #0
 80804b0:	2007      	movs	r0, #7
 80804b2:	f001 fdca 	bl	808204a <digitalWrite>
    delay(2000);
 80804b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80804ba:	f000 fc0b 	bl	8080cd4 <delay>
    Particle.process();
 80804be:	f7ff fe69 	bl	8080194 <_ZN10CloudClass7processEv>
 80804c2:	e7ec      	b.n	808049e <_Z12BlinkForeverv+0x22>
 80804c4:	200000ae 	.word	0x200000ae
 80804c8:	08083389 	.word	0x08083389

080804cc <loop>:

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
}


void loop() {
 80804cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80804ce:	4c9a      	ldr	r4, [pc, #616]	; (8080738 <loop+0x26c>)
 80804d0:	b095      	sub	sp, #84	; 0x54
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80804d2:	2500      	movs	r5, #0
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
 80804d4:	4999      	ldr	r1, [pc, #612]	; (808073c <loop+0x270>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80804d6:	7823      	ldrb	r3, [r4, #0]
 80804d8:	4a99      	ldr	r2, [pc, #612]	; (8080740 <loop+0x274>)
 80804da:	a804      	add	r0, sp, #16
 80804dc:	f88d 5000 	strb.w	r5, [sp]
 80804e0:	f7ff fe4a 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80804e4:	a805      	add	r0, sp, #20
 80804e6:	f7ff ffb3 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80804ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80804ee:	f000 fbf1 	bl	8080cd4 <delay>
  Particle.process();
 80804f2:	f7ff fe4f 	bl	8080194 <_ZN10CloudClass7processEv>

  if (!fram.begin()) {                                                // You can stick the new i2c addr in here, e.g. begin(0x51);
 80804f6:	2150      	movs	r1, #80	; 0x50
 80804f8:	4892      	ldr	r0, [pc, #584]	; (8080744 <loop+0x278>)
 80804fa:	f7ff fde3 	bl	80800c4 <_ZN17Adafruit_FRAM_I2C5beginEh>
 80804fe:	b958      	cbnz	r0, 8080518 <loop+0x4c>
    Particle.publish("Test #1", "Failed - Missing FRAM", PRIVATE);    // Can't communicate with FRAM - failed test
 8080500:	f88d 0000 	strb.w	r0, [sp]
 8080504:	7823      	ldrb	r3, [r4, #0]
 8080506:	a804      	add	r0, sp, #16
 8080508:	4a8f      	ldr	r2, [pc, #572]	; (8080748 <loop+0x27c>)
 808050a:	4990      	ldr	r1, [pc, #576]	; (808074c <loop+0x280>)
 808050c:	f7ff fe34 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080510:	a805      	add	r0, sp, #20
 8080512:	f7ff ff9d 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080516:	e011      	b.n	808053c <loop+0x70>
  }
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                 // Check to see if the memory map in the sketch matches the data on the chip
 8080518:	4628      	mov	r0, r5
 808051a:	f7ff fe47 	bl	80801ac <_Z9FRAMread8j>
 808051e:	2807      	cmp	r0, #7
 8080520:	d00c      	beq.n	808053c <loop+0x70>
 8080522:	7823      	ldrb	r3, [r4, #0]
    Particle.publish("Test #1", "In process - Erasing FRAM", PRIVATE);
 8080524:	4a8a      	ldr	r2, [pc, #552]	; (8080750 <loop+0x284>)
 8080526:	4989      	ldr	r1, [pc, #548]	; (808074c <loop+0x280>)
 8080528:	a804      	add	r0, sp, #16
 808052a:	f88d 5000 	strb.w	r5, [sp]
 808052e:	f7ff fe23 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080532:	a805      	add	r0, sp, #20
 8080534:	f7ff ff8c 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    ResetFRAM();                                                      // Reset the FRAM to correct the issue
 8080538:	f7ff fe46 	bl	80801c8 <_Z9ResetFRAMv>
  }
  delay(1000);
 808053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080540:	f000 fbc8 	bl	8080cd4 <delay>
  Particle.process();
 8080544:	f7ff fe26 	bl	8080194 <_ZN10CloudClass7processEv>

  if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) Particle.publish("Test #1", "Failed - FRAM Read Error", PRIVATE);
 8080548:	2000      	movs	r0, #0
 808054a:	f7ff fe2f 	bl	80801ac <_Z9FRAMread8j>
 808054e:	2200      	movs	r2, #0
 8080550:	2807      	cmp	r0, #7
 8080552:	f88d 2000 	strb.w	r2, [sp]
 8080556:	7823      	ldrb	r3, [r4, #0]
 8080558:	bf14      	ite	ne
 808055a:	4a7e      	ldrne	r2, [pc, #504]	; (8080754 <loop+0x288>)
  else Particle.publish("Test #1", "FRAM Test Passed", PRIVATE);
 808055c:	4a7e      	ldreq	r2, [pc, #504]	; (8080758 <loop+0x28c>)
 808055e:	497b      	ldr	r1, [pc, #492]	; (808074c <loop+0x280>)
 8080560:	a804      	add	r0, sp, #16
 8080562:	f7ff fe09 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080566:	a805      	add	r0, sp, #20
 8080568:	f7ff ff72 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080570:	f000 fbb0 	bl	8080cd4 <delay>
  Particle.process();
 8080574:	f7ff fe0e 	bl	8080194 <_ZN10CloudClass7processEv>

  int tempValue = getTemperature();
 8080578:	f7ff fee2 	bl	8080340 <_Z14getTemperaturev>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808057c:	2500      	movs	r5, #0
  char data[64];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "Temperature is %iF", tempValue);
 808057e:	4603      	mov	r3, r0
 8080580:	4a76      	ldr	r2, [pc, #472]	; (808075c <loop+0x290>)
 8080582:	2140      	movs	r1, #64	; 0x40
 8080584:	a804      	add	r0, sp, #16
 8080586:	f000 fb8d 	bl	8080ca4 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808058a:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #2", data, PRIVATE);
 808058c:	aa04      	add	r2, sp, #16
 808058e:	4974      	ldr	r1, [pc, #464]	; (8080760 <loop+0x294>)
 8080590:	a802      	add	r0, sp, #8
 8080592:	f88d 5000 	strb.w	r5, [sp]
 8080596:	f7ff fdef 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808059a:	a803      	add	r0, sp, #12
 808059c:	f7ff ff58 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80805a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805a4:	f000 fb96 	bl	8080cd4 <delay>
  Particle.process();
 80805a8:	f7ff fdf4 	bl	8080194 <_ZN10CloudClass7processEv>
 80805ac:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #3", "Press User Switch",PRIVATE);
 80805ae:	4a6d      	ldr	r2, [pc, #436]	; (8080764 <loop+0x298>)
 80805b0:	496d      	ldr	r1, [pc, #436]	; (8080768 <loop+0x29c>)
 80805b2:	a802      	add	r0, sp, #8
 80805b4:	f88d 5000 	strb.w	r5, [sp]
 80805b8:	f7ff fdde 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80805bc:	a803      	add	r0, sp, #12
 80805be:	f7ff ff47 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80805c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805c6:	f000 fb85 	bl	8080cd4 <delay>
  while(digitalRead(userSwitch)) Particle.process();
 80805ca:	2005      	movs	r0, #5
 80805cc:	f001 fd56 	bl	808207c <digitalRead>
 80805d0:	b110      	cbz	r0, 80805d8 <loop+0x10c>
 80805d2:	f7ff fddf 	bl	8080194 <_ZN10CloudClass7processEv>
 80805d6:	e7f8      	b.n	80805ca <loop+0xfe>
 80805d8:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #3", "User Switch Press Detected",PRIVATE);
 80805da:	4a64      	ldr	r2, [pc, #400]	; (808076c <loop+0x2a0>)
 80805dc:	4962      	ldr	r1, [pc, #392]	; (8080768 <loop+0x29c>)
 80805de:	f88d 0000 	strb.w	r0, [sp]
 80805e2:	a802      	add	r0, sp, #8
 80805e4:	f7ff fdc8 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80805e8:	a803      	add	r0, sp, #12
 80805ea:	f7ff ff31 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80805ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805f2:	f000 fb6f 	bl	8080cd4 <delay>
  Particle.process();
 80805f6:	f7ff fdcd 	bl	8080194 <_ZN10CloudClass7processEv>

  do {
    if (millis() >= updateInterval + lastUpdate) {
 80805fa:	4f5d      	ldr	r7, [pc, #372]	; (8080770 <loop+0x2a4>)
 80805fc:	4e5d      	ldr	r6, [pc, #372]	; (8080774 <loop+0x2a8>)
 80805fe:	4d5e      	ldr	r5, [pc, #376]	; (8080778 <loop+0x2ac>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080600:	f000 f91c 	bl	808083c <HAL_Timer_Get_Milli_Seconds>
 8080604:	6833      	ldr	r3, [r6, #0]
 8080606:	683a      	ldr	r2, [r7, #0]
 8080608:	4413      	add	r3, r2
 808060a:	4298      	cmp	r0, r3
 808060c:	d31c      	bcc.n	8080648 <loop+0x17c>
      stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 808060e:	485b      	ldr	r0, [pc, #364]	; (808077c <loop+0x2b0>)
 8080610:	f001 f800 	bl	8081614 <_ZN9FuelGauge6getSoCEv>
 8080614:	f002 fdd4 	bl	80831c0 <__aeabi_f2iz>
      snprintf(data, sizeof(data), "Battery charge level = %i", stateOfCharge);
 8080618:	4a59      	ldr	r2, [pc, #356]	; (8080780 <loop+0x2b4>)
  delay(1000);
  Particle.process();

  do {
    if (millis() >= updateInterval + lastUpdate) {
      stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 808061a:	4603      	mov	r3, r0
 808061c:	6028      	str	r0, [r5, #0]
      snprintf(data, sizeof(data), "Battery charge level = %i", stateOfCharge);
 808061e:	2140      	movs	r1, #64	; 0x40
 8080620:	a804      	add	r0, sp, #16
 8080622:	f000 fb3f 	bl	8080ca4 <snprintf>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080626:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080628:	7823      	ldrb	r3, [r4, #0]
      Particle.publish("Test #4", data, PRIVATE);
 808062a:	4956      	ldr	r1, [pc, #344]	; (8080784 <loop+0x2b8>)
 808062c:	f88d 2000 	strb.w	r2, [sp]
 8080630:	a802      	add	r0, sp, #8
 8080632:	aa04      	add	r2, sp, #16
 8080634:	f7ff fda0 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080638:	a803      	add	r0, sp, #12
 808063a:	f7ff ff09 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.process();
 808063e:	f7ff fda9 	bl	8080194 <_ZN10CloudClass7processEv>
 8080642:	f000 f8fb 	bl	808083c <HAL_Timer_Get_Milli_Seconds>
      lastUpdate = millis();
 8080646:	6030      	str	r0, [r6, #0]
    }
  }  while(stateOfCharge <= 65);
 8080648:	682b      	ldr	r3, [r5, #0]
 808064a:	2b41      	cmp	r3, #65	; 0x41
 808064c:	ddd8      	ble.n	8080600 <loop+0x134>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808064e:	2700      	movs	r7, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080650:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #5", "Battery charge test passed", PRIVATE);
 8080652:	4a4d      	ldr	r2, [pc, #308]	; (8080788 <loop+0x2bc>)
 8080654:	494d      	ldr	r1, [pc, #308]	; (808078c <loop+0x2c0>)
 8080656:	a802      	add	r0, sp, #8
 8080658:	f88d 7000 	strb.w	r7, [sp]
 808065c:	f7ff fd8c 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080660:	a803      	add	r0, sp, #12
 8080662:	f7ff fef5 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>


  time_t beginTime = Time.now();
 8080666:	f001 fab1 	bl	8081bcc <_ZN9TimeClass3nowEv>
  watchdogISR();
  watchdogInterrupt = false;
 808066a:	4d49      	ldr	r5, [pc, #292]	; (8080790 <loop+0x2c4>)
    }
  }  while(stateOfCharge <= 65);
  Particle.publish("Test #5", "Battery charge test passed", PRIVATE);


  time_t beginTime = Time.now();
 808066c:	4606      	mov	r6, r0
  watchdogISR();
 808066e:	f7ff fea7 	bl	80803c0 <_Z11watchdogISRv>
  watchdogInterrupt = false;
 8080672:	702f      	strb	r7, [r5, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080674:	f000 fa8e 	bl	8080b94 <spark_cloud_flag_connected>

  if (Particle.connected()) Particle.publish("Test #6 Started","Expect this test to take ~60 minutes",PRIVATE);
 8080678:	b158      	cbz	r0, 8080692 <loop+0x1c6>
 808067a:	4b2f      	ldr	r3, [pc, #188]	; (8080738 <loop+0x26c>)
 808067c:	a802      	add	r0, sp, #8
 808067e:	781b      	ldrb	r3, [r3, #0]
 8080680:	4a44      	ldr	r2, [pc, #272]	; (8080794 <loop+0x2c8>)
 8080682:	f88d 7000 	strb.w	r7, [sp]
 8080686:	4944      	ldr	r1, [pc, #272]	; (8080798 <loop+0x2cc>)
 8080688:	f7ff fd76 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808068c:	a803      	add	r0, sp, #12
 808068e:	f7ff fedf 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080696:	f000 fb1d 	bl	8080cd4 <delay>
  Particle.process();
 808069a:	f7ff fd7b 	bl	8080194 <_ZN10CloudClass7processEv>

  while(!watchdogInterrupt) {
 808069e:	782b      	ldrb	r3, [r5, #0]
 80806a0:	b933      	cbnz	r3, 80806b0 <loop+0x1e4>
    Particle.process();
 80806a2:	f7ff fd77 	bl	8080194 <_ZN10CloudClass7processEv>
    delay(1000);
 80806a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80806aa:	f000 fb13 	bl	8080cd4 <delay>

  if (Particle.connected()) Particle.publish("Test #6 Started","Expect this test to take ~60 minutes",PRIVATE);
  delay(1000);
  Particle.process();

  while(!watchdogInterrupt) {
 80806ae:	e7f6      	b.n	808069e <loop+0x1d2>
    Particle.process();
    delay(1000);
  }

  int elapsedMinutes = (Time.now() - beginTime)/60;
 80806b0:	f001 fa8c 	bl	8081bcc <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "Elapsed time in minutes is %i", elapsedMinutes);
 80806b4:	233c      	movs	r3, #60	; 0x3c
 80806b6:	1b80      	subs	r0, r0, r6
 80806b8:	fb90 f3f3 	sdiv	r3, r0, r3
 80806bc:	4a37      	ldr	r2, [pc, #220]	; (808079c <loop+0x2d0>)
 80806be:	2140      	movs	r1, #64	; 0x40
 80806c0:	a804      	add	r0, sp, #16
 80806c2:	f000 faef 	bl	8080ca4 <snprintf>
 80806c6:	f000 fa65 	bl	8080b94 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Test #6 Finished", data ,PRIVATE);
 80806ca:	b158      	cbz	r0, 80806e4 <loop+0x218>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80806cc:	2200      	movs	r2, #0
 80806ce:	f88d 2000 	strb.w	r2, [sp]
 80806d2:	a802      	add	r0, sp, #8
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80806d4:	7823      	ldrb	r3, [r4, #0]
 80806d6:	aa04      	add	r2, sp, #16
 80806d8:	4931      	ldr	r1, [pc, #196]	; (80807a0 <loop+0x2d4>)
 80806da:	f7ff fd4d 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80806de:	a803      	add	r0, sp, #12
 80806e0:	f7ff feb6 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80806e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80806e8:	2500      	movs	r5, #0
 80806ea:	f000 faf3 	bl	8080cd4 <delay>
  Particle.process();
 80806ee:	f7ff fd51 	bl	8080194 <_ZN10CloudClass7processEv>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80806f2:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #7", "Final Test - Hard Reset in 1 second",PRIVATE);
 80806f4:	4a2b      	ldr	r2, [pc, #172]	; (80807a4 <loop+0x2d8>)
 80806f6:	492c      	ldr	r1, [pc, #176]	; (80807a8 <loop+0x2dc>)
 80806f8:	a802      	add	r0, sp, #8
 80806fa:	f88d 5000 	strb.w	r5, [sp]
 80806fe:	f7ff fd3b 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080702:	a803      	add	r0, sp, #12
 8080704:	f7ff fea4 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808070c:	f000 fae2 	bl	8080cd4 <delay>
  Particle.process();
 8080710:	f7ff fd40 	bl	8080194 <_ZN10CloudClass7processEv>

  digitalWrite(hardResetPin,HIGH);                    // Zero the count so only every three
 8080714:	2101      	movs	r1, #1
 8080716:	2004      	movs	r0, #4
 8080718:	f001 fc97 	bl	808204a <digitalWrite>
 808071c:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #7", "If you see this message - hard reset test failed", PRIVATE);
 808071e:	4a23      	ldr	r2, [pc, #140]	; (80807ac <loop+0x2e0>)
 8080720:	4921      	ldr	r1, [pc, #132]	; (80807a8 <loop+0x2dc>)
 8080722:	a802      	add	r0, sp, #8
 8080724:	f88d 5000 	strb.w	r5, [sp]
 8080728:	f7ff fd26 	bl	8080178 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808072c:	a803      	add	r0, sp, #12
 808072e:	f7ff fe8f 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  BlinkForever();
 8080732:	f7ff fea3 	bl	808047c <_Z12BlinkForeverv>
 8080736:	bf00      	nop
 8080738:	200000ae 	.word	0x200000ae
 808073c:	080833c0 	.word	0x080833c0
 8080740:	080833ad 	.word	0x080833ad
 8080744:	200000ac 	.word	0x200000ac
 8080748:	080833cb 	.word	0x080833cb
 808074c:	080833e1 	.word	0x080833e1
 8080750:	080833e9 	.word	0x080833e9
 8080754:	08083403 	.word	0x08083403
 8080758:	0808341c 	.word	0x0808341c
 808075c:	0808342d 	.word	0x0808342d
 8080760:	08083440 	.word	0x08083440
 8080764:	08083448 	.word	0x08083448
 8080768:	0808345a 	.word	0x0808345a
 808076c:	08083462 	.word	0x08083462
 8080770:	20000000 	.word	0x20000000
 8080774:	200000f0 	.word	0x200000f0
 8080778:	200000a0 	.word	0x200000a0
 808077c:	200000a4 	.word	0x200000a4
 8080780:	0808347d 	.word	0x0808347d
 8080784:	08083497 	.word	0x08083497
 8080788:	0808349f 	.word	0x0808349f
 808078c:	080834ba 	.word	0x080834ba
 8080790:	2000009c 	.word	0x2000009c
 8080794:	080834c2 	.word	0x080834c2
 8080798:	080834e7 	.word	0x080834e7
 808079c:	080834f7 	.word	0x080834f7
 80807a0:	08083515 	.word	0x08083515
 80807a4:	08083526 	.word	0x08083526
 80807a8:	0808354a 	.word	0x0808354a
 80807ac:	08083552 	.word	0x08083552

080807b0 <_GLOBAL__sub_I_SignalString>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80807b0:	4b0c      	ldr	r3, [pc, #48]	; (80807e4 <_GLOBAL__sub_I_SignalString+0x34>)
  {
    digitalWrite(hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 80807b2:	b510      	push	{r4, lr}
 80807b4:	2401      	movs	r4, #1
 80807b6:	701c      	strb	r4, [r3, #0]
 80807b8:	f000 f860 	bl	808087c <HAL_Pin_Map>
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 80807bc:	480a      	ldr	r0, [pc, #40]	; (80807e8 <_GLOBAL__sub_I_SignalString+0x38>)
 80807be:	f7ff fc7e 	bl	80800be <_ZN17Adafruit_FRAM_I2CC1Ev>
 #include "FRAM-Library-Extensions.h"                     // Extends the FRAM Library
 #include "electrondoc.h"                                 // Documents pinout
 

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 80807c2:	4620      	mov	r0, r4
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 80807c4:	4c09      	ldr	r4, [pc, #36]	; (80807ec <_GLOBAL__sub_I_SignalString+0x3c>)
 #include "FRAM-Library-Extensions.h"                     // Extends the FRAM Library
 #include "electrondoc.h"                                 // Documents pinout
 

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 80807c6:	2100      	movs	r1, #0
 80807c8:	f000 f990 	bl	8080aec <system_thread_set_state>
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 80807cc:	2100      	movs	r1, #0
 80807ce:	4620      	mov	r0, r4
 80807d0:	f000 fee0 	bl	8081594 <_ZN9FuelGaugeC1Eb>
 80807d4:	4620      	mov	r0, r4
  {
    digitalWrite(hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 80807d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 #include "electrondoc.h"                                 // Documents pinout
 

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 80807da:	4a05      	ldr	r2, [pc, #20]	; (80807f0 <_GLOBAL__sub_I_SignalString+0x40>)
 80807dc:	4905      	ldr	r1, [pc, #20]	; (80807f4 <_GLOBAL__sub_I_SignalString+0x44>)
 80807de:	f001 bcfd 	b.w	80821dc <__aeabi_atexit>
 80807e2:	bf00      	nop
 80807e4:	200000ae 	.word	0x200000ae
 80807e8:	200000ac 	.word	0x200000ac
 80807ec:	200000a4 	.word	0x200000a4
 80807f0:	20000094 	.word	0x20000094
 80807f4:	080815b3 	.word	0x080815b3

080807f8 <_GLOBAL__sub_I__ZN8MMA8452QC2Eh>:
 80807f8:	f000 b840 	b.w	808087c <HAL_Pin_Map>

080807fc <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80807fc:	b508      	push	{r3, lr}
 80807fe:	4b02      	ldr	r3, [pc, #8]	; (8080808 <inet_gethostbyname+0xc>)
 8080800:	681b      	ldr	r3, [r3, #0]
 8080802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080804:	9301      	str	r3, [sp, #4]
 8080806:	bd08      	pop	{r3, pc}
 8080808:	08060020 	.word	0x08060020

0808080c <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 808080c:	b508      	push	{r3, lr}
 808080e:	4b02      	ldr	r3, [pc, #8]	; (8080818 <cellular_signal+0xc>)
 8080810:	681b      	ldr	r3, [r3, #0]
 8080812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080814:	9301      	str	r3, [sp, #4]
 8080816:	bd08      	pop	{r3, pc}
 8080818:	08060020 	.word	0x08060020

0808081c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808081c:	b508      	push	{r3, lr}
 808081e:	4b02      	ldr	r3, [pc, #8]	; (8080828 <os_mutex_create+0xc>)
 8080820:	681b      	ldr	r3, [r3, #0]
 8080822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080824:	9301      	str	r3, [sp, #4]
 8080826:	bd08      	pop	{r3, pc}
 8080828:	080401d0 	.word	0x080401d0

0808082c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808082c:	b508      	push	{r3, lr}
 808082e:	4b02      	ldr	r3, [pc, #8]	; (8080838 <HAL_RNG_GetRandomNumber+0xc>)
 8080830:	681b      	ldr	r3, [r3, #0]
 8080832:	685b      	ldr	r3, [r3, #4]
 8080834:	9301      	str	r3, [sp, #4]
 8080836:	bd08      	pop	{r3, pc}
 8080838:	0804019c 	.word	0x0804019c

0808083c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808083c:	b508      	push	{r3, lr}
 808083e:	4b02      	ldr	r3, [pc, #8]	; (8080848 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080840:	681b      	ldr	r3, [r3, #0]
 8080842:	695b      	ldr	r3, [r3, #20]
 8080844:	9301      	str	r3, [sp, #4]
 8080846:	bd08      	pop	{r3, pc}
 8080848:	0804019c 	.word	0x0804019c

0808084c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 808084c:	b508      	push	{r3, lr}
 808084e:	4b02      	ldr	r3, [pc, #8]	; (8080858 <HAL_RTC_Get_UnixTime+0xc>)
 8080850:	681b      	ldr	r3, [r3, #0]
 8080852:	69db      	ldr	r3, [r3, #28]
 8080854:	9301      	str	r3, [sp, #4]
 8080856:	bd08      	pop	{r3, pc}
 8080858:	0804019c 	.word	0x0804019c

0808085c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 808085c:	b508      	push	{r3, lr}
 808085e:	4b02      	ldr	r3, [pc, #8]	; (8080868 <HAL_RTC_Time_Is_Valid+0xc>)
 8080860:	681b      	ldr	r3, [r3, #0]
 8080862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080864:	9301      	str	r3, [sp, #4]
 8080866:	bd08      	pop	{r3, pc}
 8080868:	0804019c 	.word	0x0804019c

0808086c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 808086c:	b508      	push	{r3, lr}
 808086e:	4b02      	ldr	r3, [pc, #8]	; (8080878 <hal_timer_millis+0xc>)
 8080870:	681b      	ldr	r3, [r3, #0]
 8080872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8080874:	9301      	str	r3, [sp, #4]
 8080876:	bd08      	pop	{r3, pc}
 8080878:	0804019c 	.word	0x0804019c

0808087c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808087c:	b508      	push	{r3, lr}
 808087e:	4b02      	ldr	r3, [pc, #8]	; (8080888 <HAL_Pin_Map+0xc>)
 8080880:	681b      	ldr	r3, [r3, #0]
 8080882:	681b      	ldr	r3, [r3, #0]
 8080884:	9301      	str	r3, [sp, #4]
 8080886:	bd08      	pop	{r3, pc}
 8080888:	080401b0 	.word	0x080401b0

0808088c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808088c:	b508      	push	{r3, lr}
 808088e:	4b02      	ldr	r3, [pc, #8]	; (8080898 <HAL_Validate_Pin_Function+0xc>)
 8080890:	681b      	ldr	r3, [r3, #0]
 8080892:	685b      	ldr	r3, [r3, #4]
 8080894:	9301      	str	r3, [sp, #4]
 8080896:	bd08      	pop	{r3, pc}
 8080898:	080401b0 	.word	0x080401b0

0808089c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808089c:	b508      	push	{r3, lr}
 808089e:	4b02      	ldr	r3, [pc, #8]	; (80808a8 <HAL_Pin_Mode+0xc>)
 80808a0:	681b      	ldr	r3, [r3, #0]
 80808a2:	689b      	ldr	r3, [r3, #8]
 80808a4:	9301      	str	r3, [sp, #4]
 80808a6:	bd08      	pop	{r3, pc}
 80808a8:	080401b0 	.word	0x080401b0

080808ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80808ac:	b508      	push	{r3, lr}
 80808ae:	4b02      	ldr	r3, [pc, #8]	; (80808b8 <HAL_Get_Pin_Mode+0xc>)
 80808b0:	681b      	ldr	r3, [r3, #0]
 80808b2:	68db      	ldr	r3, [r3, #12]
 80808b4:	9301      	str	r3, [sp, #4]
 80808b6:	bd08      	pop	{r3, pc}
 80808b8:	080401b0 	.word	0x080401b0

080808bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80808bc:	b508      	push	{r3, lr}
 80808be:	4b02      	ldr	r3, [pc, #8]	; (80808c8 <HAL_GPIO_Write+0xc>)
 80808c0:	681b      	ldr	r3, [r3, #0]
 80808c2:	691b      	ldr	r3, [r3, #16]
 80808c4:	9301      	str	r3, [sp, #4]
 80808c6:	bd08      	pop	{r3, pc}
 80808c8:	080401b0 	.word	0x080401b0

080808cc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80808cc:	b508      	push	{r3, lr}
 80808ce:	4b02      	ldr	r3, [pc, #8]	; (80808d8 <HAL_GPIO_Read+0xc>)
 80808d0:	681b      	ldr	r3, [r3, #0]
 80808d2:	695b      	ldr	r3, [r3, #20]
 80808d4:	9301      	str	r3, [sp, #4]
 80808d6:	bd08      	pop	{r3, pc}
 80808d8:	080401b0 	.word	0x080401b0

080808dc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80808dc:	b508      	push	{r3, lr}
 80808de:	4b02      	ldr	r3, [pc, #8]	; (80808e8 <HAL_ADC_Read+0xc>)
 80808e0:	681b      	ldr	r3, [r3, #0]
 80808e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80808e4:	9301      	str	r3, [sp, #4]
 80808e6:	bd08      	pop	{r3, pc}
 80808e8:	080401b0 	.word	0x080401b0

080808ec <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80808ec:	b508      	push	{r3, lr}
 80808ee:	4b02      	ldr	r3, [pc, #8]	; (80808f8 <HAL_I2C_Begin+0xc>)
 80808f0:	681b      	ldr	r3, [r3, #0]
 80808f2:	68db      	ldr	r3, [r3, #12]
 80808f4:	9301      	str	r3, [sp, #4]
 80808f6:	bd08      	pop	{r3, pc}
 80808f8:	080401ac 	.word	0x080401ac

080808fc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80808fc:	b508      	push	{r3, lr}
 80808fe:	4b02      	ldr	r3, [pc, #8]	; (8080908 <HAL_I2C_Request_Data+0xc>)
 8080900:	681b      	ldr	r3, [r3, #0]
 8080902:	695b      	ldr	r3, [r3, #20]
 8080904:	9301      	str	r3, [sp, #4]
 8080906:	bd08      	pop	{r3, pc}
 8080908:	080401ac 	.word	0x080401ac

0808090c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 808090c:	b508      	push	{r3, lr}
 808090e:	4b02      	ldr	r3, [pc, #8]	; (8080918 <HAL_I2C_Begin_Transmission+0xc>)
 8080910:	681b      	ldr	r3, [r3, #0]
 8080912:	699b      	ldr	r3, [r3, #24]
 8080914:	9301      	str	r3, [sp, #4]
 8080916:	bd08      	pop	{r3, pc}
 8080918:	080401ac 	.word	0x080401ac

0808091c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 808091c:	b508      	push	{r3, lr}
 808091e:	4b02      	ldr	r3, [pc, #8]	; (8080928 <HAL_I2C_End_Transmission+0xc>)
 8080920:	681b      	ldr	r3, [r3, #0]
 8080922:	69db      	ldr	r3, [r3, #28]
 8080924:	9301      	str	r3, [sp, #4]
 8080926:	bd08      	pop	{r3, pc}
 8080928:	080401ac 	.word	0x080401ac

0808092c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808092c:	b508      	push	{r3, lr}
 808092e:	4b02      	ldr	r3, [pc, #8]	; (8080938 <HAL_I2C_Write_Data+0xc>)
 8080930:	681b      	ldr	r3, [r3, #0]
 8080932:	6a1b      	ldr	r3, [r3, #32]
 8080934:	9301      	str	r3, [sp, #4]
 8080936:	bd08      	pop	{r3, pc}
 8080938:	080401ac 	.word	0x080401ac

0808093c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808093c:	b508      	push	{r3, lr}
 808093e:	4b02      	ldr	r3, [pc, #8]	; (8080948 <HAL_I2C_Available_Data+0xc>)
 8080940:	681b      	ldr	r3, [r3, #0]
 8080942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080944:	9301      	str	r3, [sp, #4]
 8080946:	bd08      	pop	{r3, pc}
 8080948:	080401ac 	.word	0x080401ac

0808094c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808094c:	b508      	push	{r3, lr}
 808094e:	4b02      	ldr	r3, [pc, #8]	; (8080958 <HAL_I2C_Read_Data+0xc>)
 8080950:	681b      	ldr	r3, [r3, #0]
 8080952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080954:	9301      	str	r3, [sp, #4]
 8080956:	bd08      	pop	{r3, pc}
 8080958:	080401ac 	.word	0x080401ac

0808095c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808095c:	b508      	push	{r3, lr}
 808095e:	4b02      	ldr	r3, [pc, #8]	; (8080968 <HAL_I2C_Peek_Data+0xc>)
 8080960:	681b      	ldr	r3, [r3, #0]
 8080962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080964:	9301      	str	r3, [sp, #4]
 8080966:	bd08      	pop	{r3, pc}
 8080968:	080401ac 	.word	0x080401ac

0808096c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808096c:	b508      	push	{r3, lr}
 808096e:	4b02      	ldr	r3, [pc, #8]	; (8080978 <HAL_I2C_Flush_Data+0xc>)
 8080970:	681b      	ldr	r3, [r3, #0]
 8080972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080974:	9301      	str	r3, [sp, #4]
 8080976:	bd08      	pop	{r3, pc}
 8080978:	080401ac 	.word	0x080401ac

0808097c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808097c:	b508      	push	{r3, lr}
 808097e:	4b02      	ldr	r3, [pc, #8]	; (8080988 <HAL_I2C_Is_Enabled+0xc>)
 8080980:	681b      	ldr	r3, [r3, #0]
 8080982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080984:	9301      	str	r3, [sp, #4]
 8080986:	bd08      	pop	{r3, pc}
 8080988:	080401ac 	.word	0x080401ac

0808098c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808098c:	b508      	push	{r3, lr}
 808098e:	4b02      	ldr	r3, [pc, #8]	; (8080998 <HAL_I2C_Init+0xc>)
 8080990:	681b      	ldr	r3, [r3, #0]
 8080992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080994:	9301      	str	r3, [sp, #4]
 8080996:	bd08      	pop	{r3, pc}
 8080998:	080401ac 	.word	0x080401ac

0808099c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808099c:	b508      	push	{r3, lr}
 808099e:	4b02      	ldr	r3, [pc, #8]	; (80809a8 <HAL_I2C_Acquire+0xc>)
 80809a0:	681b      	ldr	r3, [r3, #0]
 80809a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80809a4:	9301      	str	r3, [sp, #4]
 80809a6:	bd08      	pop	{r3, pc}
 80809a8:	080401ac 	.word	0x080401ac

080809ac <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80809ac:	b508      	push	{r3, lr}
 80809ae:	4b02      	ldr	r3, [pc, #8]	; (80809b8 <HAL_I2C_Release+0xc>)
 80809b0:	681b      	ldr	r3, [r3, #0]
 80809b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80809b4:	9301      	str	r3, [sp, #4]
 80809b6:	bd08      	pop	{r3, pc}
 80809b8:	080401ac 	.word	0x080401ac

080809bc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80809bc:	b508      	push	{r3, lr}
 80809be:	4b02      	ldr	r3, [pc, #8]	; (80809c8 <HAL_SPI_Init+0xc>)
 80809c0:	681b      	ldr	r3, [r3, #0]
 80809c2:	69db      	ldr	r3, [r3, #28]
 80809c4:	9301      	str	r3, [sp, #4]
 80809c6:	bd08      	pop	{r3, pc}
 80809c8:	080401b4 	.word	0x080401b4

080809cc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80809cc:	b508      	push	{r3, lr}
 80809ce:	4b02      	ldr	r3, [pc, #8]	; (80809d8 <HAL_SPI_Is_Enabled+0xc>)
 80809d0:	681b      	ldr	r3, [r3, #0]
 80809d2:	6a1b      	ldr	r3, [r3, #32]
 80809d4:	9301      	str	r3, [sp, #4]
 80809d6:	bd08      	pop	{r3, pc}
 80809d8:	080401b4 	.word	0x080401b4

080809dc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80809dc:	b508      	push	{r3, lr}
 80809de:	4b02      	ldr	r3, [pc, #8]	; (80809e8 <HAL_USART_Init+0xc>)
 80809e0:	681b      	ldr	r3, [r3, #0]
 80809e2:	699b      	ldr	r3, [r3, #24]
 80809e4:	9301      	str	r3, [sp, #4]
 80809e6:	bd08      	pop	{r3, pc}
 80809e8:	080401c4 	.word	0x080401c4

080809ec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80809ec:	b508      	push	{r3, lr}
 80809ee:	4b02      	ldr	r3, [pc, #8]	; (80809f8 <HAL_USART_Write_Data+0xc>)
 80809f0:	681b      	ldr	r3, [r3, #0]
 80809f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80809f4:	9301      	str	r3, [sp, #4]
 80809f6:	bd08      	pop	{r3, pc}
 80809f8:	080401c4 	.word	0x080401c4

080809fc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80809fc:	b508      	push	{r3, lr}
 80809fe:	4b02      	ldr	r3, [pc, #8]	; (8080a08 <HAL_USART_Available_Data+0xc>)
 8080a00:	681b      	ldr	r3, [r3, #0]
 8080a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080a04:	9301      	str	r3, [sp, #4]
 8080a06:	bd08      	pop	{r3, pc}
 8080a08:	080401c4 	.word	0x080401c4

08080a0c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080a0c:	b508      	push	{r3, lr}
 8080a0e:	4b02      	ldr	r3, [pc, #8]	; (8080a18 <HAL_USART_Read_Data+0xc>)
 8080a10:	681b      	ldr	r3, [r3, #0]
 8080a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080a14:	9301      	str	r3, [sp, #4]
 8080a16:	bd08      	pop	{r3, pc}
 8080a18:	080401c4 	.word	0x080401c4

08080a1c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080a1c:	b508      	push	{r3, lr}
 8080a1e:	4b02      	ldr	r3, [pc, #8]	; (8080a28 <HAL_USART_Peek_Data+0xc>)
 8080a20:	681b      	ldr	r3, [r3, #0]
 8080a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080a24:	9301      	str	r3, [sp, #4]
 8080a26:	bd08      	pop	{r3, pc}
 8080a28:	080401c4 	.word	0x080401c4

08080a2c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080a2c:	b508      	push	{r3, lr}
 8080a2e:	4b02      	ldr	r3, [pc, #8]	; (8080a38 <HAL_USART_Flush_Data+0xc>)
 8080a30:	681b      	ldr	r3, [r3, #0]
 8080a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080a34:	9301      	str	r3, [sp, #4]
 8080a36:	bd08      	pop	{r3, pc}
 8080a38:	080401c4 	.word	0x080401c4

08080a3c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080a3c:	b508      	push	{r3, lr}
 8080a3e:	4b02      	ldr	r3, [pc, #8]	; (8080a48 <HAL_USART_Is_Enabled+0xc>)
 8080a40:	681b      	ldr	r3, [r3, #0]
 8080a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080a44:	9301      	str	r3, [sp, #4]
 8080a46:	bd08      	pop	{r3, pc}
 8080a48:	080401c4 	.word	0x080401c4

08080a4c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080a4c:	b508      	push	{r3, lr}
 8080a4e:	4b02      	ldr	r3, [pc, #8]	; (8080a58 <HAL_USART_Available_Data_For_Write+0xc>)
 8080a50:	681b      	ldr	r3, [r3, #0]
 8080a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080a54:	9301      	str	r3, [sp, #4]
 8080a56:	bd08      	pop	{r3, pc}
 8080a58:	080401c4 	.word	0x080401c4

08080a5c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080a5c:	b508      	push	{r3, lr}
 8080a5e:	4b02      	ldr	r3, [pc, #8]	; (8080a68 <HAL_USB_USART_Init+0xc>)
 8080a60:	681b      	ldr	r3, [r3, #0]
 8080a62:	681b      	ldr	r3, [r3, #0]
 8080a64:	9301      	str	r3, [sp, #4]
 8080a66:	bd08      	pop	{r3, pc}
 8080a68:	0806001c 	.word	0x0806001c

08080a6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080a6c:	b508      	push	{r3, lr}
 8080a6e:	4b02      	ldr	r3, [pc, #8]	; (8080a78 <HAL_USB_USART_Available_Data+0xc>)
 8080a70:	681b      	ldr	r3, [r3, #0]
 8080a72:	691b      	ldr	r3, [r3, #16]
 8080a74:	9301      	str	r3, [sp, #4]
 8080a76:	bd08      	pop	{r3, pc}
 8080a78:	0806001c 	.word	0x0806001c

08080a7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080a7c:	b508      	push	{r3, lr}
 8080a7e:	4b02      	ldr	r3, [pc, #8]	; (8080a88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080a80:	681b      	ldr	r3, [r3, #0]
 8080a82:	695b      	ldr	r3, [r3, #20]
 8080a84:	9301      	str	r3, [sp, #4]
 8080a86:	bd08      	pop	{r3, pc}
 8080a88:	0806001c 	.word	0x0806001c

08080a8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080a8c:	b508      	push	{r3, lr}
 8080a8e:	4b02      	ldr	r3, [pc, #8]	; (8080a98 <HAL_USB_USART_Receive_Data+0xc>)
 8080a90:	681b      	ldr	r3, [r3, #0]
 8080a92:	699b      	ldr	r3, [r3, #24]
 8080a94:	9301      	str	r3, [sp, #4]
 8080a96:	bd08      	pop	{r3, pc}
 8080a98:	0806001c 	.word	0x0806001c

08080a9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080a9c:	b508      	push	{r3, lr}
 8080a9e:	4b02      	ldr	r3, [pc, #8]	; (8080aa8 <HAL_USB_USART_Send_Data+0xc>)
 8080aa0:	681b      	ldr	r3, [r3, #0]
 8080aa2:	69db      	ldr	r3, [r3, #28]
 8080aa4:	9301      	str	r3, [sp, #4]
 8080aa6:	bd08      	pop	{r3, pc}
 8080aa8:	0806001c 	.word	0x0806001c

08080aac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080aac:	b508      	push	{r3, lr}
 8080aae:	4b02      	ldr	r3, [pc, #8]	; (8080ab8 <HAL_USB_USART_Flush_Data+0xc>)
 8080ab0:	681b      	ldr	r3, [r3, #0]
 8080ab2:	6a1b      	ldr	r3, [r3, #32]
 8080ab4:	9301      	str	r3, [sp, #4]
 8080ab6:	bd08      	pop	{r3, pc}
 8080ab8:	0806001c 	.word	0x0806001c

08080abc <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8080abc:	b508      	push	{r3, lr}
 8080abe:	4b02      	ldr	r3, [pc, #8]	; (8080ac8 <system_mode+0xc>)
 8080ac0:	681b      	ldr	r3, [r3, #0]
 8080ac2:	681b      	ldr	r3, [r3, #0]
 8080ac4:	9301      	str	r3, [sp, #4]
 8080ac6:	bd08      	pop	{r3, pc}
 8080ac8:	080401a4 	.word	0x080401a4

08080acc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080acc:	b508      	push	{r3, lr}
 8080ace:	4b02      	ldr	r3, [pc, #8]	; (8080ad8 <set_system_mode+0xc>)
 8080ad0:	681b      	ldr	r3, [r3, #0]
 8080ad2:	685b      	ldr	r3, [r3, #4]
 8080ad4:	9301      	str	r3, [sp, #4]
 8080ad6:	bd08      	pop	{r3, pc}
 8080ad8:	080401a4 	.word	0x080401a4

08080adc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080adc:	b508      	push	{r3, lr}
 8080ade:	4b02      	ldr	r3, [pc, #8]	; (8080ae8 <system_delay_ms+0xc>)
 8080ae0:	681b      	ldr	r3, [r3, #0]
 8080ae2:	695b      	ldr	r3, [r3, #20]
 8080ae4:	9301      	str	r3, [sp, #4]
 8080ae6:	bd08      	pop	{r3, pc}
 8080ae8:	080401a4 	.word	0x080401a4

08080aec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8080aec:	b508      	push	{r3, lr}
 8080aee:	4b02      	ldr	r3, [pc, #8]	; (8080af8 <system_thread_set_state+0xc>)
 8080af0:	681b      	ldr	r3, [r3, #0]
 8080af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080af4:	9301      	str	r3, [sp, #4]
 8080af6:	bd08      	pop	{r3, pc}
 8080af8:	080401a4 	.word	0x080401a4

08080afc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080afc:	b508      	push	{r3, lr}
 8080afe:	4b02      	ldr	r3, [pc, #8]	; (8080b08 <application_thread_current+0xc>)
 8080b00:	681b      	ldr	r3, [r3, #0]
 8080b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080b04:	9301      	str	r3, [sp, #4]
 8080b06:	bd08      	pop	{r3, pc}
 8080b08:	080401a4 	.word	0x080401a4

08080b0c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080b0c:	b508      	push	{r3, lr}
 8080b0e:	4b02      	ldr	r3, [pc, #8]	; (8080b18 <application_thread_invoke+0xc>)
 8080b10:	681b      	ldr	r3, [r3, #0]
 8080b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080b14:	9301      	str	r3, [sp, #4]
 8080b16:	bd08      	pop	{r3, pc}
 8080b18:	080401a4 	.word	0x080401a4

08080b1c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8080b1c:	b508      	push	{r3, lr}
 8080b1e:	4b02      	ldr	r3, [pc, #8]	; (8080b28 <system_thread_get_state+0xc>)
 8080b20:	681b      	ldr	r3, [r3, #0]
 8080b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080b24:	9301      	str	r3, [sp, #4]
 8080b26:	bd08      	pop	{r3, pc}
 8080b28:	080401a4 	.word	0x080401a4

08080b2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080b2c:	b508      	push	{r3, lr}
 8080b2e:	4b03      	ldr	r3, [pc, #12]	; (8080b3c <system_ctrl_set_app_request_handler+0x10>)
 8080b30:	681b      	ldr	r3, [r3, #0]
 8080b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080b36:	9301      	str	r3, [sp, #4]
 8080b38:	bd08      	pop	{r3, pc}
 8080b3a:	0000      	.short	0x0000
 8080b3c:	080401a4 	.word	0x080401a4

08080b40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080b40:	b508      	push	{r3, lr}
 8080b42:	4b03      	ldr	r3, [pc, #12]	; (8080b50 <system_ctrl_set_result+0x10>)
 8080b44:	681b      	ldr	r3, [r3, #0]
 8080b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080b4a:	9301      	str	r3, [sp, #4]
 8080b4c:	bd08      	pop	{r3, pc}
 8080b4e:	0000      	.short	0x0000
 8080b50:	080401a4 	.word	0x080401a4

08080b54 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8080b54:	b508      	push	{r3, lr}
 8080b56:	4b02      	ldr	r3, [pc, #8]	; (8080b60 <spark_variable+0xc>)
 8080b58:	681b      	ldr	r3, [r3, #0]
 8080b5a:	681b      	ldr	r3, [r3, #0]
 8080b5c:	9301      	str	r3, [sp, #4]
 8080b5e:	bd08      	pop	{r3, pc}
 8080b60:	080401cc 	.word	0x080401cc

08080b64 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8080b64:	b508      	push	{r3, lr}
 8080b66:	4b02      	ldr	r3, [pc, #8]	; (8080b70 <spark_function+0xc>)
 8080b68:	681b      	ldr	r3, [r3, #0]
 8080b6a:	685b      	ldr	r3, [r3, #4]
 8080b6c:	9301      	str	r3, [sp, #4]
 8080b6e:	bd08      	pop	{r3, pc}
 8080b70:	080401cc 	.word	0x080401cc

08080b74 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080b74:	b508      	push	{r3, lr}
 8080b76:	4b02      	ldr	r3, [pc, #8]	; (8080b80 <spark_process+0xc>)
 8080b78:	681b      	ldr	r3, [r3, #0]
 8080b7a:	689b      	ldr	r3, [r3, #8]
 8080b7c:	9301      	str	r3, [sp, #4]
 8080b7e:	bd08      	pop	{r3, pc}
 8080b80:	080401cc 	.word	0x080401cc

08080b84 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080b84:	b508      	push	{r3, lr}
 8080b86:	4b02      	ldr	r3, [pc, #8]	; (8080b90 <spark_cloud_flag_connect+0xc>)
 8080b88:	681b      	ldr	r3, [r3, #0]
 8080b8a:	68db      	ldr	r3, [r3, #12]
 8080b8c:	9301      	str	r3, [sp, #4]
 8080b8e:	bd08      	pop	{r3, pc}
 8080b90:	080401cc 	.word	0x080401cc

08080b94 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080b94:	b508      	push	{r3, lr}
 8080b96:	4b02      	ldr	r3, [pc, #8]	; (8080ba0 <spark_cloud_flag_connected+0xc>)
 8080b98:	681b      	ldr	r3, [r3, #0]
 8080b9a:	695b      	ldr	r3, [r3, #20]
 8080b9c:	9301      	str	r3, [sp, #4]
 8080b9e:	bd08      	pop	{r3, pc}
 8080ba0:	080401cc 	.word	0x080401cc

08080ba4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080ba4:	b508      	push	{r3, lr}
 8080ba6:	4b02      	ldr	r3, [pc, #8]	; (8080bb0 <spark_send_event+0xc>)
 8080ba8:	681b      	ldr	r3, [r3, #0]
 8080baa:	6a1b      	ldr	r3, [r3, #32]
 8080bac:	9301      	str	r3, [sp, #4]
 8080bae:	bd08      	pop	{r3, pc}
 8080bb0:	080401cc 	.word	0x080401cc

08080bb4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8080bb4:	b508      	push	{r3, lr}
 8080bb6:	4b02      	ldr	r3, [pc, #8]	; (8080bc0 <spark_sync_time_pending+0xc>)
 8080bb8:	681b      	ldr	r3, [r3, #0]
 8080bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080bbc:	9301      	str	r3, [sp, #4]
 8080bbe:	bd08      	pop	{r3, pc}
 8080bc0:	080401cc 	.word	0x080401cc

08080bc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080bc4:	b508      	push	{r3, lr}
 8080bc6:	4b02      	ldr	r3, [pc, #8]	; (8080bd0 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080bc8:	681b      	ldr	r3, [r3, #0]
 8080bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080bcc:	9301      	str	r3, [sp, #4]
 8080bce:	bd08      	pop	{r3, pc}
 8080bd0:	080401cc 	.word	0x080401cc

08080bd4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080bd4:	b508      	push	{r3, lr}
 8080bd6:	4b02      	ldr	r3, [pc, #8]	; (8080be0 <network_connect+0xc>)
 8080bd8:	681b      	ldr	r3, [r3, #0]
 8080bda:	685b      	ldr	r3, [r3, #4]
 8080bdc:	9301      	str	r3, [sp, #4]
 8080bde:	bd08      	pop	{r3, pc}
 8080be0:	080401c8 	.word	0x080401c8

08080be4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080be4:	b508      	push	{r3, lr}
 8080be6:	4b02      	ldr	r3, [pc, #8]	; (8080bf0 <network_connecting+0xc>)
 8080be8:	681b      	ldr	r3, [r3, #0]
 8080bea:	689b      	ldr	r3, [r3, #8]
 8080bec:	9301      	str	r3, [sp, #4]
 8080bee:	bd08      	pop	{r3, pc}
 8080bf0:	080401c8 	.word	0x080401c8

08080bf4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080bf4:	b508      	push	{r3, lr}
 8080bf6:	4b02      	ldr	r3, [pc, #8]	; (8080c00 <network_disconnect+0xc>)
 8080bf8:	681b      	ldr	r3, [r3, #0]
 8080bfa:	68db      	ldr	r3, [r3, #12]
 8080bfc:	9301      	str	r3, [sp, #4]
 8080bfe:	bd08      	pop	{r3, pc}
 8080c00:	080401c8 	.word	0x080401c8

08080c04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080c04:	b508      	push	{r3, lr}
 8080c06:	4b02      	ldr	r3, [pc, #8]	; (8080c10 <network_ready+0xc>)
 8080c08:	681b      	ldr	r3, [r3, #0]
 8080c0a:	691b      	ldr	r3, [r3, #16]
 8080c0c:	9301      	str	r3, [sp, #4]
 8080c0e:	bd08      	pop	{r3, pc}
 8080c10:	080401c8 	.word	0x080401c8

08080c14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080c14:	b508      	push	{r3, lr}
 8080c16:	4b02      	ldr	r3, [pc, #8]	; (8080c20 <network_on+0xc>)
 8080c18:	681b      	ldr	r3, [r3, #0]
 8080c1a:	695b      	ldr	r3, [r3, #20]
 8080c1c:	9301      	str	r3, [sp, #4]
 8080c1e:	bd08      	pop	{r3, pc}
 8080c20:	080401c8 	.word	0x080401c8

08080c24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080c24:	b508      	push	{r3, lr}
 8080c26:	4b02      	ldr	r3, [pc, #8]	; (8080c30 <network_off+0xc>)
 8080c28:	681b      	ldr	r3, [r3, #0]
 8080c2a:	699b      	ldr	r3, [r3, #24]
 8080c2c:	9301      	str	r3, [sp, #4]
 8080c2e:	bd08      	pop	{r3, pc}
 8080c30:	080401c8 	.word	0x080401c8

08080c34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080c34:	b508      	push	{r3, lr}
 8080c36:	4b02      	ldr	r3, [pc, #8]	; (8080c40 <network_listen+0xc>)
 8080c38:	681b      	ldr	r3, [r3, #0]
 8080c3a:	69db      	ldr	r3, [r3, #28]
 8080c3c:	9301      	str	r3, [sp, #4]
 8080c3e:	bd08      	pop	{r3, pc}
 8080c40:	080401c8 	.word	0x080401c8

08080c44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080c44:	b508      	push	{r3, lr}
 8080c46:	4b02      	ldr	r3, [pc, #8]	; (8080c50 <network_listening+0xc>)
 8080c48:	681b      	ldr	r3, [r3, #0]
 8080c4a:	6a1b      	ldr	r3, [r3, #32]
 8080c4c:	9301      	str	r3, [sp, #4]
 8080c4e:	bd08      	pop	{r3, pc}
 8080c50:	080401c8 	.word	0x080401c8

08080c54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080c54:	b508      	push	{r3, lr}
 8080c56:	4b02      	ldr	r3, [pc, #8]	; (8080c60 <network_set_listen_timeout+0xc>)
 8080c58:	681b      	ldr	r3, [r3, #0]
 8080c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080c5c:	9301      	str	r3, [sp, #4]
 8080c5e:	bd08      	pop	{r3, pc}
 8080c60:	080401c8 	.word	0x080401c8

08080c64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080c64:	b508      	push	{r3, lr}
 8080c66:	4b02      	ldr	r3, [pc, #8]	; (8080c70 <network_get_listen_timeout+0xc>)
 8080c68:	681b      	ldr	r3, [r3, #0]
 8080c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080c6c:	9301      	str	r3, [sp, #4]
 8080c6e:	bd08      	pop	{r3, pc}
 8080c70:	080401c8 	.word	0x080401c8

08080c74 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080c74:	b508      	push	{r3, lr}
 8080c76:	4b02      	ldr	r3, [pc, #8]	; (8080c80 <malloc+0xc>)
 8080c78:	681b      	ldr	r3, [r3, #0]
 8080c7a:	681b      	ldr	r3, [r3, #0]
 8080c7c:	9301      	str	r3, [sp, #4]
 8080c7e:	bd08      	pop	{r3, pc}
 8080c80:	080401a0 	.word	0x080401a0

08080c84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080c84:	b508      	push	{r3, lr}
 8080c86:	4b02      	ldr	r3, [pc, #8]	; (8080c90 <free+0xc>)
 8080c88:	681b      	ldr	r3, [r3, #0]
 8080c8a:	685b      	ldr	r3, [r3, #4]
 8080c8c:	9301      	str	r3, [sp, #4]
 8080c8e:	bd08      	pop	{r3, pc}
 8080c90:	080401a0 	.word	0x080401a0

08080c94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080c94:	b508      	push	{r3, lr}
 8080c96:	4b02      	ldr	r3, [pc, #8]	; (8080ca0 <realloc+0xc>)
 8080c98:	681b      	ldr	r3, [r3, #0]
 8080c9a:	689b      	ldr	r3, [r3, #8]
 8080c9c:	9301      	str	r3, [sp, #4]
 8080c9e:	bd08      	pop	{r3, pc}
 8080ca0:	080401a0 	.word	0x080401a0

08080ca4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8080ca4:	b508      	push	{r3, lr}
 8080ca6:	4b02      	ldr	r3, [pc, #8]	; (8080cb0 <snprintf+0xc>)
 8080ca8:	681b      	ldr	r3, [r3, #0]
 8080caa:	69db      	ldr	r3, [r3, #28]
 8080cac:	9301      	str	r3, [sp, #4]
 8080cae:	bd08      	pop	{r3, pc}
 8080cb0:	080401a0 	.word	0x080401a0

08080cb4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080cb4:	b508      	push	{r3, lr}
 8080cb6:	4b02      	ldr	r3, [pc, #8]	; (8080cc0 <abort+0xc>)
 8080cb8:	681b      	ldr	r3, [r3, #0]
 8080cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080cbc:	9301      	str	r3, [sp, #4]
 8080cbe:	bd08      	pop	{r3, pc}
 8080cc0:	080401a0 	.word	0x080401a0

08080cc4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080cc4:	b508      	push	{r3, lr}
 8080cc6:	4b02      	ldr	r3, [pc, #8]	; (8080cd0 <_malloc_r+0xc>)
 8080cc8:	681b      	ldr	r3, [r3, #0]
 8080cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080ccc:	9301      	str	r3, [sp, #4]
 8080cce:	bd08      	pop	{r3, pc}
 8080cd0:	080401a0 	.word	0x080401a0

08080cd4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080cd4:	2100      	movs	r1, #0
 8080cd6:	f7ff bf01 	b.w	8080adc <system_delay_ms>

08080cda <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8080cda:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080cdc:	6883      	ldr	r3, [r0, #8]
 8080cde:	4604      	mov	r4, r0
 8080ce0:	b90b      	cbnz	r3, 8080ce6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080ce2:	f001 fa82 	bl	80821ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ce6:	68c3      	ldr	r3, [r0, #12]
 8080ce8:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8080cea:	68a3      	ldr	r3, [r4, #8]
 8080cec:	b11b      	cbz	r3, 8080cf6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080cee:	2203      	movs	r2, #3
 8080cf0:	4621      	mov	r1, r4
 8080cf2:	4620      	mov	r0, r4
 8080cf4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080cf6:	4620      	mov	r0, r4
}
 8080cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080cfc:	2110      	movs	r1, #16
 8080cfe:	f001 ba72 	b.w	80821e6 <_ZdlPvj>

08080d02 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080d02:	2200      	movs	r2, #0
 8080d04:	4611      	mov	r1, r2
 8080d06:	6840      	ldr	r0, [r0, #4]
 8080d08:	f7ff bf7c 	b.w	8080c04 <network_ready>

08080d0c <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080d0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8080d10:	2600      	movs	r6, #0
 8080d12:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080d14:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080d16:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080d18:	4688      	mov	r8, r1
 8080d1a:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8080d1c:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080d20:	f002 fae3 	bl	80832ea <strlen>
 8080d24:	9600      	str	r6, [sp, #0]
 8080d26:	b281      	uxth	r1, r0
 8080d28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8080d2c:	4622      	mov	r2, r4
 8080d2e:	4638      	mov	r0, r7
 8080d30:	f7ff fd64 	bl	80807fc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080d34:	b120      	cbz	r0, 8080d40 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8080d36:	4631      	mov	r1, r6
 8080d38:	4628      	mov	r0, r5
 8080d3a:	f000 fd39 	bl	80817b0 <_ZN9IPAddressC1Em>
 8080d3e:	e003      	b.n	8080d48 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8080d40:	4621      	mov	r1, r4
 8080d42:	4628      	mov	r0, r5
 8080d44:	f000 fd2c 	bl	80817a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8080d48:	4628      	mov	r0, r5
 8080d4a:	b004      	add	sp, #16
 8080d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080d50 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8080d50:	2200      	movs	r2, #0
 8080d52:	4611      	mov	r1, r2
 8080d54:	6840      	ldr	r0, [r0, #4]
 8080d56:	f7ff bf75 	b.w	8080c44 <network_listening>

08080d5a <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8080d5a:	2200      	movs	r2, #0
 8080d5c:	4611      	mov	r1, r2
 8080d5e:	6840      	ldr	r0, [r0, #4]
 8080d60:	f7ff bf80 	b.w	8080c64 <network_get_listen_timeout>

08080d64 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8080d64:	2200      	movs	r2, #0
 8080d66:	6840      	ldr	r0, [r0, #4]
 8080d68:	f7ff bf74 	b.w	8080c54 <network_set_listen_timeout>

08080d6c <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8080d6c:	2200      	movs	r2, #0
 8080d6e:	f081 0101 	eor.w	r1, r1, #1
 8080d72:	6840      	ldr	r0, [r0, #4]
 8080d74:	f7ff bf5e 	b.w	8080c34 <network_listen>

08080d78 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080d78:	2300      	movs	r3, #0
 8080d7a:	461a      	mov	r2, r3
 8080d7c:	4619      	mov	r1, r3
 8080d7e:	6840      	ldr	r0, [r0, #4]
 8080d80:	f7ff bf50 	b.w	8080c24 <network_off>

08080d84 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080d84:	2300      	movs	r3, #0
 8080d86:	461a      	mov	r2, r3
 8080d88:	4619      	mov	r1, r3
 8080d8a:	6840      	ldr	r0, [r0, #4]
 8080d8c:	f7ff bf42 	b.w	8080c14 <network_on>

08080d90 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8080d90:	2200      	movs	r2, #0
 8080d92:	4611      	mov	r1, r2
 8080d94:	6840      	ldr	r0, [r0, #4]
 8080d96:	f7ff bf25 	b.w	8080be4 <network_connecting>

08080d9a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080d9a:	2200      	movs	r2, #0
 8080d9c:	2102      	movs	r1, #2
 8080d9e:	6840      	ldr	r0, [r0, #4]
 8080da0:	f7ff bf28 	b.w	8080bf4 <network_disconnect>

08080da4 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080da4:	2300      	movs	r3, #0
 8080da6:	461a      	mov	r2, r3
 8080da8:	6840      	ldr	r0, [r0, #4]
 8080daa:	f7ff bf13 	b.w	8080bd4 <network_connect>
	...

08080db0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8080db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080db2:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8080db4:	4b1a      	ldr	r3, [pc, #104]	; (8080e20 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8080db6:	2500      	movs	r5, #0
 8080db8:	6003      	str	r3, [r0, #0]
 8080dba:	2618      	movs	r6, #24
 8080dbc:	3328      	adds	r3, #40	; 0x28
 8080dbe:	b089      	sub	sp, #36	; 0x24
 8080dc0:	6043      	str	r3, [r0, #4]
 8080dc2:	6085      	str	r5, [r0, #8]
 8080dc4:	60c5      	str	r5, [r0, #12]
 8080dc6:	4632      	mov	r2, r6
 8080dc8:	4629      	mov	r1, r5
 8080dca:	4604      	mov	r4, r0
 8080dcc:	3010      	adds	r0, #16
 8080dce:	f002 fa36 	bl	808323e <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8080dd2:	462a      	mov	r2, r5
 8080dd4:	4629      	mov	r1, r5
 8080dd6:	6878      	ldr	r0, [r7, #4]
 8080dd8:	f7ff ff14 	bl	8080c04 <network_ready>
 8080ddc:	b908      	cbnz	r0, 8080de2 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8080dde:	60a0      	str	r0, [r4, #8]
            return sig;
 8080de0:	e01b      	b.n	8080e1a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8080de2:	4629      	mov	r1, r5
 8080de4:	4632      	mov	r2, r6
 8080de6:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8080de8:	9500      	str	r5, [sp, #0]
 8080dea:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8080dec:	f002 fa27 	bl	808323e <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8080df0:	a902      	add	r1, sp, #8
 8080df2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8080df4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8080df8:	f7ff fd08 	bl	808080c <cellular_signal>
 8080dfc:	b110      	cbz	r0, 8080e04 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8080dfe:	2301      	movs	r3, #1
 8080e00:	60a3      	str	r3, [r4, #8]
            return sig;
 8080e02:	e00a      	b.n	8080e1a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8080e04:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8080e06:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8080e08:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8080e0a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8080e0c:	b90b      	cbnz	r3, 8080e12 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8080e0e:	2302      	movs	r3, #2
 8080e10:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8080e12:	a902      	add	r1, sp, #8
 8080e14:	4620      	mov	r0, r4
 8080e16:	f000 f895 	bl	8080f44 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8080e1a:	4620      	mov	r0, r4
 8080e1c:	b009      	add	sp, #36	; 0x24
 8080e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080e20:	0808360c 	.word	0x0808360c

08080e24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080e24:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080e26:	4c08      	ldr	r4, [pc, #32]	; (8080e48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8080e28:	2528      	movs	r5, #40	; 0x28
 8080e2a:	462a      	mov	r2, r5
 8080e2c:	2100      	movs	r1, #0
 8080e2e:	4620      	mov	r0, r4
 8080e30:	f002 fa05 	bl	808323e <memset>
        cid = -1;
 8080e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080e38:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8080e3a:	4b04      	ldr	r3, [pc, #16]	; (8080e4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8080e3c:	2204      	movs	r2, #4
 8080e3e:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080e40:	4a03      	ldr	r2, [pc, #12]	; (8080e50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8080e42:	8025      	strh	r5, [r4, #0]
 8080e44:	601a      	str	r2, [r3, #0]
 8080e46:	bd38      	pop	{r3, r4, r5, pc}
 8080e48:	200000fc 	.word	0x200000fc
 8080e4c:	200000f4 	.word	0x200000f4
 8080e50:	080835d8 	.word	0x080835d8

08080e54 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8080e54:	4770      	bx	lr

08080e56 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8080e56:	7d00      	ldrb	r0, [r0, #20]
 8080e58:	4770      	bx	lr
	...

08080e5c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8080e5c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8080e5e:	7d03      	ldrb	r3, [r0, #20]
 8080e60:	b11b      	cbz	r3, 8080e6a <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8080e62:	6980      	ldr	r0, [r0, #24]
 8080e64:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8080e68:	d101      	bne.n	8080e6e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8080e6a:	2000      	movs	r0, #0
 8080e6c:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8080e6e:	f002 f803 	bl	8082e78 <__aeabi_i2f>
 8080e72:	4902      	ldr	r1, [pc, #8]	; (8080e7c <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8080e74:	f002 f908 	bl	8083088 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8080e78:	bd08      	pop	{r3, pc}
 8080e7a:	bf00      	nop
 8080e7c:	42c80000 	.word	0x42c80000

08080e80 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8080e80:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8080e82:	7d03      	ldrb	r3, [r0, #20]
 8080e84:	b11b      	cbz	r3, 8080e8e <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8080e86:	6a00      	ldr	r0, [r0, #32]
 8080e88:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8080e8c:	d101      	bne.n	8080e92 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8080e8e:	2000      	movs	r0, #0
 8080e90:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8080e92:	f001 fff1 	bl	8082e78 <__aeabi_i2f>
 8080e96:	4902      	ldr	r1, [pc, #8]	; (8080ea0 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8080e98:	f002 f8f6 	bl	8083088 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8080e9c:	bd08      	pop	{r3, pc}
 8080e9e:	bf00      	nop
 8080ea0:	42c80000 	.word	0x42c80000

08080ea4 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8080ea4:	b570      	push	{r4, r5, r6, lr}
 8080ea6:	460d      	mov	r5, r1
 8080ea8:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8080eaa:	220a      	movs	r2, #10
 8080eac:	6881      	ldr	r1, [r0, #8]
 8080eae:	4628      	mov	r0, r5
 8080eb0:	f000 fd95 	bl	80819de <_ZN5Print5printEii>
    n += p.print(',');
 8080eb4:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8080eb6:	4604      	mov	r4, r0
    n += p.print(',');
 8080eb8:	4628      	mov	r0, r5
 8080eba:	f000 fd29 	bl	8081910 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8080ebe:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8080ec0:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8080ec2:	68f1      	ldr	r1, [r6, #12]
 8080ec4:	4628      	mov	r0, r5
 8080ec6:	f000 fd8a 	bl	80819de <_ZN5Print5printEii>
    return n;
}
 8080eca:	4420      	add	r0, r4
 8080ecc:	bd70      	pop	{r4, r5, r6, pc}

08080ece <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8080ece:	f1a0 0004 	sub.w	r0, r0, #4
 8080ed2:	f7ff bfe7 	b.w	8080ea4 <_ZNK14CellularSignal7printToER5Print>

08080ed6 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8080ed6:	b510      	push	{r4, lr}
 8080ed8:	4604      	mov	r4, r0
 8080eda:	2128      	movs	r1, #40	; 0x28
 8080edc:	f001 f983 	bl	80821e6 <_ZdlPvj>
 8080ee0:	4620      	mov	r0, r4
 8080ee2:	bd10      	pop	{r4, pc}

08080ee4 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8080ee4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8080ee6:	7d03      	ldrb	r3, [r0, #20]
 8080ee8:	b15b      	cbz	r3, 8080f02 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8080eea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8080eec:	2800      	cmp	r0, #0
 8080eee:	db08      	blt.n	8080f02 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8080ef0:	f001 ffc2 	bl	8082e78 <__aeabi_i2f>
 8080ef4:	4904      	ldr	r1, [pc, #16]	; (8080f08 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8080ef6:	f002 f8c7 	bl	8083088 <__aeabi_fdiv>
 8080efa:	4904      	ldr	r1, [pc, #16]	; (8080f0c <_ZNK14CellularSignal10getQualityEv+0x28>)
 8080efc:	f002 f810 	bl	8082f20 <__aeabi_fmul>
 8080f00:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8080f02:	4803      	ldr	r0, [pc, #12]	; (8080f10 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8080f04:	bd08      	pop	{r3, pc}
 8080f06:	bf00      	nop
 8080f08:	477fff00 	.word	0x477fff00
 8080f0c:	42c80000 	.word	0x42c80000
 8080f10:	bf800000 	.word	0xbf800000

08080f14 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8080f14:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8080f16:	7d03      	ldrb	r3, [r0, #20]
 8080f18:	b15b      	cbz	r3, 8080f32 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8080f1a:	69c0      	ldr	r0, [r0, #28]
 8080f1c:	2800      	cmp	r0, #0
 8080f1e:	db08      	blt.n	8080f32 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8080f20:	f001 ffaa 	bl	8082e78 <__aeabi_i2f>
 8080f24:	4904      	ldr	r1, [pc, #16]	; (8080f38 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8080f26:	f002 f8af 	bl	8083088 <__aeabi_fdiv>
 8080f2a:	4904      	ldr	r1, [pc, #16]	; (8080f3c <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8080f2c:	f001 fff8 	bl	8082f20 <__aeabi_fmul>
 8080f30:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8080f32:	4803      	ldr	r0, [pc, #12]	; (8080f40 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8080f34:	bd08      	pop	{r3, pc}
 8080f36:	bf00      	nop
 8080f38:	477fff00 	.word	0x477fff00
 8080f3c:	42c80000 	.word	0x42c80000
 8080f40:	bf800000 	.word	0xbf800000

08080f44 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8080f44:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8080f46:	460d      	mov	r5, r1
 8080f48:	f100 0410 	add.w	r4, r0, #16
 8080f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080f50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080f54:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8080f58:	2001      	movs	r0, #1
 8080f5a:	bd30      	pop	{r4, r5, pc}

08080f5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080f5c:	4770      	bx	lr

08080f5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080f5e:	2000      	movs	r0, #0
 8080f60:	4770      	bx	lr

08080f62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080f62:	b510      	push	{r4, lr}
 8080f64:	4604      	mov	r4, r0
 8080f66:	2110      	movs	r1, #16
 8080f68:	f001 f93d 	bl	80821e6 <_ZdlPvj>
 8080f6c:	4620      	mov	r0, r4
 8080f6e:	bd10      	pop	{r4, pc}

08080f70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080f70:	b508      	push	{r3, lr}
      { delete this; }
 8080f72:	b108      	cbz	r0, 8080f78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8080f74:	f7ff fff5 	bl	8080f62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080f78:	bd08      	pop	{r3, pc}

08080f7a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080f7a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080f7c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080f7e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080f80:	b113      	cbz	r3, 8080f88 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080f82:	2203      	movs	r2, #3
 8080f84:	4601      	mov	r1, r0
 8080f86:	4798      	blx	r3
    }
 8080f88:	4620      	mov	r0, r4
 8080f8a:	bd10      	pop	{r4, pc}

08080f8c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080f8c:	2200      	movs	r2, #0
 8080f8e:	6002      	str	r2, [r0, #0]
 8080f90:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8080f94:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8080f96:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080f98:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8080f9c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8080f9e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080fa0:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8080fa2:	680c      	ldr	r4, [r1, #0]
 8080fa4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8080fa6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8080fa8:	bd10      	pop	{r4, pc}

08080faa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8080faa:	b510      	push	{r4, lr}
 8080fac:	4604      	mov	r4, r0
    free((void*)msg_);
 8080fae:	6800      	ldr	r0, [r0, #0]
 8080fb0:	f7ff fe68 	bl	8080c84 <free>
}
 8080fb4:	4620      	mov	r0, r4
 8080fb6:	bd10      	pop	{r4, pc}

08080fb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8080fb8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8080fba:	68c4      	ldr	r4, [r0, #12]
 8080fbc:	b1f4      	cbz	r4, 8080ffc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8080fbe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8080fc0:	2b02      	cmp	r3, #2
 8080fc2:	d103      	bne.n	8080fcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8080fc4:	f104 000c 	add.w	r0, r4, #12
 8080fc8:	f7ff ffef 	bl	8080faa <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8080fcc:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8080fce:	b135      	cbz	r5, 8080fde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080fd0:	4628      	mov	r0, r5
 8080fd2:	f7ff ffd2 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>
 8080fd6:	2110      	movs	r1, #16
 8080fd8:	4628      	mov	r0, r5
 8080fda:	f001 f904 	bl	80821e6 <_ZdlPvj>
 8080fde:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8080fe0:	b135      	cbz	r5, 8080ff0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8080fe2:	4628      	mov	r0, r5
 8080fe4:	f7ff ffc9 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>
 8080fe8:	2110      	movs	r1, #16
 8080fea:	4628      	mov	r0, r5
 8080fec:	f001 f8fb 	bl	80821e6 <_ZdlPvj>
 8080ff0:	4620      	mov	r0, r4
 8080ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080ff6:	2114      	movs	r1, #20
 8080ff8:	f001 b8f5 	b.w	80821e6 <_ZdlPvj>
 8080ffc:	bd38      	pop	{r3, r4, r5, pc}

08080ffe <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8080ffe:	b510      	push	{r4, lr}
 8081000:	b088      	sub	sp, #32
 8081002:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081004:	4668      	mov	r0, sp
 8081006:	f000 fd67 	bl	8081ad8 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808100a:	4669      	mov	r1, sp
 808100c:	a804      	add	r0, sp, #16
 808100e:	f000 fd85 	bl	8081b1c <_ZN6StringC1ERKS_>
 8081012:	a804      	add	r0, sp, #16
 8081014:	47a0      	blx	r4
 8081016:	4604      	mov	r4, r0
 8081018:	a804      	add	r0, sp, #16
 808101a:	f000 fd16 	bl	8081a4a <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808101e:	4668      	mov	r0, sp
 8081020:	f000 fd13 	bl	8081a4a <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081024:	4620      	mov	r0, r4
 8081026:	b008      	add	sp, #32
 8081028:	bd10      	pop	{r4, pc}

0808102a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808102a:	b5f0      	push	{r4, r5, r6, r7, lr}
 808102c:	4607      	mov	r7, r0
 808102e:	460e      	mov	r6, r1
 8081030:	4615      	mov	r5, r2
 8081032:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8081034:	2410      	movs	r4, #16
 8081036:	4622      	mov	r2, r4
 8081038:	2100      	movs	r1, #0
 808103a:	4668      	mov	r0, sp
 808103c:	f002 f8ff 	bl	808323e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081040:	2200      	movs	r2, #0
 8081042:	4669      	mov	r1, sp
 8081044:	4610      	mov	r0, r2
         size = sizeof(*this);
 8081046:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 808104a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808104c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808104e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081050:	f7ff fd88 	bl	8080b64 <spark_function>
}
 8081054:	b005      	add	sp, #20
 8081056:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081058 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081058:	b513      	push	{r0, r1, r4, lr}
 808105a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808105c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081060:	2300      	movs	r3, #0
 8081062:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081064:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081066:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081068:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808106a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808106c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808106e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081070:	f7ff f9ee 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081074:	4620      	mov	r0, r4
 8081076:	b002      	add	sp, #8
 8081078:	bd10      	pop	{r4, pc}

0808107a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 808107a:	680b      	ldr	r3, [r1, #0]
 808107c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808107e:	b113      	cbz	r3, 8081086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081080:	685a      	ldr	r2, [r3, #4]
 8081082:	3201      	adds	r2, #1
 8081084:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081086:	4770      	bx	lr

08081088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808108a:	460c      	mov	r4, r1
 808108c:	4606      	mov	r6, r0
 808108e:	460f      	mov	r7, r1
 8081090:	f854 3b04 	ldr.w	r3, [r4], #4
 8081094:	ad02      	add	r5, sp, #8
 8081096:	f845 3d08 	str.w	r3, [r5, #-8]!
 808109a:	4621      	mov	r1, r4
 808109c:	a801      	add	r0, sp, #4
 808109e:	f7ff ffec 	bl	808107a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80810a2:	4629      	mov	r1, r5
 80810a4:	4630      	mov	r0, r6
 80810a6:	f7ff ffd7 	bl	8081058 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80810aa:	a801      	add	r0, sp, #4
 80810ac:	f7ff f9d0 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80810b0:	4620      	mov	r0, r4
 80810b2:	f7ff f9cd 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80810b6:	4638      	mov	r0, r7
 80810b8:	2108      	movs	r1, #8
 80810ba:	f001 f894 	bl	80821e6 <_ZdlPvj>
        return p;
    }
 80810be:	4630      	mov	r0, r6
 80810c0:	b003      	add	sp, #12
 80810c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080810c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80810c4:	b513      	push	{r0, r1, r4, lr}
 80810c6:	460b      	mov	r3, r1
 80810c8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80810ca:	c803      	ldmia	r0, {r0, r1}
 80810cc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80810d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80810d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80810d8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80810dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80810e0:	b002      	add	sp, #8
 80810e2:	bd10      	pop	{r4, pc}

080810e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80810e4:	b538      	push	{r3, r4, r5, lr}
 80810e6:	2300      	movs	r3, #0
 80810e8:	4604      	mov	r4, r0
 80810ea:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80810ec:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80810ee:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80810f0:	f7fe ffd5 	bl	808009e <_Znwj>
 80810f4:	b128      	cbz	r0, 8081102 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80810f6:	2301      	movs	r3, #1
 80810f8:	6043      	str	r3, [r0, #4]
 80810fa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80810fc:	4b02      	ldr	r3, [pc, #8]	; (8081108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80810fe:	60c5      	str	r5, [r0, #12]
 8081100:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081102:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8081104:	4620      	mov	r0, r4
 8081106:	bd38      	pop	{r3, r4, r5, pc}
 8081108:	08083640 	.word	0x08083640

0808110c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808110c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808110e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081110:	b90a      	cbnz	r2, 8081116 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081112:	f001 f86a 	bl	80821ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081116:	68c3      	ldr	r3, [r0, #12]
    }
 8081118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808111c:	4718      	bx	r3

0808111e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808111e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081120:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081122:	f100 0110 	add.w	r1, r0, #16
 8081126:	f7ff fff1 	bl	808110c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808112a:	bd08      	pop	{r3, pc}

0808112c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808112c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808112e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081130:	b90a      	cbnz	r2, 8081136 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081132:	f001 f85a 	bl	80821ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081136:	68c3      	ldr	r3, [r0, #12]
    }
 8081138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808113c:	4718      	bx	r3

0808113e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808113e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081140:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081142:	f100 0110 	add.w	r1, r0, #16
 8081146:	f7ff fff1 	bl	808112c <_ZNKSt8functionIFvRKbEEclES1_>
 808114a:	bd08      	pop	{r3, pc}

0808114c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808114c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808114e:	2300      	movs	r3, #0
 8081150:	6083      	str	r3, [r0, #8]
 8081152:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081154:	4604      	mov	r4, r0
 8081156:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081158:	b12b      	cbz	r3, 8081166 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808115a:	2202      	movs	r2, #2
 808115c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808115e:	68eb      	ldr	r3, [r5, #12]
 8081160:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081162:	68ab      	ldr	r3, [r5, #8]
 8081164:	60a3      	str	r3, [r4, #8]
	}
    }
 8081166:	4620      	mov	r0, r4
 8081168:	bd38      	pop	{r3, r4, r5, pc}
	...

0808116c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808116e:	b089      	sub	sp, #36	; 0x24
 8081170:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081172:	4668      	mov	r0, sp
 8081174:	f7ff ff0a 	bl	8080f8c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081178:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808117c:	2300      	movs	r3, #0
 808117e:	f88d 3008 	strb.w	r3, [sp, #8]
 8081182:	e8d4 3f4f 	ldrexb	r3, [r4]
 8081186:	2b00      	cmp	r3, #0
 8081188:	d103      	bne.n	8081192 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808118a:	e8c4 2f41 	strexb	r1, r2, [r4]
 808118e:	2900      	cmp	r1, #0
 8081190:	d1f7      	bne.n	8081182 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8081192:	d002      	beq.n	808119a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8081194:	f88d 3008 	strb.w	r3, [sp, #8]
 8081198:	e063      	b.n	8081262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808119a:	f114 050c 	adds.w	r5, r4, #12
 808119e:	d003      	beq.n	80811a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80811a0:	4669      	mov	r1, sp
 80811a2:	4628      	mov	r0, r5
 80811a4:	f7ff fef2 	bl	8080f8c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80811a8:	f3bf 8f5f 	dmb	sy
 80811ac:	2301      	movs	r3, #1
 80811ae:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80811b0:	f3bf 8f5f 	dmb	sy
 80811b4:	f104 0308 	add.w	r3, r4, #8
 80811b8:	2000      	movs	r0, #0
 80811ba:	e853 6f00 	ldrex	r6, [r3]
 80811be:	e843 0200 	strex	r2, r0, [r3]
 80811c2:	2a00      	cmp	r2, #0
 80811c4:	d1f9      	bne.n	80811ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80811c6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80811ca:	2e00      	cmp	r6, #0
 80811cc:	d049      	beq.n	8081262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80811ce:	f7ff fc95 	bl	8080afc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80811d2:	b120      	cbz	r0, 80811de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80811d4:	4629      	mov	r1, r5
 80811d6:	4630      	mov	r0, r6
 80811d8:	f7ff ff98 	bl	808110c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80811dc:	e03a      	b.n	8081254 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80811de:	4631      	mov	r1, r6
 80811e0:	a802      	add	r0, sp, #8
 80811e2:	f7ff ffb3 	bl	808114c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80811e6:	68e0      	ldr	r0, [r4, #12]
 80811e8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80811ec:	b108      	cbz	r0, 80811f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80811ee:	f002 f861 	bl	80832b4 <strdup>
 80811f2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80811f4:	2010      	movs	r0, #16
 80811f6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80811fa:	f7fe ff50 	bl	808009e <_Znwj>
 80811fe:	4605      	mov	r5, r0
 8081200:	b1e8      	cbz	r0, 808123e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081202:	2700      	movs	r7, #0
 8081204:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081206:	2018      	movs	r0, #24
 8081208:	f7fe ff49 	bl	808009e <_Znwj>
 808120c:	4604      	mov	r4, r0
 808120e:	b188      	cbz	r0, 8081234 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081210:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081212:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081214:	a802      	add	r0, sp, #8
 8081216:	f7ff ff55 	bl	80810c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808121a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808121c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808121e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081220:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081222:	9204      	str	r2, [sp, #16]
 8081224:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081226:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081228:	60e3      	str	r3, [r4, #12]
 808122a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808122e:	9205      	str	r2, [sp, #20]
 8081230:	f7ff feac 	bl	8080f8c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081234:	4b0d      	ldr	r3, [pc, #52]	; (808126c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081236:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081238:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808123a:	4b0d      	ldr	r3, [pc, #52]	; (8081270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 808123c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808123e:	a806      	add	r0, sp, #24
 8081240:	f7ff feb3 	bl	8080faa <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081244:	a802      	add	r0, sp, #8
 8081246:	f7ff fe98 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808124a:	2200      	movs	r2, #0
 808124c:	4629      	mov	r1, r5
 808124e:	4809      	ldr	r0, [pc, #36]	; (8081274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081250:	f7ff fc5c 	bl	8080b0c <application_thread_invoke>
 8081254:	4630      	mov	r0, r6
 8081256:	f7ff fe90 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808125a:	2110      	movs	r1, #16
 808125c:	4630      	mov	r0, r6
 808125e:	f000 ffc2 	bl	80821e6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8081262:	4668      	mov	r0, sp
 8081264:	f7ff fea1 	bl	8080faa <_ZN8particle5ErrorD1Ev>
    }
 8081268:	b009      	add	sp, #36	; 0x24
 808126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808126c:	0808111f 	.word	0x0808111f
 8081270:	08081395 	.word	0x08081395
 8081274:	08080cdb 	.word	0x08080cdb

08081278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808127c:	b08b      	sub	sp, #44	; 0x2c
 808127e:	4606      	mov	r6, r0
 8081280:	460f      	mov	r7, r1
 8081282:	4690      	mov	r8, r2
 8081284:	4699      	mov	r9, r3
 8081286:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808128a:	f7ff fc83 	bl	8080b94 <spark_cloud_flag_connected>
 808128e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8081290:	4683      	mov	fp, r0
 8081292:	bb30      	cbnz	r0, 80812e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081294:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081298:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808129a:	a905      	add	r1, sp, #20
 808129c:	4628      	mov	r0, r5
 808129e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80812a2:	f7ff fe73 	bl	8080f8c <_ZN8particle5ErrorC1EOS0_>
 80812a6:	2014      	movs	r0, #20
 80812a8:	f7fe fef9 	bl	808009e <_Znwj>
 80812ac:	4604      	mov	r4, r0
 80812ae:	b158      	cbz	r0, 80812c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80812b0:	2302      	movs	r3, #2
 80812b2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80812b4:	2301      	movs	r3, #1
 80812b6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80812b8:	f8c0 b004 	str.w	fp, [r0, #4]
 80812bc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80812c0:	4629      	mov	r1, r5
 80812c2:	300c      	adds	r0, #12
 80812c4:	f7ff fe62 	bl	8080f8c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80812c8:	4630      	mov	r0, r6
 80812ca:	4621      	mov	r1, r4
 80812cc:	f840 4b04 	str.w	r4, [r0], #4
 80812d0:	f7ff ff08 	bl	80810e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80812d4:	4628      	mov	r0, r5
 80812d6:	f7ff fe68 	bl	8080faa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80812da:	a805      	add	r0, sp, #20
 80812dc:	f7ff fe65 	bl	8080faa <_ZN8particle5ErrorD1Ev>
 80812e0:	e052      	b.n	8081388 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80812e2:	2400      	movs	r4, #0
 80812e4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80812e6:	2014      	movs	r0, #20
 80812e8:	606c      	str	r4, [r5, #4]
 80812ea:	60ac      	str	r4, [r5, #8]
 80812ec:	9307      	str	r3, [sp, #28]
 80812ee:	f7fe fed6 	bl	808009e <_Znwj>
 80812f2:	4601      	mov	r1, r0
 80812f4:	b118      	cbz	r0, 80812fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80812f6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80812f8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80812fa:	6044      	str	r4, [r0, #4]
 80812fc:	6084      	str	r4, [r0, #8]
 80812fe:	a804      	add	r0, sp, #16
 8081300:	9103      	str	r1, [sp, #12]
 8081302:	f7ff feef 	bl	80810e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081306:	4b22      	ldr	r3, [pc, #136]	; (8081390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081308:	2008      	movs	r0, #8
 808130a:	9308      	str	r3, [sp, #32]
 808130c:	f7fe fec7 	bl	808009e <_Znwj>
 8081310:	4604      	mov	r4, r0
 8081312:	b128      	cbz	r0, 8081320 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081314:	9b03      	ldr	r3, [sp, #12]
 8081316:	a904      	add	r1, sp, #16
 8081318:	f840 3b04 	str.w	r3, [r0], #4
 808131c:	f7ff fead 	bl	808107a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081320:	9500      	str	r5, [sp, #0]
 8081322:	fa5f f38a 	uxtb.w	r3, sl
 8081326:	464a      	mov	r2, r9
 8081328:	4641      	mov	r1, r8
 808132a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808132c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808132e:	f7ff fc39 	bl	8080ba4 <spark_send_event>
 8081332:	b920      	cbnz	r0, 808133e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081334:	9b03      	ldr	r3, [sp, #12]
 8081336:	785b      	ldrb	r3, [r3, #1]
 8081338:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808133c:	b183      	cbz	r3, 8081360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808133e:	9b03      	ldr	r3, [sp, #12]
 8081340:	a904      	add	r1, sp, #16
 8081342:	a806      	add	r0, sp, #24
 8081344:	9305      	str	r3, [sp, #20]
 8081346:	f7ff fe98 	bl	808107a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808134a:	a905      	add	r1, sp, #20
 808134c:	4630      	mov	r0, r6
 808134e:	f7ff fe83 	bl	8081058 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081352:	a806      	add	r0, sp, #24
 8081354:	f7ff f87c 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081358:	a804      	add	r0, sp, #16
 808135a:	f7ff f879 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808135e:	e013      	b.n	8081388 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8081360:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081364:	a905      	add	r1, sp, #20
 8081366:	a803      	add	r0, sp, #12
 8081368:	9205      	str	r2, [sp, #20]
 808136a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808136e:	f7ff fefd 	bl	808116c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081372:	a805      	add	r0, sp, #20
 8081374:	f7ff fe19 	bl	8080faa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081378:	a805      	add	r0, sp, #20
 808137a:	9909      	ldr	r1, [sp, #36]	; 0x24
 808137c:	f7ff fe84 	bl	8081088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8081380:	a806      	add	r0, sp, #24
 8081382:	f7ff f865 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081386:	e7da      	b.n	808133e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081388:	4630      	mov	r0, r6
 808138a:	b00b      	add	sp, #44	; 0x2c
 808138c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081390:	08081505 	.word	0x08081505

08081394 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081394:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081398:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808139a:	d006      	beq.n	80813aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808139c:	2a03      	cmp	r2, #3
 808139e:	d017      	beq.n	80813d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80813a0:	2a01      	cmp	r2, #1
 80813a2:	d122      	bne.n	80813ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80813a4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80813a6:	6003      	str	r3, [r0, #0]
	      break;
 80813a8:	e01f      	b.n	80813ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80813aa:	2018      	movs	r0, #24
 80813ac:	680e      	ldr	r6, [r1, #0]
 80813ae:	f7fe fe76 	bl	808009e <_Znwj>
 80813b2:	4605      	mov	r5, r0
 80813b4:	b150      	cbz	r0, 80813cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80813b6:	4631      	mov	r1, r6
 80813b8:	f7ff fec8 	bl	808114c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80813bc:	6930      	ldr	r0, [r6, #16]
 80813be:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80813c2:	b108      	cbz	r0, 80813c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80813c4:	f001 ff76 	bl	80832b4 <strdup>
 80813c8:	6128      	str	r0, [r5, #16]
 80813ca:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80813cc:	6025      	str	r5, [r4, #0]
 80813ce:	e00c      	b.n	80813ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80813d0:	6804      	ldr	r4, [r0, #0]
 80813d2:	b154      	cbz	r4, 80813ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80813d4:	f104 0010 	add.w	r0, r4, #16
 80813d8:	f7ff fde7 	bl	8080faa <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80813dc:	4620      	mov	r0, r4
 80813de:	f7ff fdcc 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80813e2:	2118      	movs	r1, #24
 80813e4:	4620      	mov	r0, r4
 80813e6:	f000 fefe 	bl	80821e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80813ea:	2000      	movs	r0, #0
 80813ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080813ee <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80813ee:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80813f0:	2300      	movs	r3, #0
 80813f2:	6083      	str	r3, [r0, #8]
 80813f4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80813f6:	4604      	mov	r4, r0
 80813f8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80813fa:	b12b      	cbz	r3, 8081408 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80813fc:	2202      	movs	r2, #2
 80813fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081400:	68eb      	ldr	r3, [r5, #12]
 8081402:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081404:	68ab      	ldr	r3, [r5, #8]
 8081406:	60a3      	str	r3, [r4, #8]
	}
    }
 8081408:	4620      	mov	r0, r4
 808140a:	bd38      	pop	{r3, r4, r5, pc}

0808140c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808140c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808140e:	b570      	push	{r4, r5, r6, lr}
 8081410:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081412:	d006      	beq.n	8081422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081414:	2a03      	cmp	r2, #3
 8081416:	d011      	beq.n	808143c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8081418:	2a01      	cmp	r2, #1
 808141a:	d118      	bne.n	808144e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808141c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808141e:	6003      	str	r3, [r0, #0]
	      break;
 8081420:	e015      	b.n	808144e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081422:	2014      	movs	r0, #20
 8081424:	680e      	ldr	r6, [r1, #0]
 8081426:	f7fe fe3a 	bl	808009e <_Znwj>
 808142a:	4605      	mov	r5, r0
 808142c:	b120      	cbz	r0, 8081438 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808142e:	4631      	mov	r1, r6
 8081430:	f7ff ffdd 	bl	80813ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081434:	7c33      	ldrb	r3, [r6, #16]
 8081436:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081438:	6025      	str	r5, [r4, #0]
 808143a:	e008      	b.n	808144e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808143c:	6804      	ldr	r4, [r0, #0]
 808143e:	b134      	cbz	r4, 808144e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081440:	4620      	mov	r0, r4
 8081442:	f7ff fd9a 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081446:	2114      	movs	r1, #20
 8081448:	4620      	mov	r0, r4
 808144a:	f000 fecc 	bl	80821e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808144e:	2000      	movs	r0, #0
 8081450:	bd70      	pop	{r4, r5, r6, pc}
	...

08081454 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8081454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081456:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081458:	f3bf 8f5f 	dmb	sy
 808145c:	b087      	sub	sp, #28
 808145e:	2300      	movs	r3, #0
 8081460:	e850 6f00 	ldrex	r6, [r0]
 8081464:	e840 3200 	strex	r2, r3, [r0]
 8081468:	2a00      	cmp	r2, #0
 808146a:	d1f9      	bne.n	8081460 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808146c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081470:	2e00      	cmp	r6, #0
 8081472:	d03f      	beq.n	80814f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081474:	4618      	mov	r0, r3
 8081476:	f7ff fb41 	bl	8080afc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808147a:	4607      	mov	r7, r0
 808147c:	b120      	cbz	r0, 8081488 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808147e:	4621      	mov	r1, r4
 8081480:	4630      	mov	r0, r6
 8081482:	f7ff fe53 	bl	808112c <_ZNKSt8functionIFvRKbEEclES1_>
 8081486:	e02e      	b.n	80814e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081488:	4631      	mov	r1, r6
 808148a:	a801      	add	r0, sp, #4
 808148c:	f7ff ffaf 	bl	80813ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081490:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081492:	2010      	movs	r0, #16
 8081494:	f88d 3014 	strb.w	r3, [sp, #20]
 8081498:	f7fe fe01 	bl	808009e <_Znwj>
 808149c:	4605      	mov	r5, r0
 808149e:	b1d0      	cbz	r0, 80814d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80814a0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80814a2:	2014      	movs	r0, #20
 80814a4:	f7fe fdfb 	bl	808009e <_Znwj>
 80814a8:	4604      	mov	r4, r0
 80814aa:	b178      	cbz	r0, 80814cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80814ac:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80814ae:	4601      	mov	r1, r0
 80814b0:	a801      	add	r0, sp, #4
 80814b2:	f7ff fe07 	bl	80810c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80814b6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80814b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80814ba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80814bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80814be:	9203      	str	r2, [sp, #12]
 80814c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80814c2:	60e3      	str	r3, [r4, #12]
 80814c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80814c8:	9204      	str	r2, [sp, #16]
 80814ca:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80814cc:	4b0a      	ldr	r3, [pc, #40]	; (80814f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80814ce:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80814d0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80814d2:	4b0a      	ldr	r3, [pc, #40]	; (80814fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80814d4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80814d6:	a801      	add	r0, sp, #4
 80814d8:	f7ff fd4f 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80814dc:	2200      	movs	r2, #0
 80814de:	4629      	mov	r1, r5
 80814e0:	4807      	ldr	r0, [pc, #28]	; (8081500 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80814e2:	f7ff fb13 	bl	8080b0c <application_thread_invoke>
 80814e6:	4630      	mov	r0, r6
 80814e8:	f7ff fd47 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80814ec:	2110      	movs	r1, #16
 80814ee:	4630      	mov	r0, r6
 80814f0:	f000 fe79 	bl	80821e6 <_ZdlPvj>
        }
    }
 80814f4:	b007      	add	sp, #28
 80814f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80814f8:	0808113f 	.word	0x0808113f
 80814fc:	0808140d 	.word	0x0808140d
 8081500:	08080cdb 	.word	0x08080cdb

08081504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081504:	b530      	push	{r4, r5, lr}
 8081506:	4604      	mov	r4, r0
 8081508:	b085      	sub	sp, #20
 808150a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808150c:	4668      	mov	r0, sp
 808150e:	4611      	mov	r1, r2
 8081510:	f7ff fdba 	bl	8081088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081514:	b17c      	cbz	r4, 8081536 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081516:	b224      	sxth	r4, r4
 8081518:	4628      	mov	r0, r5
 808151a:	b10d      	cbz	r5, 8081520 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 808151c:	f001 feca 	bl	80832b4 <strdup>
 8081520:	9002      	str	r0, [sp, #8]
 8081522:	a902      	add	r1, sp, #8
 8081524:	4668      	mov	r0, sp
 8081526:	f8ad 400c 	strh.w	r4, [sp, #12]
 808152a:	f7ff fe1f 	bl	808116c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808152e:	a802      	add	r0, sp, #8
 8081530:	f7ff fd3b 	bl	8080faa <_ZN8particle5ErrorD1Ev>
 8081534:	e01d      	b.n	8081572 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081536:	f04f 0201 	mov.w	r2, #1
 808153a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808153c:	f88d 4008 	strb.w	r4, [sp, #8]
 8081540:	e8d0 3f4f 	ldrexb	r3, [r0]
 8081544:	42a3      	cmp	r3, r4
 8081546:	d103      	bne.n	8081550 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8081548:	e8c0 2f41 	strexb	r1, r2, [r0]
 808154c:	2900      	cmp	r1, #0
 808154e:	d1f7      	bne.n	8081540 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081550:	d002      	beq.n	8081558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8081552:	f88d 3008 	strb.w	r3, [sp, #8]
 8081556:	e00c      	b.n	8081572 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8081558:	f110 010c 	adds.w	r1, r0, #12
 808155c:	f04f 0301 	mov.w	r3, #1
 8081560:	bf18      	it	ne
 8081562:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081564:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8081568:	3004      	adds	r0, #4
 808156a:	f800 3c03 	strb.w	r3, [r0, #-3]
 808156e:	f7ff ff71 	bl	8081454 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081572:	a801      	add	r0, sp, #4
 8081574:	f7fe ff6c 	bl	8080450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8081578:	b005      	add	sp, #20
 808157a:	bd30      	pop	{r4, r5, pc}

0808157c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808157c:	6800      	ldr	r0, [r0, #0]
 808157e:	f000 b8d4 	b.w	808172a <_ZN7TwoWire4lockEv>

08081582 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8081582:	b510      	push	{r4, lr}
 8081584:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8081586:	6001      	str	r1, [r0, #0]
 8081588:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808158a:	b10a      	cbz	r2, 8081590 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808158c:	f7ff fff6 	bl	808157c <_ZN9FuelGauge4lockEv>
    }
}
 8081590:	4620      	mov	r0, r4
 8081592:	bd10      	pop	{r4, pc}

08081594 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8081594:	b538      	push	{r3, r4, r5, lr}
 8081596:	4604      	mov	r4, r0
 8081598:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808159a:	f000 fdb9 	bl	8082110 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808159e:	462a      	mov	r2, r5
 80815a0:	4601      	mov	r1, r0
 80815a2:	4620      	mov	r0, r4
 80815a4:	f7ff ffed 	bl	8081582 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 80815a8:	4620      	mov	r0, r4
 80815aa:	bd38      	pop	{r3, r4, r5, pc}

080815ac <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80815ac:	6800      	ldr	r0, [r0, #0]
 80815ae:	f000 b8c5 	b.w	808173c <_ZN7TwoWire6unlockEv>

080815b2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80815b2:	b510      	push	{r4, lr}
{
    if (lock_) {
 80815b4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80815b6:	4604      	mov	r4, r0
{
    if (lock_) {
 80815b8:	b10b      	cbz	r3, 80815be <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80815ba:	f7ff fff7 	bl	80815ac <_ZN9FuelGauge6unlockEv>
    }
}
 80815be:	4620      	mov	r0, r4
 80815c0:	bd10      	pop	{r4, pc}

080815c2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80815c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80815c4:	4604      	mov	r4, r0
 80815c6:	460f      	mov	r7, r1
 80815c8:	4616      	mov	r6, r2
 80815ca:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80815cc:	f7ff ffd6 	bl	808157c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80815d0:	6820      	ldr	r0, [r4, #0]
 80815d2:	2136      	movs	r1, #54	; 0x36
 80815d4:	f000 f89b 	bl	808170e <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 80815d8:	6820      	ldr	r0, [r4, #0]
 80815da:	4639      	mov	r1, r7
 80815dc:	6803      	ldr	r3, [r0, #0]
 80815de:	689b      	ldr	r3, [r3, #8]
 80815e0:	4798      	blx	r3
    i2c_.endTransmission(true);
 80815e2:	2101      	movs	r1, #1
 80815e4:	6820      	ldr	r0, [r4, #0]
 80815e6:	f000 f895 	bl	8081714 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80815ea:	2202      	movs	r2, #2
 80815ec:	2136      	movs	r1, #54	; 0x36
 80815ee:	2301      	movs	r3, #1
 80815f0:	6820      	ldr	r0, [r4, #0]
 80815f2:	f000 f883 	bl	80816fc <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80815f6:	6820      	ldr	r0, [r4, #0]
 80815f8:	6803      	ldr	r3, [r0, #0]
 80815fa:	695b      	ldr	r3, [r3, #20]
 80815fc:	4798      	blx	r3
 80815fe:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8081600:	6820      	ldr	r0, [r4, #0]
 8081602:	6803      	ldr	r3, [r0, #0]
 8081604:	695b      	ldr	r3, [r3, #20]
 8081606:	4798      	blx	r3
 8081608:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808160a:	4620      	mov	r0, r4
}
 808160c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8081610:	f7ff bfcc 	b.w	80815ac <_ZN9FuelGauge6unlockEv>

08081614 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8081614:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8081616:	2200      	movs	r2, #0
	byte LSB = 0;
 8081618:	ab02      	add	r3, sp, #8
 808161a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808161e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8081622:	2104      	movs	r1, #4
 8081624:	f10d 0206 	add.w	r2, sp, #6
 8081628:	f7ff ffcb 	bl	80815c2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 808162c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8081630:	f001 f878 	bl	8082724 <__aeabi_i2d>
 8081634:	2200      	movs	r2, #0
 8081636:	4b08      	ldr	r3, [pc, #32]	; (8081658 <_ZN9FuelGauge6getSoCEv+0x44>)
 8081638:	f001 f8da 	bl	80827f0 <__aeabi_dmul>
 808163c:	f001 fb12 	bl	8082c64 <__aeabi_d2f>
 8081640:	4604      	mov	r4, r0
 8081642:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8081646:	f001 fc17 	bl	8082e78 <__aeabi_i2f>
 808164a:	4601      	mov	r1, r0
 808164c:	4620      	mov	r0, r4
 808164e:	f001 fb5f 	bl	8082d10 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8081652:	b002      	add	sp, #8
 8081654:	bd10      	pop	{r4, pc}
 8081656:	bf00      	nop
 8081658:	3f700000 	.word	0x3f700000

0808165c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808165c:	4770      	bx	lr

0808165e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808165e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081660:	4606      	mov	r6, r0
 8081662:	4615      	mov	r5, r2
 8081664:	460c      	mov	r4, r1
 8081666:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081668:	42bc      	cmp	r4, r7
 808166a:	d006      	beq.n	808167a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808166c:	6833      	ldr	r3, [r6, #0]
 808166e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081672:	689b      	ldr	r3, [r3, #8]
 8081674:	4630      	mov	r0, r6
 8081676:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081678:	e7f6      	b.n	8081668 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808167a:	4628      	mov	r0, r5
 808167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808167e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808167e:	2200      	movs	r2, #0
 8081680:	7c00      	ldrb	r0, [r0, #16]
 8081682:	f7ff b953 	b.w	808092c <HAL_I2C_Write_Data>

08081686 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8081686:	2100      	movs	r1, #0
 8081688:	7c00      	ldrb	r0, [r0, #16]
 808168a:	f7ff b957 	b.w	808093c <HAL_I2C_Available_Data>

0808168e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808168e:	2100      	movs	r1, #0
 8081690:	7c00      	ldrb	r0, [r0, #16]
 8081692:	f7ff b95b 	b.w	808094c <HAL_I2C_Read_Data>

08081696 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8081696:	2100      	movs	r1, #0
 8081698:	7c00      	ldrb	r0, [r0, #16]
 808169a:	f7ff b95f 	b.w	808095c <HAL_I2C_Peek_Data>

0808169e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808169e:	2100      	movs	r1, #0
 80816a0:	7c00      	ldrb	r0, [r0, #16]
 80816a2:	f7ff b963 	b.w	808096c <HAL_I2C_Flush_Data>

080816a6 <_ZN7TwoWireD0Ev>:
 80816a6:	b510      	push	{r4, lr}
 80816a8:	4604      	mov	r4, r0
 80816aa:	2114      	movs	r1, #20
 80816ac:	f000 fd9b 	bl	80821e6 <_ZdlPvj>
 80816b0:	4620      	mov	r0, r4
 80816b2:	bd10      	pop	{r4, pc}

080816b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80816b4:	b510      	push	{r4, lr}
 80816b6:	4604      	mov	r4, r0
 80816b8:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80816ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80816be:	60a3      	str	r3, [r4, #8]
 80816c0:	4b04      	ldr	r3, [pc, #16]	; (80816d4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80816c2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80816c4:	7420      	strb	r0, [r4, #16]
 80816c6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80816c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80816ca:	f7ff f95f 	bl	808098c <HAL_I2C_Init>

}
 80816ce:	4620      	mov	r0, r4
 80816d0:	bd10      	pop	{r4, pc}
 80816d2:	bf00      	nop
 80816d4:	0808365c 	.word	0x0808365c

080816d8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80816d8:	2300      	movs	r3, #0
 80816da:	461a      	mov	r2, r3
 80816dc:	4619      	mov	r1, r3
 80816de:	7c00      	ldrb	r0, [r0, #16]
 80816e0:	f7ff b904 	b.w	80808ec <HAL_I2C_Begin>

080816e4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80816e4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80816e6:	2400      	movs	r4, #0
 80816e8:	7c00      	ldrb	r0, [r0, #16]
 80816ea:	9400      	str	r4, [sp, #0]
 80816ec:	f7ff f906 	bl	80808fc <HAL_I2C_Request_Data>
  return result;
}
 80816f0:	b2c0      	uxtb	r0, r0
 80816f2:	b002      	add	sp, #8
 80816f4:	bd10      	pop	{r4, pc}

080816f6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80816f6:	2301      	movs	r3, #1
 80816f8:	f7ff bff4 	b.w	80816e4 <_ZN7TwoWire11requestFromEhhh>

080816fc <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80816fc:	b2db      	uxtb	r3, r3
 80816fe:	b2d2      	uxtb	r2, r2
 8081700:	b2c9      	uxtb	r1, r1
 8081702:	f7ff bfef 	b.w	80816e4 <_ZN7TwoWire11requestFromEhhh>

08081706 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8081706:	2200      	movs	r2, #0
 8081708:	7c00      	ldrb	r0, [r0, #16]
 808170a:	f7ff b8ff 	b.w	808090c <HAL_I2C_Begin_Transmission>

0808170e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808170e:	b2c9      	uxtb	r1, r1
 8081710:	f7ff bff9 	b.w	8081706 <_ZN7TwoWire17beginTransmissionEh>

08081714 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8081714:	2200      	movs	r2, #0
 8081716:	7c00      	ldrb	r0, [r0, #16]
 8081718:	f7ff b900 	b.w	808091c <HAL_I2C_End_Transmission>

0808171c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808171c:	2101      	movs	r1, #1
 808171e:	f7ff bff9 	b.w	8081714 <_ZN7TwoWire15endTransmissionEh>

08081722 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8081722:	2100      	movs	r1, #0
 8081724:	7c00      	ldrb	r0, [r0, #16]
 8081726:	f7ff b929 	b.w	808097c <HAL_I2C_Is_Enabled>

0808172a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808172a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808172c:	2100      	movs	r1, #0
 808172e:	7c00      	ldrb	r0, [r0, #16]
 8081730:	f7ff f934 	bl	808099c <HAL_I2C_Acquire>
}
 8081734:	fab0 f080 	clz	r0, r0
 8081738:	0940      	lsrs	r0, r0, #5
 808173a:	bd08      	pop	{r3, pc}

0808173c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808173c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808173e:	2100      	movs	r1, #0
 8081740:	7c00      	ldrb	r0, [r0, #16]
 8081742:	f7ff f933 	bl	80809ac <HAL_I2C_Release>
}
 8081746:	fab0 f080 	clz	r0, r0
 808174a:	0940      	lsrs	r0, r0, #5
 808174c:	bd08      	pop	{r3, pc}

0808174e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808174e:	4770      	bx	lr

08081750 <_ZN9IPAddressD0Ev>:
 8081750:	b510      	push	{r4, lr}
 8081752:	4604      	mov	r4, r0
 8081754:	2108      	movs	r1, #8
 8081756:	f000 fd46 	bl	80821e6 <_ZdlPvj>
 808175a:	4620      	mov	r0, r4
 808175c:	bd10      	pop	{r4, pc}

0808175e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808175e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081760:	460f      	mov	r7, r1
 8081762:	f100 0608 	add.w	r6, r0, #8
 8081766:	1d05      	adds	r5, r0, #4
 8081768:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808176a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808176e:	220a      	movs	r2, #10
 8081770:	4638      	mov	r0, r7
 8081772:	f000 f910 	bl	8081996 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081776:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081778:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808177a:	d007      	beq.n	808178c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808177c:	2c00      	cmp	r4, #0
 808177e:	d0f4      	beq.n	808176a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081780:	212e      	movs	r1, #46	; 0x2e
 8081782:	4638      	mov	r0, r7
 8081784:	f000 f8c4 	bl	8081910 <_ZN5Print5printEc>
 8081788:	4404      	add	r4, r0
 808178a:	e7ee      	b.n	808176a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808178c:	4620      	mov	r0, r4
 808178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081790 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8081790:	4a02      	ldr	r2, [pc, #8]	; (808179c <_ZN9IPAddressC1Ev+0xc>)
 8081792:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8081794:	2200      	movs	r2, #0
 8081796:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8081798:	4770      	bx	lr
 808179a:	bf00      	nop
 808179c:	08083684 	.word	0x08083684

080817a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80817a0:	4a02      	ldr	r2, [pc, #8]	; (80817ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80817a2:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80817a4:	680a      	ldr	r2, [r1, #0]
 80817a6:	6042      	str	r2, [r0, #4]
}
 80817a8:	4770      	bx	lr
 80817aa:	bf00      	nop
 80817ac:	08083684 	.word	0x08083684

080817b0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80817b0:	4a01      	ldr	r2, [pc, #4]	; (80817b8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80817b2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80817b4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80817b6:	4770      	bx	lr
 80817b8:	08083684 	.word	0x08083684

080817bc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80817bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80817be:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80817c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80817c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80817ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80817ce:	6041      	str	r1, [r0, #4]
 80817d0:	bd10      	pop	{r4, pc}
	...

080817d4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80817d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80817d6:	4d04      	ldr	r5, [pc, #16]	; (80817e8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80817d8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80817da:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80817de:	9500      	str	r5, [sp, #0]
 80817e0:	f7ff ffec 	bl	80817bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80817e4:	b003      	add	sp, #12
 80817e6:	bd30      	pop	{r4, r5, pc}
 80817e8:	08083684 	.word	0x08083684

080817ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80817ec:	4a01      	ldr	r2, [pc, #4]	; (80817f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80817ee:	4b02      	ldr	r3, [pc, #8]	; (80817f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80817f0:	601a      	str	r2, [r3, #0]
 80817f2:	4770      	bx	lr
 80817f4:	08083706 	.word	0x08083706
 80817f8:	20000124 	.word	0x20000124

080817fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80817fc:	2300      	movs	r3, #0
 80817fe:	461a      	mov	r2, r3
 8081800:	6840      	ldr	r0, [r0, #4]
 8081802:	f7ff b9e7 	b.w	8080bd4 <network_connect>

08081806 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081806:	2200      	movs	r2, #0
 8081808:	2102      	movs	r1, #2
 808180a:	6840      	ldr	r0, [r0, #4]
 808180c:	f7ff b9f2 	b.w	8080bf4 <network_disconnect>

08081810 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081810:	2200      	movs	r2, #0
 8081812:	4611      	mov	r1, r2
 8081814:	6840      	ldr	r0, [r0, #4]
 8081816:	f7ff b9e5 	b.w	8080be4 <network_connecting>

0808181a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808181a:	2200      	movs	r2, #0
 808181c:	4611      	mov	r1, r2
 808181e:	6840      	ldr	r0, [r0, #4]
 8081820:	f7ff b9f0 	b.w	8080c04 <network_ready>

08081824 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081824:	2300      	movs	r3, #0
 8081826:	461a      	mov	r2, r3
 8081828:	4619      	mov	r1, r3
 808182a:	6840      	ldr	r0, [r0, #4]
 808182c:	f7ff b9f2 	b.w	8080c14 <network_on>

08081830 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081830:	2300      	movs	r3, #0
 8081832:	461a      	mov	r2, r3
 8081834:	4619      	mov	r1, r3
 8081836:	6840      	ldr	r0, [r0, #4]
 8081838:	f7ff b9f4 	b.w	8080c24 <network_off>

0808183c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808183c:	2200      	movs	r2, #0
 808183e:	f081 0101 	eor.w	r1, r1, #1
 8081842:	6840      	ldr	r0, [r0, #4]
 8081844:	f7ff b9f6 	b.w	8080c34 <network_listen>

08081848 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8081848:	2200      	movs	r2, #0
 808184a:	6840      	ldr	r0, [r0, #4]
 808184c:	f7ff ba02 	b.w	8080c54 <network_set_listen_timeout>

08081850 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8081850:	2200      	movs	r2, #0
 8081852:	4611      	mov	r1, r2
 8081854:	6840      	ldr	r0, [r0, #4]
 8081856:	f7ff ba05 	b.w	8080c64 <network_get_listen_timeout>

0808185a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808185a:	2200      	movs	r2, #0
 808185c:	4611      	mov	r1, r2
 808185e:	6840      	ldr	r0, [r0, #4]
 8081860:	f7ff b9f0 	b.w	8080c44 <network_listening>

08081864 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8081864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081866:	4617      	mov	r7, r2
 8081868:	b087      	sub	sp, #28
 808186a:	4605      	mov	r5, r0
    IPAddress addr;
 808186c:	a804      	add	r0, sp, #16
 808186e:	f7ff ff8f 	bl	8081790 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8081872:	2600      	movs	r6, #0
 8081874:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081876:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8081878:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808187c:	f001 fd35 	bl	80832ea <strlen>
 8081880:	4b0a      	ldr	r3, [pc, #40]	; (80818ac <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8081882:	9600      	str	r6, [sp, #0]
 8081884:	b281      	uxth	r1, r0
 8081886:	685b      	ldr	r3, [r3, #4]
 8081888:	4622      	mov	r2, r4
 808188a:	4638      	mov	r0, r7
 808188c:	f7fe ffb6 	bl	80807fc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081890:	b120      	cbz	r0, 808189c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081892:	4631      	mov	r1, r6
 8081894:	4628      	mov	r0, r5
 8081896:	f7ff ff8b 	bl	80817b0 <_ZN9IPAddressC1Em>
 808189a:	e003      	b.n	80818a4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808189c:	4621      	mov	r1, r4
 808189e:	4628      	mov	r0, r5
 80818a0:	f7ff ff7e 	bl	80817a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80818a4:	4628      	mov	r0, r5
 80818a6:	b007      	add	sp, #28
 80818a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80818aa:	bf00      	nop
 80818ac:	200000f4 	.word	0x200000f4

080818b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80818b0:	4b02      	ldr	r3, [pc, #8]	; (80818bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80818b2:	4a03      	ldr	r2, [pc, #12]	; (80818c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80818b4:	601a      	str	r2, [r3, #0]
 80818b6:	2200      	movs	r2, #0
 80818b8:	605a      	str	r2, [r3, #4]
 80818ba:	4770      	bx	lr
 80818bc:	20000128 	.word	0x20000128
 80818c0:	0808377c 	.word	0x0808377c

080818c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80818c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80818c6:	4606      	mov	r6, r0
 80818c8:	460d      	mov	r5, r1
 80818ca:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80818cc:	2400      	movs	r4, #0
  while (size--) {
 80818ce:	42bd      	cmp	r5, r7
 80818d0:	d00c      	beq.n	80818ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80818d2:	6833      	ldr	r3, [r6, #0]
 80818d4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80818d8:	689b      	ldr	r3, [r3, #8]
 80818da:	4630      	mov	r0, r6
 80818dc:	4798      	blx	r3
     if (chunk>=0)
 80818de:	2800      	cmp	r0, #0
 80818e0:	db01      	blt.n	80818e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80818e2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80818e4:	e7f3      	b.n	80818ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80818e6:	2c00      	cmp	r4, #0
 80818e8:	bf08      	it	eq
 80818ea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80818ec:	4620      	mov	r0, r4
 80818ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080818f0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80818f0:	b570      	push	{r4, r5, r6, lr}
 80818f2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80818f4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80818f6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80818f8:	b149      	cbz	r1, 808190e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80818fa:	f001 fcf6 	bl	80832ea <strlen>
 80818fe:	682b      	ldr	r3, [r5, #0]
 8081900:	4602      	mov	r2, r0
 8081902:	4621      	mov	r1, r4
 8081904:	4628      	mov	r0, r5
    }
 8081906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808190a:	68db      	ldr	r3, [r3, #12]
 808190c:	4718      	bx	r3
    }
 808190e:	bd70      	pop	{r4, r5, r6, pc}

08081910 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081910:	6803      	ldr	r3, [r0, #0]
 8081912:	689b      	ldr	r3, [r3, #8]
 8081914:	4718      	bx	r3

08081916 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081916:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8081918:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808191a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808191c:	f7ff fff8 	bl	8081910 <_ZN5Print5printEc>
  n += print('\n');
 8081920:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8081922:	4604      	mov	r4, r0
  n += print('\n');
 8081924:	4628      	mov	r0, r5
 8081926:	f7ff fff3 	bl	8081910 <_ZN5Print5printEc>
  return n;
}
 808192a:	4420      	add	r0, r4
 808192c:	bd38      	pop	{r3, r4, r5, pc}

0808192e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808192e:	b538      	push	{r3, r4, r5, lr}
 8081930:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081932:	f7ff ffdd 	bl	80818f0 <_ZN5Print5writeEPKc>
 8081936:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8081938:	4628      	mov	r0, r5
 808193a:	f7ff ffec 	bl	8081916 <_ZN5Print7printlnEv>
  return n;
}
 808193e:	4420      	add	r0, r4
 8081940:	bd38      	pop	{r3, r4, r5, pc}

08081942 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081942:	2a01      	cmp	r2, #1
 8081944:	bf98      	it	ls
 8081946:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081948:	b530      	push	{r4, r5, lr}
 808194a:	460b      	mov	r3, r1
 808194c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808194e:	2100      	movs	r1, #0
 8081950:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8081954:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8081958:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808195c:	fb05 3312 	mls	r3, r5, r2, r3
 8081960:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081962:	2b09      	cmp	r3, #9
 8081964:	bf94      	ite	ls
 8081966:	3330      	addls	r3, #48	; 0x30
 8081968:	3337      	addhi	r3, #55	; 0x37
 808196a:	b2db      	uxtb	r3, r3
 808196c:	4621      	mov	r1, r4
 808196e:	f804 3901 	strb.w	r3, [r4], #-1
 8081972:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8081974:	2d00      	cmp	r5, #0
 8081976:	d1ef      	bne.n	8081958 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8081978:	f7ff ffba 	bl	80818f0 <_ZN5Print5writeEPKc>
}
 808197c:	b00b      	add	sp, #44	; 0x2c
 808197e:	bd30      	pop	{r4, r5, pc}

08081980 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8081980:	b410      	push	{r4}
  if (base == 0) return write(n);
 8081982:	b922      	cbnz	r2, 808198e <_ZN5Print5printEmi+0xe>
 8081984:	6803      	ldr	r3, [r0, #0]
 8081986:	b2c9      	uxtb	r1, r1
 8081988:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808198a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808198c:	4718      	bx	r3
  else return printNumber(n, base);
 808198e:	b2d2      	uxtb	r2, r2
}
 8081990:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081992:	f7ff bfd6 	b.w	8081942 <_ZN5Print11printNumberEmh>

08081996 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8081996:	f7ff bff3 	b.w	8081980 <_ZN5Print5printEmi>

0808199a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 808199a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808199e:	4607      	mov	r7, r0
 80819a0:	460e      	mov	r6, r1
  if (base == 0) {
 80819a2:	4615      	mov	r5, r2
 80819a4:	b92a      	cbnz	r2, 80819b2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80819a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80819aa:	6803      	ldr	r3, [r0, #0]
 80819ac:	b2c9      	uxtb	r1, r1
 80819ae:	689b      	ldr	r3, [r3, #8]
 80819b0:	4718      	bx	r3
  } else if (base == 10) {
 80819b2:	2a0a      	cmp	r2, #10
 80819b4:	d102      	bne.n	80819bc <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80819b6:	2900      	cmp	r1, #0
 80819b8:	da01      	bge.n	80819be <_ZN5Print5printEli+0x24>
 80819ba:	e004      	b.n	80819c6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80819bc:	b2d2      	uxtb	r2, r2
  }
}
 80819be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80819c2:	f7ff bfbe 	b.w	8081942 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80819c6:	212d      	movs	r1, #45	; 0x2d
 80819c8:	f7ff ffa2 	bl	8081910 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80819cc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80819ce:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80819d0:	4271      	negs	r1, r6
 80819d2:	4638      	mov	r0, r7
 80819d4:	f7ff ffb5 	bl	8081942 <_ZN5Print11printNumberEmh>
 80819d8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80819da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080819de <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80819de:	f7ff bfdc 	b.w	808199a <_ZN5Print5printEli>

080819e2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80819e2:	b510      	push	{r4, lr}
 80819e4:	4604      	mov	r4, r0
 80819e6:	f7ff fac8 	bl	8080f7a <_ZNSt14_Function_baseD1Ev>
 80819ea:	4620      	mov	r0, r4
 80819ec:	bd10      	pop	{r4, pc}
	...

080819f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80819f0:	4803      	ldr	r0, [pc, #12]	; (8081a00 <_GLOBAL__sub_I_RGB+0x10>)
 80819f2:	2300      	movs	r3, #0
 80819f4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80819f6:	4a03      	ldr	r2, [pc, #12]	; (8081a04 <_GLOBAL__sub_I_RGB+0x14>)
 80819f8:	4903      	ldr	r1, [pc, #12]	; (8081a08 <_GLOBAL__sub_I_RGB+0x18>)
 80819fa:	f000 bbef 	b.w	80821dc <__aeabi_atexit>
 80819fe:	bf00      	nop
 8081a00:	20000130 	.word	0x20000130
 8081a04:	20000094 	.word	0x20000094
 8081a08:	080819e3 	.word	0x080819e3

08081a0c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081a0c:	4770      	bx	lr

08081a0e <_ZN8SPIClassD0Ev>:
 8081a0e:	b510      	push	{r4, lr}
 8081a10:	4604      	mov	r4, r0
 8081a12:	2110      	movs	r1, #16
 8081a14:	f000 fbe7 	bl	80821e6 <_ZdlPvj>
 8081a18:	4620      	mov	r0, r4
 8081a1a:	bd10      	pop	{r4, pc}

08081a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081a1c:	b570      	push	{r4, r5, r6, lr}
 8081a1e:	4604      	mov	r4, r0
 8081a20:	460e      	mov	r6, r1
 8081a22:	4b07      	ldr	r3, [pc, #28]	; (8081a40 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8081a24:	2500      	movs	r5, #0
 8081a26:	6003      	str	r3, [r0, #0]
 8081a28:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081a2c:	f7fe fef6 	bl	808081c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081a30:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8081a32:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8081a34:	f7fe ffc2 	bl	80809bc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081a38:	60a5      	str	r5, [r4, #8]
}
 8081a3a:	4620      	mov	r0, r4
 8081a3c:	bd70      	pop	{r4, r5, r6, pc}
 8081a3e:	bf00      	nop
 8081a40:	080837b0 	.word	0x080837b0

08081a44 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8081a44:	7900      	ldrb	r0, [r0, #4]
 8081a46:	f7fe bfc1 	b.w	80809cc <HAL_SPI_Is_Enabled>

08081a4a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8081a4a:	b510      	push	{r4, lr}
 8081a4c:	4604      	mov	r4, r0
{
	free(buffer);
 8081a4e:	6800      	ldr	r0, [r0, #0]
 8081a50:	f7ff f918 	bl	8080c84 <free>
}
 8081a54:	4620      	mov	r0, r4
 8081a56:	bd10      	pop	{r4, pc}

08081a58 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8081a58:	b510      	push	{r4, lr}
 8081a5a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8081a5c:	6800      	ldr	r0, [r0, #0]
 8081a5e:	b108      	cbz	r0, 8081a64 <_ZN6String10invalidateEv+0xc>
 8081a60:	f7ff f910 	bl	8080c84 <free>
	buffer = NULL;
 8081a64:	2300      	movs	r3, #0
 8081a66:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8081a68:	60a3      	str	r3, [r4, #8]
 8081a6a:	6063      	str	r3, [r4, #4]
 8081a6c:	bd10      	pop	{r4, pc}

08081a6e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8081a6e:	b538      	push	{r3, r4, r5, lr}
 8081a70:	4604      	mov	r4, r0
 8081a72:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8081a74:	6800      	ldr	r0, [r0, #0]
 8081a76:	3101      	adds	r1, #1
 8081a78:	f7ff f90c 	bl	8080c94 <realloc>
	if (newbuffer) {
 8081a7c:	b110      	cbz	r0, 8081a84 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8081a7e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8081a82:	2001      	movs	r0, #1
	}
	return 0;
}
 8081a84:	bd38      	pop	{r3, r4, r5, pc}

08081a86 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081a86:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8081a88:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081a8a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8081a8c:	b113      	cbz	r3, 8081a94 <_ZN6String7reserveEj+0xe>
 8081a8e:	6843      	ldr	r3, [r0, #4]
 8081a90:	428b      	cmp	r3, r1
 8081a92:	d207      	bcs.n	8081aa4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8081a94:	4620      	mov	r0, r4
 8081a96:	f7ff ffea 	bl	8081a6e <_ZN6String12changeBufferEj>
 8081a9a:	b120      	cbz	r0, 8081aa6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8081a9c:	68a3      	ldr	r3, [r4, #8]
 8081a9e:	b90b      	cbnz	r3, 8081aa4 <_ZN6String7reserveEj+0x1e>
 8081aa0:	6822      	ldr	r2, [r4, #0]
 8081aa2:	7013      	strb	r3, [r2, #0]
 8081aa4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8081aa6:	bd10      	pop	{r4, pc}

08081aa8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081aa8:	b570      	push	{r4, r5, r6, lr}
 8081aaa:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8081aac:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081aae:	4604      	mov	r4, r0
 8081ab0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8081ab2:	f7ff ffe8 	bl	8081a86 <_ZN6String7reserveEj>
 8081ab6:	b918      	cbnz	r0, 8081ac0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8081ab8:	4620      	mov	r0, r4
 8081aba:	f7ff ffcd 	bl	8081a58 <_ZN6String10invalidateEv>
		return *this;
 8081abe:	e009      	b.n	8081ad4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8081ac0:	462a      	mov	r2, r5
 8081ac2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8081ac4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8081ac6:	6820      	ldr	r0, [r4, #0]
 8081ac8:	f001 fbae 	bl	8083228 <memcpy>
	buffer[len] = 0;
 8081acc:	6822      	ldr	r2, [r4, #0]
 8081ace:	68a3      	ldr	r3, [r4, #8]
 8081ad0:	2100      	movs	r1, #0
 8081ad2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8081ad4:	4620      	mov	r0, r4
 8081ad6:	bd70      	pop	{r4, r5, r6, pc}

08081ad8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081ad8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081ada:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081adc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081ade:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081ae0:	6043      	str	r3, [r0, #4]
	len = 0;
 8081ae2:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081ae4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8081ae6:	460d      	mov	r5, r1
 8081ae8:	b139      	cbz	r1, 8081afa <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081aea:	4608      	mov	r0, r1
 8081aec:	f001 fbfd 	bl	80832ea <strlen>
 8081af0:	4629      	mov	r1, r5
 8081af2:	4602      	mov	r2, r0
 8081af4:	4620      	mov	r0, r4
 8081af6:	f7ff ffd7 	bl	8081aa8 <_ZN6String4copyEPKcj>
}
 8081afa:	4620      	mov	r0, r4
 8081afc:	bd38      	pop	{r3, r4, r5, pc}

08081afe <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8081afe:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8081b00:	b510      	push	{r4, lr}
 8081b02:	460b      	mov	r3, r1
 8081b04:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8081b06:	d007      	beq.n	8081b18 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8081b08:	6809      	ldr	r1, [r1, #0]
 8081b0a:	b119      	cbz	r1, 8081b14 <_ZN6StringaSERKS_+0x16>
 8081b0c:	689a      	ldr	r2, [r3, #8]
 8081b0e:	f7ff ffcb 	bl	8081aa8 <_ZN6String4copyEPKcj>
 8081b12:	e001      	b.n	8081b18 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8081b14:	f7ff ffa0 	bl	8081a58 <_ZN6String10invalidateEv>

	return *this;
}
 8081b18:	4620      	mov	r0, r4
 8081b1a:	bd10      	pop	{r4, pc}

08081b1c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8081b1c:	b510      	push	{r4, lr}
 8081b1e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081b20:	2300      	movs	r3, #0
 8081b22:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081b24:	6043      	str	r3, [r0, #4]
	len = 0;
 8081b26:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081b28:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8081b2a:	f7ff ffe8 	bl	8081afe <_ZN6StringaSERKS_>
}
 8081b2e:	4620      	mov	r0, r4
 8081b30:	bd10      	pop	{r4, pc}

08081b32 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8081b32:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8081b34:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8081b36:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8081b38:	b912      	cbnz	r2, 8081b40 <_ZNK6String6equalsEPKc+0xe>
 8081b3a:	b919      	cbnz	r1, 8081b44 <_ZNK6String6equalsEPKc+0x12>
 8081b3c:	2001      	movs	r0, #1
 8081b3e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8081b40:	b911      	cbnz	r1, 8081b48 <_ZNK6String6equalsEPKc+0x16>
 8081b42:	6803      	ldr	r3, [r0, #0]
 8081b44:	7818      	ldrb	r0, [r3, #0]
 8081b46:	e002      	b.n	8081b4e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8081b48:	6800      	ldr	r0, [r0, #0]
 8081b4a:	f001 fba9 	bl	80832a0 <strcmp>
 8081b4e:	fab0 f080 	clz	r0, r0
 8081b52:	0940      	lsrs	r0, r0, #5
}
 8081b54:	bd08      	pop	{r3, pc}
	...

08081b58 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081b5c:	4b03      	ldr	r3, [pc, #12]	; (8081b6c <_GLOBAL__sub_I_System+0x14>)
 8081b5e:	2000      	movs	r0, #0
 8081b60:	7018      	strb	r0, [r3, #0]
 8081b62:	8058      	strh	r0, [r3, #2]
 8081b64:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081b66:	f7fe bfb1 	b.w	8080acc <set_system_mode>
 8081b6a:	bf00      	nop
 8081b6c:	20000140 	.word	0x20000140

08081b70 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8081b70:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8081b72:	2000      	movs	r0, #0
 8081b74:	f7ff f81e 	bl	8080bb4 <spark_sync_time_pending>
 8081b78:	b128      	cbz	r0, 8081b86 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081b7a:	f7ff f80b 	bl	8080b94 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8081b7e:	f080 0001 	eor.w	r0, r0, #1
 8081b82:	b2c0      	uxtb	r0, r0
 8081b84:	bd08      	pop	{r3, pc}
 8081b86:	2001      	movs	r0, #1
    }
 8081b88:	bd08      	pop	{r3, pc}

08081b8a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8081b8a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8081b8c:	2000      	movs	r0, #0
 8081b8e:	f7fe fe65 	bl	808085c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8081b92:	4604      	mov	r4, r0
 8081b94:	b968      	cbnz	r0, 8081bb2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8081b96:	f7fe ff91 	bl	8080abc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8081b9a:	2801      	cmp	r0, #1
 8081b9c:	d10b      	bne.n	8081bb6 <_ZN9TimeClass7isValidEv+0x2c>
 8081b9e:	4620      	mov	r0, r4
 8081ba0:	f7fe ffbc 	bl	8080b1c <system_thread_get_state>
 8081ba4:	b938      	cbnz	r0, 8081bb6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8081ba6:	f7ff ffe3 	bl	8081b70 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8081baa:	b930      	cbnz	r0, 8081bba <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8081bac:	f7fe ffe2 	bl	8080b74 <spark_process>
 8081bb0:	e7f9      	b.n	8081ba6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8081bb2:	2001      	movs	r0, #1
 8081bb4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8081bb6:	2000      	movs	r0, #0
 8081bb8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8081bba:	f7ff ffd9 	bl	8081b70 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8081bbe:	2000      	movs	r0, #0
 8081bc0:	f7fe fe4c 	bl	808085c <HAL_RTC_Time_Is_Valid>
 8081bc4:	3000      	adds	r0, #0
 8081bc6:	bf18      	it	ne
 8081bc8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8081bca:	bd10      	pop	{r4, pc}

08081bcc <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8081bcc:	b508      	push	{r3, lr}
    (void)isValid();
 8081bce:	f7ff ffdc 	bl	8081b8a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8081bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8081bd6:	f7fe be39 	b.w	808084c <HAL_RTC_Get_UnixTime>
	...

08081bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081bdc:	4b02      	ldr	r3, [pc, #8]	; (8081be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081bde:	681a      	ldr	r2, [r3, #0]
 8081be0:	4b02      	ldr	r3, [pc, #8]	; (8081bec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081be2:	601a      	str	r2, [r3, #0]
 8081be4:	4770      	bx	lr
 8081be6:	bf00      	nop
 8081be8:	2000002c 	.word	0x2000002c
 8081bec:	20000148 	.word	0x20000148

08081bf0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8081bf0:	4770      	bx	lr

08081bf2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081bf2:	7441      	strb	r1, [r0, #17]
 8081bf4:	4770      	bx	lr

08081bf6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8081bf6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8081bf8:	7c00      	ldrb	r0, [r0, #16]
 8081bfa:	f7fe ff27 	bl	8080a4c <HAL_USART_Available_Data_For_Write>
}
 8081bfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081c02:	bd08      	pop	{r3, pc}

08081c04 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081c04:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8081c06:	7c00      	ldrb	r0, [r0, #16]
 8081c08:	f7fe fef8 	bl	80809fc <HAL_USART_Available_Data>
}
 8081c0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081c10:	bd08      	pop	{r3, pc}

08081c12 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8081c12:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8081c14:	7c00      	ldrb	r0, [r0, #16]
 8081c16:	f7fe ff01 	bl	8080a1c <HAL_USART_Peek_Data>
}
 8081c1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081c1e:	bf28      	it	cs
 8081c20:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081c24:	bd08      	pop	{r3, pc}

08081c26 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8081c26:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8081c28:	7c00      	ldrb	r0, [r0, #16]
 8081c2a:	f7fe feef 	bl	8080a0c <HAL_USART_Read_Data>
}
 8081c2e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081c32:	bf28      	it	cs
 8081c34:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081c38:	bd08      	pop	{r3, pc}

08081c3a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8081c3a:	7c00      	ldrb	r0, [r0, #16]
 8081c3c:	f7fe bef6 	b.w	8080a2c <HAL_USART_Flush_Data>

08081c40 <_ZN11USARTSerialD0Ev>:
 8081c40:	b510      	push	{r4, lr}
 8081c42:	4604      	mov	r4, r0
 8081c44:	2114      	movs	r1, #20
 8081c46:	f000 face 	bl	80821e6 <_ZdlPvj>
 8081c4a:	4620      	mov	r0, r4
 8081c4c:	bd10      	pop	{r4, pc}

08081c4e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8081c4e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081c50:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8081c52:	4604      	mov	r4, r0
 8081c54:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081c56:	b925      	cbnz	r5, 8081c62 <_ZN11USARTSerial5writeEh+0x14>
 8081c58:	7c00      	ldrb	r0, [r0, #16]
 8081c5a:	f7fe fef7 	bl	8080a4c <HAL_USART_Available_Data_For_Write>
 8081c5e:	2800      	cmp	r0, #0
 8081c60:	dd05      	ble.n	8081c6e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081c62:	4631      	mov	r1, r6
 8081c64:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081c6a:	f7fe bebf 	b.w	80809ec <HAL_USART_Write_Data>
  }
  return 0;
}
 8081c6e:	4628      	mov	r0, r5
 8081c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08081c74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081c74:	b510      	push	{r4, lr}
 8081c76:	4604      	mov	r4, r0
 8081c78:	4608      	mov	r0, r1
 8081c7a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081c7c:	2200      	movs	r2, #0
 8081c7e:	6062      	str	r2, [r4, #4]
 8081c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081c84:	60a2      	str	r2, [r4, #8]
 8081c86:	4a05      	ldr	r2, [pc, #20]	; (8081c9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8081c88:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081c8a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8081c8c:	2201      	movs	r2, #1
 8081c8e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8081c90:	461a      	mov	r2, r3
 8081c92:	f7fe fea3 	bl	80809dc <HAL_USART_Init>
}
 8081c96:	4620      	mov	r0, r4
 8081c98:	bd10      	pop	{r4, pc}
 8081c9a:	bf00      	nop
 8081c9c:	080837ec 	.word	0x080837ec

08081ca0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8081ca0:	7c00      	ldrb	r0, [r0, #16]
 8081ca2:	f7fe becb 	b.w	8080a3c <HAL_USART_Is_Enabled>
	...

08081ca8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081ca8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8081caa:	4d0c      	ldr	r5, [pc, #48]	; (8081cdc <_Z22__fetch_global_Serial1v+0x34>)
 8081cac:	6829      	ldr	r1, [r5, #0]
 8081cae:	f011 0401 	ands.w	r4, r1, #1
 8081cb2:	d111      	bne.n	8081cd8 <_Z22__fetch_global_Serial1v+0x30>
 8081cb4:	4628      	mov	r0, r5
 8081cb6:	f7fe f9f6 	bl	80800a6 <__cxa_guard_acquire>
 8081cba:	b168      	cbz	r0, 8081cd8 <_Z22__fetch_global_Serial1v+0x30>
 8081cbc:	4a08      	ldr	r2, [pc, #32]	; (8081ce0 <_Z22__fetch_global_Serial1v+0x38>)
 8081cbe:	4621      	mov	r1, r4
 8081cc0:	4b08      	ldr	r3, [pc, #32]	; (8081ce4 <_Z22__fetch_global_Serial1v+0x3c>)
 8081cc2:	4809      	ldr	r0, [pc, #36]	; (8081ce8 <_Z22__fetch_global_Serial1v+0x40>)
 8081cc4:	f7ff ffd6 	bl	8081c74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8081cc8:	4628      	mov	r0, r5
 8081cca:	f7fe f9f1 	bl	80800b0 <__cxa_guard_release>
 8081cce:	4a07      	ldr	r2, [pc, #28]	; (8081cec <_Z22__fetch_global_Serial1v+0x44>)
 8081cd0:	4907      	ldr	r1, [pc, #28]	; (8081cf0 <_Z22__fetch_global_Serial1v+0x48>)
 8081cd2:	4805      	ldr	r0, [pc, #20]	; (8081ce8 <_Z22__fetch_global_Serial1v+0x40>)
 8081cd4:	f000 fa82 	bl	80821dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081cd8:	4803      	ldr	r0, [pc, #12]	; (8081ce8 <_Z22__fetch_global_Serial1v+0x40>)
 8081cda:	bd38      	pop	{r3, r4, r5, pc}
 8081cdc:	200001e4 	.word	0x200001e4
 8081ce0:	200001e8 	.word	0x200001e8
 8081ce4:	20000160 	.word	0x20000160
 8081ce8:	2000014c 	.word	0x2000014c
 8081cec:	20000094 	.word	0x20000094
 8081cf0:	08081bf1 	.word	0x08081bf1

08081cf4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081cf4:	7441      	strb	r1, [r0, #17]
 8081cf6:	4770      	bx	lr

08081cf8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081cf8:	4770      	bx	lr

08081cfa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8081cfa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8081cfc:	2100      	movs	r1, #0
 8081cfe:	7c00      	ldrb	r0, [r0, #16]
 8081d00:	f7fe fec4 	bl	8080a8c <HAL_USB_USART_Receive_Data>
}
 8081d04:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081d08:	bf28      	it	cs
 8081d0a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081d0e:	bd08      	pop	{r3, pc}

08081d10 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8081d10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8081d12:	2101      	movs	r1, #1
 8081d14:	7c00      	ldrb	r0, [r0, #16]
 8081d16:	f7fe feb9 	bl	8080a8c <HAL_USB_USART_Receive_Data>
}
 8081d1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081d1e:	bf28      	it	cs
 8081d20:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081d24:	bd08      	pop	{r3, pc}

08081d26 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8081d26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081d28:	7c00      	ldrb	r0, [r0, #16]
 8081d2a:	f7fe fea7 	bl	8080a7c <HAL_USB_USART_Available_Data_For_Write>
}
 8081d2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081d32:	bd08      	pop	{r3, pc}

08081d34 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8081d34:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8081d36:	7c00      	ldrb	r0, [r0, #16]
 8081d38:	f7fe fe98 	bl	8080a6c <HAL_USB_USART_Available_Data>
}
 8081d3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081d40:	bd08      	pop	{r3, pc}

08081d42 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081d42:	7c00      	ldrb	r0, [r0, #16]
 8081d44:	f7fe beb2 	b.w	8080aac <HAL_USB_USART_Flush_Data>

08081d48 <_ZN9USBSerialD0Ev>:
 8081d48:	b510      	push	{r4, lr}
 8081d4a:	4604      	mov	r4, r0
 8081d4c:	2114      	movs	r1, #20
 8081d4e:	f000 fa4a 	bl	80821e6 <_ZdlPvj>
 8081d52:	4620      	mov	r0, r4
 8081d54:	bd10      	pop	{r4, pc}

08081d56 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081d56:	b538      	push	{r3, r4, r5, lr}
 8081d58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081d5a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081d5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081d5e:	f7fe fe8d 	bl	8080a7c <HAL_USB_USART_Available_Data_For_Write>
 8081d62:	2800      	cmp	r0, #0
 8081d64:	dc01      	bgt.n	8081d6a <_ZN9USBSerial5writeEh+0x14>
 8081d66:	7c60      	ldrb	r0, [r4, #17]
 8081d68:	b128      	cbz	r0, 8081d76 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8081d6a:	4629      	mov	r1, r5
 8081d6c:	7c20      	ldrb	r0, [r4, #16]
 8081d6e:	f7fe fe95 	bl	8080a9c <HAL_USB_USART_Send_Data>
 8081d72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8081d76:	bd38      	pop	{r3, r4, r5, pc}

08081d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081d78:	b510      	push	{r4, lr}
 8081d7a:	4604      	mov	r4, r0
 8081d7c:	2300      	movs	r3, #0
 8081d7e:	6063      	str	r3, [r4, #4]
 8081d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081d84:	60a3      	str	r3, [r4, #8]
 8081d86:	4b05      	ldr	r3, [pc, #20]	; (8081d9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081d88:	4608      	mov	r0, r1
 8081d8a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8081d8c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8081d8e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081d90:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081d92:	4611      	mov	r1, r2
 8081d94:	f7fe fe62 	bl	8080a5c <HAL_USB_USART_Init>
}
 8081d98:	4620      	mov	r0, r4
 8081d9a:	bd10      	pop	{r4, pc}
 8081d9c:	0808381c 	.word	0x0808381c

08081da0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081da0:	b510      	push	{r4, lr}
 8081da2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081da4:	2214      	movs	r2, #20
 8081da6:	2100      	movs	r1, #0
 8081da8:	f001 fa49 	bl	808323e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081dac:	4b05      	ldr	r3, [pc, #20]	; (8081dc4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081dae:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081db0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081db2:	4b05      	ldr	r3, [pc, #20]	; (8081dc8 <_Z19acquireSerialBufferv+0x28>)
 8081db4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081db6:	f240 1301 	movw	r3, #257	; 0x101
 8081dba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081dbc:	2381      	movs	r3, #129	; 0x81
 8081dbe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081dc0:	bd10      	pop	{r4, pc}
 8081dc2:	bf00      	nop
 8081dc4:	200002f1 	.word	0x200002f1
 8081dc8:	20000270 	.word	0x20000270

08081dcc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081dcc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081dce:	4d0e      	ldr	r5, [pc, #56]	; (8081e08 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081dd0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081dd2:	a801      	add	r0, sp, #4
 8081dd4:	f7ff ffe4 	bl	8081da0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081dd8:	6829      	ldr	r1, [r5, #0]
 8081dda:	f011 0401 	ands.w	r4, r1, #1
 8081dde:	d110      	bne.n	8081e02 <_Z16_fetch_usbserialv+0x36>
 8081de0:	4628      	mov	r0, r5
 8081de2:	f7fe f960 	bl	80800a6 <__cxa_guard_acquire>
 8081de6:	b160      	cbz	r0, 8081e02 <_Z16_fetch_usbserialv+0x36>
 8081de8:	aa01      	add	r2, sp, #4
 8081dea:	4621      	mov	r1, r4
 8081dec:	4807      	ldr	r0, [pc, #28]	; (8081e0c <_Z16_fetch_usbserialv+0x40>)
 8081dee:	f7ff ffc3 	bl	8081d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081df2:	4628      	mov	r0, r5
 8081df4:	f7fe f95c 	bl	80800b0 <__cxa_guard_release>
 8081df8:	4a05      	ldr	r2, [pc, #20]	; (8081e10 <_Z16_fetch_usbserialv+0x44>)
 8081dfa:	4906      	ldr	r1, [pc, #24]	; (8081e14 <_Z16_fetch_usbserialv+0x48>)
 8081dfc:	4803      	ldr	r0, [pc, #12]	; (8081e0c <_Z16_fetch_usbserialv+0x40>)
 8081dfe:	f000 f9ed 	bl	80821dc <__aeabi_atexit>
	return _usbserial;
}
 8081e02:	4802      	ldr	r0, [pc, #8]	; (8081e0c <_Z16_fetch_usbserialv+0x40>)
 8081e04:	b007      	add	sp, #28
 8081e06:	bd30      	pop	{r4, r5, pc}
 8081e08:	2000026c 	.word	0x2000026c
 8081e0c:	200003f4 	.word	0x200003f4
 8081e10:	20000094 	.word	0x20000094
 8081e14:	08081cf9 	.word	0x08081cf9

08081e18 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081e18:	b510      	push	{r4, lr}
 8081e1a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081e1c:	2214      	movs	r2, #20
 8081e1e:	2100      	movs	r1, #0
 8081e20:	f001 fa0d 	bl	808323e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081e24:	4b05      	ldr	r3, [pc, #20]	; (8081e3c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081e26:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081e28:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081e2a:	4b05      	ldr	r3, [pc, #20]	; (8081e40 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081e2c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081e2e:	f240 1301 	movw	r3, #257	; 0x101
 8081e32:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081e34:	2381      	movs	r3, #129	; 0x81
 8081e36:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081e38:	bd10      	pop	{r4, pc}
 8081e3a:	bf00      	nop
 8081e3c:	200004a4 	.word	0x200004a4
 8081e40:	2000040c 	.word	0x2000040c

08081e44 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081e44:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081e46:	4c0e      	ldr	r4, [pc, #56]	; (8081e80 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081e48:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081e4a:	a801      	add	r0, sp, #4
 8081e4c:	f7ff ffe4 	bl	8081e18 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081e50:	6823      	ldr	r3, [r4, #0]
 8081e52:	07db      	lsls	r3, r3, #31
 8081e54:	d410      	bmi.n	8081e78 <_Z17_fetch_usbserial1v+0x34>
 8081e56:	4620      	mov	r0, r4
 8081e58:	f7fe f925 	bl	80800a6 <__cxa_guard_acquire>
 8081e5c:	b160      	cbz	r0, 8081e78 <_Z17_fetch_usbserial1v+0x34>
 8081e5e:	aa01      	add	r2, sp, #4
 8081e60:	2101      	movs	r1, #1
 8081e62:	4808      	ldr	r0, [pc, #32]	; (8081e84 <_Z17_fetch_usbserial1v+0x40>)
 8081e64:	f7ff ff88 	bl	8081d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081e68:	4620      	mov	r0, r4
 8081e6a:	f7fe f921 	bl	80800b0 <__cxa_guard_release>
 8081e6e:	4a06      	ldr	r2, [pc, #24]	; (8081e88 <_Z17_fetch_usbserial1v+0x44>)
 8081e70:	4906      	ldr	r1, [pc, #24]	; (8081e8c <_Z17_fetch_usbserial1v+0x48>)
 8081e72:	4804      	ldr	r0, [pc, #16]	; (8081e84 <_Z17_fetch_usbserial1v+0x40>)
 8081e74:	f000 f9b2 	bl	80821dc <__aeabi_atexit>
  return _usbserial1;
}
 8081e78:	4802      	ldr	r0, [pc, #8]	; (8081e84 <_Z17_fetch_usbserial1v+0x40>)
 8081e7a:	b006      	add	sp, #24
 8081e7c:	bd10      	pop	{r4, pc}
 8081e7e:	bf00      	nop
 8081e80:	20000408 	.word	0x20000408
 8081e84:	20000490 	.word	0x20000490
 8081e88:	20000094 	.word	0x20000094
 8081e8c:	08081cf9 	.word	0x08081cf9

08081e90 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081e90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081e92:	4b18      	ldr	r3, [pc, #96]	; (8081ef4 <serialEventRun+0x64>)
 8081e94:	b133      	cbz	r3, 8081ea4 <serialEventRun+0x14>
 8081e96:	f7ff ff99 	bl	8081dcc <_Z16_fetch_usbserialv>
 8081e9a:	6803      	ldr	r3, [r0, #0]
 8081e9c:	691b      	ldr	r3, [r3, #16]
 8081e9e:	4798      	blx	r3
 8081ea0:	2800      	cmp	r0, #0
 8081ea2:	dc1e      	bgt.n	8081ee2 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081ea4:	4b14      	ldr	r3, [pc, #80]	; (8081ef8 <serialEventRun+0x68>)
 8081ea6:	b133      	cbz	r3, 8081eb6 <serialEventRun+0x26>
 8081ea8:	f7ff fefe 	bl	8081ca8 <_Z22__fetch_global_Serial1v>
 8081eac:	6803      	ldr	r3, [r0, #0]
 8081eae:	691b      	ldr	r3, [r3, #16]
 8081eb0:	4798      	blx	r3
 8081eb2:	2800      	cmp	r0, #0
 8081eb4:	dc18      	bgt.n	8081ee8 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8081eb6:	4b11      	ldr	r3, [pc, #68]	; (8081efc <serialEventRun+0x6c>)
 8081eb8:	b10b      	cbz	r3, 8081ebe <serialEventRun+0x2e>
 8081eba:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8081ebe:	4b10      	ldr	r3, [pc, #64]	; (8081f00 <serialEventRun+0x70>)
 8081ec0:	b10b      	cbz	r3, 8081ec6 <serialEventRun+0x36>
 8081ec2:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8081ec6:	4b0f      	ldr	r3, [pc, #60]	; (8081f04 <serialEventRun+0x74>)
 8081ec8:	b10b      	cbz	r3, 8081ece <serialEventRun+0x3e>
 8081eca:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081ece:	4b0e      	ldr	r3, [pc, #56]	; (8081f08 <serialEventRun+0x78>)
 8081ed0:	b17b      	cbz	r3, 8081ef2 <serialEventRun+0x62>
 8081ed2:	f7ff ffb7 	bl	8081e44 <_Z17_fetch_usbserial1v>
 8081ed6:	6803      	ldr	r3, [r0, #0]
 8081ed8:	691b      	ldr	r3, [r3, #16]
 8081eda:	4798      	blx	r3
 8081edc:	2800      	cmp	r0, #0
 8081ede:	dc06      	bgt.n	8081eee <serialEventRun+0x5e>
 8081ee0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081ee2:	f3af 8000 	nop.w
 8081ee6:	e7dd      	b.n	8081ea4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8081ee8:	f3af 8000 	nop.w
 8081eec:	e7e3      	b.n	8081eb6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8081eee:	f3af 8000 	nop.w
 8081ef2:	bd08      	pop	{r3, pc}
	...

08081f0c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081f0c:	b508      	push	{r3, lr}
	serialEventRun();
 8081f0e:	f7ff ffbf 	bl	8081e90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081f12:	f7fe fc93 	bl	808083c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081f16:	4b01      	ldr	r3, [pc, #4]	; (8081f1c <_post_loop+0x10>)
 8081f18:	6018      	str	r0, [r3, #0]
 8081f1a:	bd08      	pop	{r3, pc}
 8081f1c:	200005b0 	.word	0x200005b0

08081f20 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081f20:	4802      	ldr	r0, [pc, #8]	; (8081f2c <_Z33system_initialize_user_backup_ramv+0xc>)
 8081f22:	4a03      	ldr	r2, [pc, #12]	; (8081f30 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081f24:	4903      	ldr	r1, [pc, #12]	; (8081f34 <_Z33system_initialize_user_backup_ramv+0x14>)
 8081f26:	1a12      	subs	r2, r2, r0
 8081f28:	f001 b97e 	b.w	8083228 <memcpy>
 8081f2c:	40024000 	.word	0x40024000
 8081f30:	40024004 	.word	0x40024004
 8081f34:	080838f0 	.word	0x080838f0

08081f38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081f38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081f3a:	2300      	movs	r3, #0
 8081f3c:	9300      	str	r3, [sp, #0]
 8081f3e:	461a      	mov	r2, r3
 8081f40:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081f44:	f7fe fdfc 	bl	8080b40 <system_ctrl_set_result>
}
 8081f48:	b003      	add	sp, #12
 8081f4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081f50 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081f50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081f52:	8843      	ldrh	r3, [r0, #2]
 8081f54:	2b0a      	cmp	r3, #10
 8081f56:	d008      	beq.n	8081f6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081f58:	2b50      	cmp	r3, #80	; 0x50
 8081f5a:	d109      	bne.n	8081f70 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081f5c:	4b09      	ldr	r3, [pc, #36]	; (8081f84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081f5e:	681b      	ldr	r3, [r3, #0]
 8081f60:	b13b      	cbz	r3, 8081f72 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081f62:	b003      	add	sp, #12
 8081f64:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8081f68:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8081f6a:	f7ff ffe5 	bl	8081f38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8081f6e:	e006      	b.n	8081f7e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081f70:	2300      	movs	r3, #0
 8081f72:	9300      	str	r3, [sp, #0]
 8081f74:	461a      	mov	r2, r3
 8081f76:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081f7a:	f7fe fde1 	bl	8080b40 <system_ctrl_set_result>
        break;
    }
}
 8081f7e:	b003      	add	sp, #12
 8081f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8081f84:	200005a8 	.word	0x200005a8

08081f88 <module_user_init_hook>:

void module_user_init_hook()
{
 8081f88:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081f8a:	4c10      	ldr	r4, [pc, #64]	; (8081fcc <module_user_init_hook+0x44>)
 8081f8c:	4d10      	ldr	r5, [pc, #64]	; (8081fd0 <module_user_init_hook+0x48>)
 8081f8e:	6823      	ldr	r3, [r4, #0]
 8081f90:	42ab      	cmp	r3, r5
 8081f92:	4b10      	ldr	r3, [pc, #64]	; (8081fd4 <module_user_init_hook+0x4c>)
 8081f94:	bf0c      	ite	eq
 8081f96:	2201      	moveq	r2, #1
 8081f98:	2200      	movne	r2, #0
 8081f9a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081f9c:	d002      	beq.n	8081fa4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8081f9e:	f7ff ffbf 	bl	8081f20 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081fa2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081fa4:	f7fe fc42 	bl	808082c <HAL_RNG_GetRandomNumber>
 8081fa8:	4604      	mov	r4, r0
    srand(seed);
 8081faa:	f001 f951 	bl	8083250 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8081fae:	4b0a      	ldr	r3, [pc, #40]	; (8081fd8 <module_user_init_hook+0x50>)
 8081fb0:	b113      	cbz	r3, 8081fb8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8081fb2:	4620      	mov	r0, r4
 8081fb4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081fb8:	2100      	movs	r1, #0
 8081fba:	4807      	ldr	r0, [pc, #28]	; (8081fd8 <module_user_init_hook+0x50>)
 8081fbc:	f7fe fe02 	bl	8080bc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081fc4:	2100      	movs	r1, #0
 8081fc6:	4805      	ldr	r0, [pc, #20]	; (8081fdc <module_user_init_hook+0x54>)
 8081fc8:	f7fe bdb0 	b.w	8080b2c <system_ctrl_set_app_request_handler>
 8081fcc:	40024000 	.word	0x40024000
 8081fd0:	9a271c1e 	.word	0x9a271c1e
 8081fd4:	200005ac 	.word	0x200005ac
 8081fd8:	00000000 	.word	0x00000000
 8081fdc:	08081f51 	.word	0x08081f51

08081fe0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8081fe0:	b510      	push	{r4, lr}
 8081fe2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8081fe4:	480f      	ldr	r0, [pc, #60]	; (8082024 <pinAvailable+0x44>)
 8081fe6:	f7ff fd2d 	bl	8081a44 <_ZN8SPIClass9isEnabledEv>
 8081fea:	b128      	cbz	r0, 8081ff8 <pinAvailable+0x18>
 8081fec:	f1a4 030d 	sub.w	r3, r4, #13
 8081ff0:	2b02      	cmp	r3, #2
 8081ff2:	d801      	bhi.n	8081ff8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8081ff4:	2000      	movs	r0, #0
 8081ff6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8081ff8:	f000 f86a 	bl	80820d0 <_Z19__fetch_global_Wirev>
 8081ffc:	f7ff fb91 	bl	8081722 <_ZN7TwoWire9isEnabledEv>
 8082000:	b108      	cbz	r0, 8082006 <pinAvailable+0x26>
 8082002:	2c01      	cmp	r4, #1
 8082004:	d9f6      	bls.n	8081ff4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082006:	f7ff fe4f 	bl	8081ca8 <_Z22__fetch_global_Serial1v>
 808200a:	f7ff fe49 	bl	8081ca0 <_ZN11USARTSerial9isEnabledEv>
 808200e:	b118      	cbz	r0, 8082018 <pinAvailable+0x38>
 8082010:	f1a4 0312 	sub.w	r3, r4, #18
 8082014:	2b01      	cmp	r3, #1
 8082016:	d9ed      	bls.n	8081ff4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082018:	2c2e      	cmp	r4, #46	; 0x2e
 808201a:	bf8c      	ite	hi
 808201c:	2000      	movhi	r0, #0
 808201e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082020:	bd10      	pop	{r4, pc}
 8082022:	bf00      	nop
 8082024:	200005ec 	.word	0x200005ec

08082028 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082028:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808202a:	b538      	push	{r3, r4, r5, lr}
 808202c:	4604      	mov	r4, r0
 808202e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082030:	d80a      	bhi.n	8082048 <pinMode+0x20>
 8082032:	29ff      	cmp	r1, #255	; 0xff
 8082034:	d008      	beq.n	8082048 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082036:	f7ff ffd3 	bl	8081fe0 <pinAvailable>
 808203a:	b128      	cbz	r0, 8082048 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808203c:	4629      	mov	r1, r5
 808203e:	4620      	mov	r0, r4
}
 8082040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082044:	f7fe bc2a 	b.w	808089c <HAL_Pin_Mode>
 8082048:	bd38      	pop	{r3, r4, r5, pc}

0808204a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808204a:	b538      	push	{r3, r4, r5, lr}
 808204c:	4604      	mov	r4, r0
 808204e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082050:	f7fe fc2c 	bl	80808ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082054:	28ff      	cmp	r0, #255	; 0xff
 8082056:	d010      	beq.n	808207a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082058:	2806      	cmp	r0, #6
 808205a:	d804      	bhi.n	8082066 <digitalWrite+0x1c>
 808205c:	234d      	movs	r3, #77	; 0x4d
 808205e:	fa23 f000 	lsr.w	r0, r3, r0
 8082062:	07c3      	lsls	r3, r0, #31
 8082064:	d409      	bmi.n	808207a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082066:	4620      	mov	r0, r4
 8082068:	f7ff ffba 	bl	8081fe0 <pinAvailable>
 808206c:	b128      	cbz	r0, 808207a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808206e:	4629      	mov	r1, r5
 8082070:	4620      	mov	r0, r4
}
 8082072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082076:	f7fe bc21 	b.w	80808bc <HAL_GPIO_Write>
 808207a:	bd38      	pop	{r3, r4, r5, pc}

0808207c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808207c:	b510      	push	{r4, lr}
 808207e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082080:	f7fe fc14 	bl	80808ac <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8082084:	3804      	subs	r0, #4
 8082086:	b2c0      	uxtb	r0, r0
 8082088:	2801      	cmp	r0, #1
 808208a:	d908      	bls.n	808209e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808208c:	4620      	mov	r0, r4
 808208e:	f7ff ffa7 	bl	8081fe0 <pinAvailable>
 8082092:	b120      	cbz	r0, 808209e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082094:	4620      	mov	r0, r4
}
 8082096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808209a:	f7fe bc17 	b.w	80808cc <HAL_GPIO_Read>
}
 808209e:	2000      	movs	r0, #0
 80820a0:	bd10      	pop	{r4, pc}

080820a2 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80820a2:	b510      	push	{r4, lr}
 80820a4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80820a6:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80820a8:	bf9c      	itt	ls
 80820aa:	340a      	addls	r4, #10
 80820ac:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80820ae:	4620      	mov	r0, r4
 80820b0:	f7ff ff96 	bl	8081fe0 <pinAvailable>
 80820b4:	b150      	cbz	r0, 80820cc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80820b6:	2103      	movs	r1, #3
 80820b8:	4620      	mov	r0, r4
 80820ba:	f7fe fbe7 	bl	808088c <HAL_Validate_Pin_Function>
 80820be:	2803      	cmp	r0, #3
 80820c0:	d104      	bne.n	80820cc <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80820c2:	4620      	mov	r0, r4
}
 80820c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80820c8:	f7fe bc08 	b.w	80808dc <HAL_ADC_Read>
}
 80820cc:	2000      	movs	r0, #0
 80820ce:	bd10      	pop	{r4, pc}

080820d0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80820d0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80820d2:	4d0b      	ldr	r5, [pc, #44]	; (8082100 <_Z19__fetch_global_Wirev+0x30>)
 80820d4:	6829      	ldr	r1, [r5, #0]
 80820d6:	f011 0401 	ands.w	r4, r1, #1
 80820da:	d10f      	bne.n	80820fc <_Z19__fetch_global_Wirev+0x2c>
 80820dc:	4628      	mov	r0, r5
 80820de:	f7fd ffe2 	bl	80800a6 <__cxa_guard_acquire>
 80820e2:	b158      	cbz	r0, 80820fc <_Z19__fetch_global_Wirev+0x2c>
 80820e4:	4621      	mov	r1, r4
 80820e6:	4807      	ldr	r0, [pc, #28]	; (8082104 <_Z19__fetch_global_Wirev+0x34>)
 80820e8:	f7ff fae4 	bl	80816b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80820ec:	4628      	mov	r0, r5
 80820ee:	f7fd ffdf 	bl	80800b0 <__cxa_guard_release>
 80820f2:	4a05      	ldr	r2, [pc, #20]	; (8082108 <_Z19__fetch_global_Wirev+0x38>)
 80820f4:	4905      	ldr	r1, [pc, #20]	; (808210c <_Z19__fetch_global_Wirev+0x3c>)
 80820f6:	4803      	ldr	r0, [pc, #12]	; (8082104 <_Z19__fetch_global_Wirev+0x34>)
 80820f8:	f000 f870 	bl	80821dc <__aeabi_atexit>
	return wire;
}
 80820fc:	4801      	ldr	r0, [pc, #4]	; (8082104 <_Z19__fetch_global_Wirev+0x34>)
 80820fe:	bd38      	pop	{r3, r4, r5, pc}
 8082100:	200005b4 	.word	0x200005b4
 8082104:	200005cc 	.word	0x200005cc
 8082108:	20000094 	.word	0x20000094
 808210c:	0808165d 	.word	0x0808165d

08082110 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8082110:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8082112:	4c0b      	ldr	r4, [pc, #44]	; (8082140 <_Z20__fetch_global_Wire3v+0x30>)
 8082114:	6823      	ldr	r3, [r4, #0]
 8082116:	07db      	lsls	r3, r3, #31
 8082118:	d40f      	bmi.n	808213a <_Z20__fetch_global_Wire3v+0x2a>
 808211a:	4620      	mov	r0, r4
 808211c:	f7fd ffc3 	bl	80800a6 <__cxa_guard_acquire>
 8082120:	b158      	cbz	r0, 808213a <_Z20__fetch_global_Wire3v+0x2a>
 8082122:	2102      	movs	r1, #2
 8082124:	4807      	ldr	r0, [pc, #28]	; (8082144 <_Z20__fetch_global_Wire3v+0x34>)
 8082126:	f7ff fac5 	bl	80816b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808212a:	4620      	mov	r0, r4
 808212c:	f7fd ffc0 	bl	80800b0 <__cxa_guard_release>
 8082130:	4a05      	ldr	r2, [pc, #20]	; (8082148 <_Z20__fetch_global_Wire3v+0x38>)
 8082132:	4906      	ldr	r1, [pc, #24]	; (808214c <_Z20__fetch_global_Wire3v+0x3c>)
 8082134:	4803      	ldr	r0, [pc, #12]	; (8082144 <_Z20__fetch_global_Wire3v+0x34>)
 8082136:	f000 f851 	bl	80821dc <__aeabi_atexit>
	return wire;
}
 808213a:	4802      	ldr	r0, [pc, #8]	; (8082144 <_Z20__fetch_global_Wire3v+0x34>)
 808213c:	bd10      	pop	{r4, pc}
 808213e:	bf00      	nop
 8082140:	200005e0 	.word	0x200005e0
 8082144:	200005b8 	.word	0x200005b8
 8082148:	20000094 	.word	0x20000094
 808214c:	0808165d 	.word	0x0808165d

08082150 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8082150:	b513      	push	{r0, r1, r4, lr}
 8082152:	4c08      	ldr	r4, [pc, #32]	; (8082174 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082154:	2300      	movs	r3, #0
 8082156:	461a      	mov	r2, r3
 8082158:	4619      	mov	r1, r3
 808215a:	9300      	str	r3, [sp, #0]
 808215c:	4620      	mov	r0, r4
 808215e:	f7ff fb39 	bl	80817d4 <_ZN9IPAddressC1Ehhhh>
 8082162:	4620      	mov	r0, r4
 8082164:	4a04      	ldr	r2, [pc, #16]	; (8082178 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082166:	4905      	ldr	r1, [pc, #20]	; (808217c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082168:	b002      	add	sp, #8
 808216a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808216e:	f000 b835 	b.w	80821dc <__aeabi_atexit>
 8082172:	bf00      	nop
 8082174:	200005e4 	.word	0x200005e4
 8082178:	20000094 	.word	0x20000094
 808217c:	0808174f 	.word	0x0808174f

08082180 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082180:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082182:	4e11      	ldr	r6, [pc, #68]	; (80821c8 <_GLOBAL__sub_I_SPI+0x48>)
 8082184:	4d11      	ldr	r5, [pc, #68]	; (80821cc <_GLOBAL__sub_I_SPI+0x4c>)
 8082186:	4c12      	ldr	r4, [pc, #72]	; (80821d0 <_GLOBAL__sub_I_SPI+0x50>)
 8082188:	2100      	movs	r1, #0
 808218a:	4630      	mov	r0, r6
 808218c:	f7ff fc46 	bl	8081a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082190:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082192:	4e10      	ldr	r6, [pc, #64]	; (80821d4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082194:	462a      	mov	r2, r5
 8082196:	4621      	mov	r1, r4
 8082198:	f000 f820 	bl	80821dc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808219c:	2101      	movs	r1, #1
 808219e:	4630      	mov	r0, r6
 80821a0:	f7ff fc3c 	bl	8081a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80821a4:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80821a6:	4e0c      	ldr	r6, [pc, #48]	; (80821d8 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80821a8:	462a      	mov	r2, r5
 80821aa:	4621      	mov	r1, r4
 80821ac:	f000 f816 	bl	80821dc <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80821b0:	2102      	movs	r1, #2
 80821b2:	4630      	mov	r0, r6
 80821b4:	f7ff fc32 	bl	8081a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80821b8:	462a      	mov	r2, r5
 80821ba:	4621      	mov	r1, r4
 80821bc:	4630      	mov	r0, r6
 80821be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80821c2:	f000 b80b 	b.w	80821dc <__aeabi_atexit>
 80821c6:	bf00      	nop
 80821c8:	200005ec 	.word	0x200005ec
 80821cc:	20000094 	.word	0x20000094
 80821d0:	08081a0d 	.word	0x08081a0d
 80821d4:	200005fc 	.word	0x200005fc
 80821d8:	2000060c 	.word	0x2000060c

080821dc <__aeabi_atexit>:
 80821dc:	460b      	mov	r3, r1
 80821de:	4601      	mov	r1, r0
 80821e0:	4618      	mov	r0, r3
 80821e2:	f001 b813 	b.w	808320c <__cxa_atexit>

080821e6 <_ZdlPvj>:
 80821e6:	f7fd bf5c 	b.w	80800a2 <_ZdlPv>

080821ea <_ZSt25__throw_bad_function_callv>:
 80821ea:	b508      	push	{r3, lr}
 80821ec:	f7fe fd62 	bl	8080cb4 <abort>

080821f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80821f0:	4b24      	ldr	r3, [pc, #144]	; (8082284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80821f2:	681a      	ldr	r2, [r3, #0]
 80821f4:	07d0      	lsls	r0, r2, #31
 80821f6:	bf5c      	itt	pl
 80821f8:	2201      	movpl	r2, #1
 80821fa:	601a      	strpl	r2, [r3, #0]
 80821fc:	4b22      	ldr	r3, [pc, #136]	; (8082288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80821fe:	681a      	ldr	r2, [r3, #0]
 8082200:	07d1      	lsls	r1, r2, #31
 8082202:	bf5c      	itt	pl
 8082204:	2201      	movpl	r2, #1
 8082206:	601a      	strpl	r2, [r3, #0]
 8082208:	4b20      	ldr	r3, [pc, #128]	; (808228c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808220a:	681a      	ldr	r2, [r3, #0]
 808220c:	07d2      	lsls	r2, r2, #31
 808220e:	bf5c      	itt	pl
 8082210:	2201      	movpl	r2, #1
 8082212:	601a      	strpl	r2, [r3, #0]
 8082214:	4b1e      	ldr	r3, [pc, #120]	; (8082290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8082216:	681a      	ldr	r2, [r3, #0]
 8082218:	07d0      	lsls	r0, r2, #31
 808221a:	bf5c      	itt	pl
 808221c:	2201      	movpl	r2, #1
 808221e:	601a      	strpl	r2, [r3, #0]
 8082220:	4b1c      	ldr	r3, [pc, #112]	; (8082294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8082222:	681a      	ldr	r2, [r3, #0]
 8082224:	07d1      	lsls	r1, r2, #31
 8082226:	bf5c      	itt	pl
 8082228:	2201      	movpl	r2, #1
 808222a:	601a      	strpl	r2, [r3, #0]
 808222c:	4b1a      	ldr	r3, [pc, #104]	; (8082298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808222e:	681a      	ldr	r2, [r3, #0]
 8082230:	07d2      	lsls	r2, r2, #31
 8082232:	bf5c      	itt	pl
 8082234:	2201      	movpl	r2, #1
 8082236:	601a      	strpl	r2, [r3, #0]
 8082238:	4b18      	ldr	r3, [pc, #96]	; (808229c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808223a:	681a      	ldr	r2, [r3, #0]
 808223c:	07d0      	lsls	r0, r2, #31
 808223e:	bf5c      	itt	pl
 8082240:	2201      	movpl	r2, #1
 8082242:	601a      	strpl	r2, [r3, #0]
 8082244:	4b16      	ldr	r3, [pc, #88]	; (80822a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8082246:	681a      	ldr	r2, [r3, #0]
 8082248:	07d1      	lsls	r1, r2, #31
 808224a:	bf5c      	itt	pl
 808224c:	2201      	movpl	r2, #1
 808224e:	601a      	strpl	r2, [r3, #0]
 8082250:	4b14      	ldr	r3, [pc, #80]	; (80822a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8082252:	681a      	ldr	r2, [r3, #0]
 8082254:	07d2      	lsls	r2, r2, #31
 8082256:	bf5c      	itt	pl
 8082258:	2201      	movpl	r2, #1
 808225a:	601a      	strpl	r2, [r3, #0]
 808225c:	4b12      	ldr	r3, [pc, #72]	; (80822a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808225e:	681a      	ldr	r2, [r3, #0]
 8082260:	07d0      	lsls	r0, r2, #31
 8082262:	bf5c      	itt	pl
 8082264:	2201      	movpl	r2, #1
 8082266:	601a      	strpl	r2, [r3, #0]
 8082268:	4b10      	ldr	r3, [pc, #64]	; (80822ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808226a:	681a      	ldr	r2, [r3, #0]
 808226c:	07d1      	lsls	r1, r2, #31
 808226e:	bf5c      	itt	pl
 8082270:	2201      	movpl	r2, #1
 8082272:	601a      	strpl	r2, [r3, #0]
 8082274:	4b0e      	ldr	r3, [pc, #56]	; (80822b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8082276:	681a      	ldr	r2, [r3, #0]
 8082278:	07d2      	lsls	r2, r2, #31
 808227a:	bf5c      	itt	pl
 808227c:	2201      	movpl	r2, #1
 808227e:	601a      	strpl	r2, [r3, #0]
 8082280:	4770      	bx	lr
 8082282:	bf00      	nop
 8082284:	20000648 	.word	0x20000648
 8082288:	20000644 	.word	0x20000644
 808228c:	20000640 	.word	0x20000640
 8082290:	2000063c 	.word	0x2000063c
 8082294:	20000638 	.word	0x20000638
 8082298:	20000634 	.word	0x20000634
 808229c:	20000630 	.word	0x20000630
 80822a0:	2000062c 	.word	0x2000062c
 80822a4:	20000628 	.word	0x20000628
 80822a8:	20000624 	.word	0x20000624
 80822ac:	20000620 	.word	0x20000620
 80822b0:	2000061c 	.word	0x2000061c

080822b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80822b4:	4b18      	ldr	r3, [pc, #96]	; (8082318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80822b6:	681a      	ldr	r2, [r3, #0]
 80822b8:	07d1      	lsls	r1, r2, #31
 80822ba:	bf5c      	itt	pl
 80822bc:	2201      	movpl	r2, #1
 80822be:	601a      	strpl	r2, [r3, #0]
 80822c0:	4b16      	ldr	r3, [pc, #88]	; (808231c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80822c2:	681a      	ldr	r2, [r3, #0]
 80822c4:	07d2      	lsls	r2, r2, #31
 80822c6:	bf5c      	itt	pl
 80822c8:	2201      	movpl	r2, #1
 80822ca:	601a      	strpl	r2, [r3, #0]
 80822cc:	4b14      	ldr	r3, [pc, #80]	; (8082320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80822ce:	681a      	ldr	r2, [r3, #0]
 80822d0:	07d0      	lsls	r0, r2, #31
 80822d2:	bf5c      	itt	pl
 80822d4:	2201      	movpl	r2, #1
 80822d6:	601a      	strpl	r2, [r3, #0]
 80822d8:	4b12      	ldr	r3, [pc, #72]	; (8082324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80822da:	681a      	ldr	r2, [r3, #0]
 80822dc:	07d1      	lsls	r1, r2, #31
 80822de:	bf5c      	itt	pl
 80822e0:	2201      	movpl	r2, #1
 80822e2:	601a      	strpl	r2, [r3, #0]
 80822e4:	4b10      	ldr	r3, [pc, #64]	; (8082328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80822e6:	681a      	ldr	r2, [r3, #0]
 80822e8:	07d2      	lsls	r2, r2, #31
 80822ea:	bf5c      	itt	pl
 80822ec:	2201      	movpl	r2, #1
 80822ee:	601a      	strpl	r2, [r3, #0]
 80822f0:	4b0e      	ldr	r3, [pc, #56]	; (808232c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80822f2:	681a      	ldr	r2, [r3, #0]
 80822f4:	07d0      	lsls	r0, r2, #31
 80822f6:	bf5c      	itt	pl
 80822f8:	2201      	movpl	r2, #1
 80822fa:	601a      	strpl	r2, [r3, #0]
 80822fc:	4b0c      	ldr	r3, [pc, #48]	; (8082330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80822fe:	681a      	ldr	r2, [r3, #0]
 8082300:	07d1      	lsls	r1, r2, #31
 8082302:	bf5c      	itt	pl
 8082304:	2201      	movpl	r2, #1
 8082306:	601a      	strpl	r2, [r3, #0]
 8082308:	4b0a      	ldr	r3, [pc, #40]	; (8082334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808230a:	681a      	ldr	r2, [r3, #0]
 808230c:	07d2      	lsls	r2, r2, #31
 808230e:	bf5c      	itt	pl
 8082310:	2201      	movpl	r2, #1
 8082312:	601a      	strpl	r2, [r3, #0]
 8082314:	4770      	bx	lr
 8082316:	bf00      	nop
 8082318:	20000668 	.word	0x20000668
 808231c:	20000664 	.word	0x20000664
 8082320:	20000660 	.word	0x20000660
 8082324:	2000065c 	.word	0x2000065c
 8082328:	20000658 	.word	0x20000658
 808232c:	20000654 	.word	0x20000654
 8082330:	20000650 	.word	0x20000650
 8082334:	2000064c 	.word	0x2000064c

08082338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082338:	4b18      	ldr	r3, [pc, #96]	; (808239c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808233a:	681a      	ldr	r2, [r3, #0]
 808233c:	07d1      	lsls	r1, r2, #31
 808233e:	bf5c      	itt	pl
 8082340:	2201      	movpl	r2, #1
 8082342:	601a      	strpl	r2, [r3, #0]
 8082344:	4b16      	ldr	r3, [pc, #88]	; (80823a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082346:	681a      	ldr	r2, [r3, #0]
 8082348:	07d2      	lsls	r2, r2, #31
 808234a:	bf5c      	itt	pl
 808234c:	2201      	movpl	r2, #1
 808234e:	601a      	strpl	r2, [r3, #0]
 8082350:	4b14      	ldr	r3, [pc, #80]	; (80823a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082352:	681a      	ldr	r2, [r3, #0]
 8082354:	07d0      	lsls	r0, r2, #31
 8082356:	bf5c      	itt	pl
 8082358:	2201      	movpl	r2, #1
 808235a:	601a      	strpl	r2, [r3, #0]
 808235c:	4b12      	ldr	r3, [pc, #72]	; (80823a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808235e:	681a      	ldr	r2, [r3, #0]
 8082360:	07d1      	lsls	r1, r2, #31
 8082362:	bf5c      	itt	pl
 8082364:	2201      	movpl	r2, #1
 8082366:	601a      	strpl	r2, [r3, #0]
 8082368:	4b10      	ldr	r3, [pc, #64]	; (80823ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808236a:	681a      	ldr	r2, [r3, #0]
 808236c:	07d2      	lsls	r2, r2, #31
 808236e:	bf5c      	itt	pl
 8082370:	2201      	movpl	r2, #1
 8082372:	601a      	strpl	r2, [r3, #0]
 8082374:	4b0e      	ldr	r3, [pc, #56]	; (80823b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082376:	681a      	ldr	r2, [r3, #0]
 8082378:	07d0      	lsls	r0, r2, #31
 808237a:	bf5c      	itt	pl
 808237c:	2201      	movpl	r2, #1
 808237e:	601a      	strpl	r2, [r3, #0]
 8082380:	4b0c      	ldr	r3, [pc, #48]	; (80823b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082382:	681a      	ldr	r2, [r3, #0]
 8082384:	07d1      	lsls	r1, r2, #31
 8082386:	bf5c      	itt	pl
 8082388:	2201      	movpl	r2, #1
 808238a:	601a      	strpl	r2, [r3, #0]
 808238c:	4b0a      	ldr	r3, [pc, #40]	; (80823b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808238e:	681a      	ldr	r2, [r3, #0]
 8082390:	07d2      	lsls	r2, r2, #31
 8082392:	bf5c      	itt	pl
 8082394:	2201      	movpl	r2, #1
 8082396:	601a      	strpl	r2, [r3, #0]
 8082398:	4770      	bx	lr
 808239a:	bf00      	nop
 808239c:	20000688 	.word	0x20000688
 80823a0:	20000684 	.word	0x20000684
 80823a4:	20000680 	.word	0x20000680
 80823a8:	2000067c 	.word	0x2000067c
 80823ac:	20000678 	.word	0x20000678
 80823b0:	20000674 	.word	0x20000674
 80823b4:	20000670 	.word	0x20000670
 80823b8:	2000066c 	.word	0x2000066c

080823bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80823bc:	4b24      	ldr	r3, [pc, #144]	; (8082450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80823be:	681a      	ldr	r2, [r3, #0]
 80823c0:	07d0      	lsls	r0, r2, #31
 80823c2:	bf5c      	itt	pl
 80823c4:	2201      	movpl	r2, #1
 80823c6:	601a      	strpl	r2, [r3, #0]
 80823c8:	4b22      	ldr	r3, [pc, #136]	; (8082454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80823ca:	681a      	ldr	r2, [r3, #0]
 80823cc:	07d1      	lsls	r1, r2, #31
 80823ce:	bf5c      	itt	pl
 80823d0:	2201      	movpl	r2, #1
 80823d2:	601a      	strpl	r2, [r3, #0]
 80823d4:	4b20      	ldr	r3, [pc, #128]	; (8082458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80823d6:	681a      	ldr	r2, [r3, #0]
 80823d8:	07d2      	lsls	r2, r2, #31
 80823da:	bf5c      	itt	pl
 80823dc:	2201      	movpl	r2, #1
 80823de:	601a      	strpl	r2, [r3, #0]
 80823e0:	4b1e      	ldr	r3, [pc, #120]	; (808245c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80823e2:	681a      	ldr	r2, [r3, #0]
 80823e4:	07d0      	lsls	r0, r2, #31
 80823e6:	bf5c      	itt	pl
 80823e8:	2201      	movpl	r2, #1
 80823ea:	601a      	strpl	r2, [r3, #0]
 80823ec:	4b1c      	ldr	r3, [pc, #112]	; (8082460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80823ee:	681a      	ldr	r2, [r3, #0]
 80823f0:	07d1      	lsls	r1, r2, #31
 80823f2:	bf5c      	itt	pl
 80823f4:	2201      	movpl	r2, #1
 80823f6:	601a      	strpl	r2, [r3, #0]
 80823f8:	4b1a      	ldr	r3, [pc, #104]	; (8082464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80823fa:	681a      	ldr	r2, [r3, #0]
 80823fc:	07d2      	lsls	r2, r2, #31
 80823fe:	bf5c      	itt	pl
 8082400:	2201      	movpl	r2, #1
 8082402:	601a      	strpl	r2, [r3, #0]
 8082404:	4b18      	ldr	r3, [pc, #96]	; (8082468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8082406:	681a      	ldr	r2, [r3, #0]
 8082408:	07d0      	lsls	r0, r2, #31
 808240a:	bf5c      	itt	pl
 808240c:	2201      	movpl	r2, #1
 808240e:	601a      	strpl	r2, [r3, #0]
 8082410:	4b16      	ldr	r3, [pc, #88]	; (808246c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8082412:	681a      	ldr	r2, [r3, #0]
 8082414:	07d1      	lsls	r1, r2, #31
 8082416:	bf5c      	itt	pl
 8082418:	2201      	movpl	r2, #1
 808241a:	601a      	strpl	r2, [r3, #0]
 808241c:	4b14      	ldr	r3, [pc, #80]	; (8082470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808241e:	681a      	ldr	r2, [r3, #0]
 8082420:	07d2      	lsls	r2, r2, #31
 8082422:	bf5c      	itt	pl
 8082424:	2201      	movpl	r2, #1
 8082426:	601a      	strpl	r2, [r3, #0]
 8082428:	4b12      	ldr	r3, [pc, #72]	; (8082474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808242a:	681a      	ldr	r2, [r3, #0]
 808242c:	07d0      	lsls	r0, r2, #31
 808242e:	bf5c      	itt	pl
 8082430:	2201      	movpl	r2, #1
 8082432:	601a      	strpl	r2, [r3, #0]
 8082434:	4b10      	ldr	r3, [pc, #64]	; (8082478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8082436:	681a      	ldr	r2, [r3, #0]
 8082438:	07d1      	lsls	r1, r2, #31
 808243a:	bf5c      	itt	pl
 808243c:	2201      	movpl	r2, #1
 808243e:	601a      	strpl	r2, [r3, #0]
 8082440:	4b0e      	ldr	r3, [pc, #56]	; (808247c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8082442:	681a      	ldr	r2, [r3, #0]
 8082444:	07d2      	lsls	r2, r2, #31
 8082446:	bf5c      	itt	pl
 8082448:	2201      	movpl	r2, #1
 808244a:	601a      	strpl	r2, [r3, #0]
 808244c:	4770      	bx	lr
 808244e:	bf00      	nop
 8082450:	200006b8 	.word	0x200006b8
 8082454:	200006b4 	.word	0x200006b4
 8082458:	200006b0 	.word	0x200006b0
 808245c:	200006ac 	.word	0x200006ac
 8082460:	200006a8 	.word	0x200006a8
 8082464:	200006a4 	.word	0x200006a4
 8082468:	200006a0 	.word	0x200006a0
 808246c:	2000069c 	.word	0x2000069c
 8082470:	20000698 	.word	0x20000698
 8082474:	20000694 	.word	0x20000694
 8082478:	20000690 	.word	0x20000690
 808247c:	2000068c 	.word	0x2000068c

08082480 <__aeabi_drsub>:
 8082480:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8082484:	e002      	b.n	808248c <__adddf3>
 8082486:	bf00      	nop

08082488 <__aeabi_dsub>:
 8082488:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808248c <__adddf3>:
 808248c:	b530      	push	{r4, r5, lr}
 808248e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8082492:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8082496:	ea94 0f05 	teq	r4, r5
 808249a:	bf08      	it	eq
 808249c:	ea90 0f02 	teqeq	r0, r2
 80824a0:	bf1f      	itttt	ne
 80824a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80824a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80824aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80824ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80824b2:	f000 80e2 	beq.w	808267a <__adddf3+0x1ee>
 80824b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80824ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80824be:	bfb8      	it	lt
 80824c0:	426d      	neglt	r5, r5
 80824c2:	dd0c      	ble.n	80824de <__adddf3+0x52>
 80824c4:	442c      	add	r4, r5
 80824c6:	ea80 0202 	eor.w	r2, r0, r2
 80824ca:	ea81 0303 	eor.w	r3, r1, r3
 80824ce:	ea82 0000 	eor.w	r0, r2, r0
 80824d2:	ea83 0101 	eor.w	r1, r3, r1
 80824d6:	ea80 0202 	eor.w	r2, r0, r2
 80824da:	ea81 0303 	eor.w	r3, r1, r3
 80824de:	2d36      	cmp	r5, #54	; 0x36
 80824e0:	bf88      	it	hi
 80824e2:	bd30      	pophi	{r4, r5, pc}
 80824e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80824e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80824ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80824f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80824f4:	d002      	beq.n	80824fc <__adddf3+0x70>
 80824f6:	4240      	negs	r0, r0
 80824f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80824fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8082500:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082504:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8082508:	d002      	beq.n	8082510 <__adddf3+0x84>
 808250a:	4252      	negs	r2, r2
 808250c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8082510:	ea94 0f05 	teq	r4, r5
 8082514:	f000 80a7 	beq.w	8082666 <__adddf3+0x1da>
 8082518:	f1a4 0401 	sub.w	r4, r4, #1
 808251c:	f1d5 0e20 	rsbs	lr, r5, #32
 8082520:	db0d      	blt.n	808253e <__adddf3+0xb2>
 8082522:	fa02 fc0e 	lsl.w	ip, r2, lr
 8082526:	fa22 f205 	lsr.w	r2, r2, r5
 808252a:	1880      	adds	r0, r0, r2
 808252c:	f141 0100 	adc.w	r1, r1, #0
 8082530:	fa03 f20e 	lsl.w	r2, r3, lr
 8082534:	1880      	adds	r0, r0, r2
 8082536:	fa43 f305 	asr.w	r3, r3, r5
 808253a:	4159      	adcs	r1, r3
 808253c:	e00e      	b.n	808255c <__adddf3+0xd0>
 808253e:	f1a5 0520 	sub.w	r5, r5, #32
 8082542:	f10e 0e20 	add.w	lr, lr, #32
 8082546:	2a01      	cmp	r2, #1
 8082548:	fa03 fc0e 	lsl.w	ip, r3, lr
 808254c:	bf28      	it	cs
 808254e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8082552:	fa43 f305 	asr.w	r3, r3, r5
 8082556:	18c0      	adds	r0, r0, r3
 8082558:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808255c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082560:	d507      	bpl.n	8082572 <__adddf3+0xe6>
 8082562:	f04f 0e00 	mov.w	lr, #0
 8082566:	f1dc 0c00 	rsbs	ip, ip, #0
 808256a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808256e:	eb6e 0101 	sbc.w	r1, lr, r1
 8082572:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8082576:	d31b      	bcc.n	80825b0 <__adddf3+0x124>
 8082578:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808257c:	d30c      	bcc.n	8082598 <__adddf3+0x10c>
 808257e:	0849      	lsrs	r1, r1, #1
 8082580:	ea5f 0030 	movs.w	r0, r0, rrx
 8082584:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8082588:	f104 0401 	add.w	r4, r4, #1
 808258c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082590:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8082594:	f080 809a 	bcs.w	80826cc <__adddf3+0x240>
 8082598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808259c:	bf08      	it	eq
 808259e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80825a2:	f150 0000 	adcs.w	r0, r0, #0
 80825a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80825aa:	ea41 0105 	orr.w	r1, r1, r5
 80825ae:	bd30      	pop	{r4, r5, pc}
 80825b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80825b4:	4140      	adcs	r0, r0
 80825b6:	eb41 0101 	adc.w	r1, r1, r1
 80825ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80825be:	f1a4 0401 	sub.w	r4, r4, #1
 80825c2:	d1e9      	bne.n	8082598 <__adddf3+0x10c>
 80825c4:	f091 0f00 	teq	r1, #0
 80825c8:	bf04      	itt	eq
 80825ca:	4601      	moveq	r1, r0
 80825cc:	2000      	moveq	r0, #0
 80825ce:	fab1 f381 	clz	r3, r1
 80825d2:	bf08      	it	eq
 80825d4:	3320      	addeq	r3, #32
 80825d6:	f1a3 030b 	sub.w	r3, r3, #11
 80825da:	f1b3 0220 	subs.w	r2, r3, #32
 80825de:	da0c      	bge.n	80825fa <__adddf3+0x16e>
 80825e0:	320c      	adds	r2, #12
 80825e2:	dd08      	ble.n	80825f6 <__adddf3+0x16a>
 80825e4:	f102 0c14 	add.w	ip, r2, #20
 80825e8:	f1c2 020c 	rsb	r2, r2, #12
 80825ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80825f0:	fa21 f102 	lsr.w	r1, r1, r2
 80825f4:	e00c      	b.n	8082610 <__adddf3+0x184>
 80825f6:	f102 0214 	add.w	r2, r2, #20
 80825fa:	bfd8      	it	le
 80825fc:	f1c2 0c20 	rsble	ip, r2, #32
 8082600:	fa01 f102 	lsl.w	r1, r1, r2
 8082604:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082608:	bfdc      	itt	le
 808260a:	ea41 010c 	orrle.w	r1, r1, ip
 808260e:	4090      	lslle	r0, r2
 8082610:	1ae4      	subs	r4, r4, r3
 8082612:	bfa2      	ittt	ge
 8082614:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8082618:	4329      	orrge	r1, r5
 808261a:	bd30      	popge	{r4, r5, pc}
 808261c:	ea6f 0404 	mvn.w	r4, r4
 8082620:	3c1f      	subs	r4, #31
 8082622:	da1c      	bge.n	808265e <__adddf3+0x1d2>
 8082624:	340c      	adds	r4, #12
 8082626:	dc0e      	bgt.n	8082646 <__adddf3+0x1ba>
 8082628:	f104 0414 	add.w	r4, r4, #20
 808262c:	f1c4 0220 	rsb	r2, r4, #32
 8082630:	fa20 f004 	lsr.w	r0, r0, r4
 8082634:	fa01 f302 	lsl.w	r3, r1, r2
 8082638:	ea40 0003 	orr.w	r0, r0, r3
 808263c:	fa21 f304 	lsr.w	r3, r1, r4
 8082640:	ea45 0103 	orr.w	r1, r5, r3
 8082644:	bd30      	pop	{r4, r5, pc}
 8082646:	f1c4 040c 	rsb	r4, r4, #12
 808264a:	f1c4 0220 	rsb	r2, r4, #32
 808264e:	fa20 f002 	lsr.w	r0, r0, r2
 8082652:	fa01 f304 	lsl.w	r3, r1, r4
 8082656:	ea40 0003 	orr.w	r0, r0, r3
 808265a:	4629      	mov	r1, r5
 808265c:	bd30      	pop	{r4, r5, pc}
 808265e:	fa21 f004 	lsr.w	r0, r1, r4
 8082662:	4629      	mov	r1, r5
 8082664:	bd30      	pop	{r4, r5, pc}
 8082666:	f094 0f00 	teq	r4, #0
 808266a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808266e:	bf06      	itte	eq
 8082670:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8082674:	3401      	addeq	r4, #1
 8082676:	3d01      	subne	r5, #1
 8082678:	e74e      	b.n	8082518 <__adddf3+0x8c>
 808267a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808267e:	bf18      	it	ne
 8082680:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082684:	d029      	beq.n	80826da <__adddf3+0x24e>
 8082686:	ea94 0f05 	teq	r4, r5
 808268a:	bf08      	it	eq
 808268c:	ea90 0f02 	teqeq	r0, r2
 8082690:	d005      	beq.n	808269e <__adddf3+0x212>
 8082692:	ea54 0c00 	orrs.w	ip, r4, r0
 8082696:	bf04      	itt	eq
 8082698:	4619      	moveq	r1, r3
 808269a:	4610      	moveq	r0, r2
 808269c:	bd30      	pop	{r4, r5, pc}
 808269e:	ea91 0f03 	teq	r1, r3
 80826a2:	bf1e      	ittt	ne
 80826a4:	2100      	movne	r1, #0
 80826a6:	2000      	movne	r0, #0
 80826a8:	bd30      	popne	{r4, r5, pc}
 80826aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80826ae:	d105      	bne.n	80826bc <__adddf3+0x230>
 80826b0:	0040      	lsls	r0, r0, #1
 80826b2:	4149      	adcs	r1, r1
 80826b4:	bf28      	it	cs
 80826b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80826ba:	bd30      	pop	{r4, r5, pc}
 80826bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80826c0:	bf3c      	itt	cc
 80826c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80826c6:	bd30      	popcc	{r4, r5, pc}
 80826c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80826cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80826d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80826d4:	f04f 0000 	mov.w	r0, #0
 80826d8:	bd30      	pop	{r4, r5, pc}
 80826da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80826de:	bf1a      	itte	ne
 80826e0:	4619      	movne	r1, r3
 80826e2:	4610      	movne	r0, r2
 80826e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80826e8:	bf1c      	itt	ne
 80826ea:	460b      	movne	r3, r1
 80826ec:	4602      	movne	r2, r0
 80826ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80826f2:	bf06      	itte	eq
 80826f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80826f8:	ea91 0f03 	teqeq	r1, r3
 80826fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8082700:	bd30      	pop	{r4, r5, pc}
 8082702:	bf00      	nop

08082704 <__aeabi_ui2d>:
 8082704:	f090 0f00 	teq	r0, #0
 8082708:	bf04      	itt	eq
 808270a:	2100      	moveq	r1, #0
 808270c:	4770      	bxeq	lr
 808270e:	b530      	push	{r4, r5, lr}
 8082710:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082714:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082718:	f04f 0500 	mov.w	r5, #0
 808271c:	f04f 0100 	mov.w	r1, #0
 8082720:	e750      	b.n	80825c4 <__adddf3+0x138>
 8082722:	bf00      	nop

08082724 <__aeabi_i2d>:
 8082724:	f090 0f00 	teq	r0, #0
 8082728:	bf04      	itt	eq
 808272a:	2100      	moveq	r1, #0
 808272c:	4770      	bxeq	lr
 808272e:	b530      	push	{r4, r5, lr}
 8082730:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082734:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082738:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808273c:	bf48      	it	mi
 808273e:	4240      	negmi	r0, r0
 8082740:	f04f 0100 	mov.w	r1, #0
 8082744:	e73e      	b.n	80825c4 <__adddf3+0x138>
 8082746:	bf00      	nop

08082748 <__aeabi_f2d>:
 8082748:	0042      	lsls	r2, r0, #1
 808274a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808274e:	ea4f 0131 	mov.w	r1, r1, rrx
 8082752:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8082756:	bf1f      	itttt	ne
 8082758:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808275c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082760:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8082764:	4770      	bxne	lr
 8082766:	f092 0f00 	teq	r2, #0
 808276a:	bf14      	ite	ne
 808276c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082770:	4770      	bxeq	lr
 8082772:	b530      	push	{r4, r5, lr}
 8082774:	f44f 7460 	mov.w	r4, #896	; 0x380
 8082778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808277c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082780:	e720      	b.n	80825c4 <__adddf3+0x138>
 8082782:	bf00      	nop

08082784 <__aeabi_ul2d>:
 8082784:	ea50 0201 	orrs.w	r2, r0, r1
 8082788:	bf08      	it	eq
 808278a:	4770      	bxeq	lr
 808278c:	b530      	push	{r4, r5, lr}
 808278e:	f04f 0500 	mov.w	r5, #0
 8082792:	e00a      	b.n	80827aa <__aeabi_l2d+0x16>

08082794 <__aeabi_l2d>:
 8082794:	ea50 0201 	orrs.w	r2, r0, r1
 8082798:	bf08      	it	eq
 808279a:	4770      	bxeq	lr
 808279c:	b530      	push	{r4, r5, lr}
 808279e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80827a2:	d502      	bpl.n	80827aa <__aeabi_l2d+0x16>
 80827a4:	4240      	negs	r0, r0
 80827a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80827aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80827ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80827b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80827b6:	f43f aedc 	beq.w	8082572 <__adddf3+0xe6>
 80827ba:	f04f 0203 	mov.w	r2, #3
 80827be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80827c2:	bf18      	it	ne
 80827c4:	3203      	addne	r2, #3
 80827c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80827ca:	bf18      	it	ne
 80827cc:	3203      	addne	r2, #3
 80827ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80827d2:	f1c2 0320 	rsb	r3, r2, #32
 80827d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80827da:	fa20 f002 	lsr.w	r0, r0, r2
 80827de:	fa01 fe03 	lsl.w	lr, r1, r3
 80827e2:	ea40 000e 	orr.w	r0, r0, lr
 80827e6:	fa21 f102 	lsr.w	r1, r1, r2
 80827ea:	4414      	add	r4, r2
 80827ec:	e6c1      	b.n	8082572 <__adddf3+0xe6>
 80827ee:	bf00      	nop

080827f0 <__aeabi_dmul>:
 80827f0:	b570      	push	{r4, r5, r6, lr}
 80827f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80827f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80827fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80827fe:	bf1d      	ittte	ne
 8082800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082804:	ea94 0f0c 	teqne	r4, ip
 8082808:	ea95 0f0c 	teqne	r5, ip
 808280c:	f000 f8de 	bleq	80829cc <__aeabi_dmul+0x1dc>
 8082810:	442c      	add	r4, r5
 8082812:	ea81 0603 	eor.w	r6, r1, r3
 8082816:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808281a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808281e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8082822:	bf18      	it	ne
 8082824:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8082828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808282c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8082830:	d038      	beq.n	80828a4 <__aeabi_dmul+0xb4>
 8082832:	fba0 ce02 	umull	ip, lr, r0, r2
 8082836:	f04f 0500 	mov.w	r5, #0
 808283a:	fbe1 e502 	umlal	lr, r5, r1, r2
 808283e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8082842:	fbe0 e503 	umlal	lr, r5, r0, r3
 8082846:	f04f 0600 	mov.w	r6, #0
 808284a:	fbe1 5603 	umlal	r5, r6, r1, r3
 808284e:	f09c 0f00 	teq	ip, #0
 8082852:	bf18      	it	ne
 8082854:	f04e 0e01 	orrne.w	lr, lr, #1
 8082858:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808285c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082860:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8082864:	d204      	bcs.n	8082870 <__aeabi_dmul+0x80>
 8082866:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808286a:	416d      	adcs	r5, r5
 808286c:	eb46 0606 	adc.w	r6, r6, r6
 8082870:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8082874:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8082878:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808287c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082880:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8082884:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082888:	bf88      	it	hi
 808288a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808288e:	d81e      	bhi.n	80828ce <__aeabi_dmul+0xde>
 8082890:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8082894:	bf08      	it	eq
 8082896:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808289a:	f150 0000 	adcs.w	r0, r0, #0
 808289e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80828a2:	bd70      	pop	{r4, r5, r6, pc}
 80828a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80828a8:	ea46 0101 	orr.w	r1, r6, r1
 80828ac:	ea40 0002 	orr.w	r0, r0, r2
 80828b0:	ea81 0103 	eor.w	r1, r1, r3
 80828b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80828b8:	bfc2      	ittt	gt
 80828ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80828be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80828c2:	bd70      	popgt	{r4, r5, r6, pc}
 80828c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80828c8:	f04f 0e00 	mov.w	lr, #0
 80828cc:	3c01      	subs	r4, #1
 80828ce:	f300 80ab 	bgt.w	8082a28 <__aeabi_dmul+0x238>
 80828d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80828d6:	bfde      	ittt	le
 80828d8:	2000      	movle	r0, #0
 80828da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80828de:	bd70      	pople	{r4, r5, r6, pc}
 80828e0:	f1c4 0400 	rsb	r4, r4, #0
 80828e4:	3c20      	subs	r4, #32
 80828e6:	da35      	bge.n	8082954 <__aeabi_dmul+0x164>
 80828e8:	340c      	adds	r4, #12
 80828ea:	dc1b      	bgt.n	8082924 <__aeabi_dmul+0x134>
 80828ec:	f104 0414 	add.w	r4, r4, #20
 80828f0:	f1c4 0520 	rsb	r5, r4, #32
 80828f4:	fa00 f305 	lsl.w	r3, r0, r5
 80828f8:	fa20 f004 	lsr.w	r0, r0, r4
 80828fc:	fa01 f205 	lsl.w	r2, r1, r5
 8082900:	ea40 0002 	orr.w	r0, r0, r2
 8082904:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8082908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808290c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8082910:	fa21 f604 	lsr.w	r6, r1, r4
 8082914:	eb42 0106 	adc.w	r1, r2, r6
 8082918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808291c:	bf08      	it	eq
 808291e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082922:	bd70      	pop	{r4, r5, r6, pc}
 8082924:	f1c4 040c 	rsb	r4, r4, #12
 8082928:	f1c4 0520 	rsb	r5, r4, #32
 808292c:	fa00 f304 	lsl.w	r3, r0, r4
 8082930:	fa20 f005 	lsr.w	r0, r0, r5
 8082934:	fa01 f204 	lsl.w	r2, r1, r4
 8082938:	ea40 0002 	orr.w	r0, r0, r2
 808293c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082940:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8082944:	f141 0100 	adc.w	r1, r1, #0
 8082948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808294c:	bf08      	it	eq
 808294e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082952:	bd70      	pop	{r4, r5, r6, pc}
 8082954:	f1c4 0520 	rsb	r5, r4, #32
 8082958:	fa00 f205 	lsl.w	r2, r0, r5
 808295c:	ea4e 0e02 	orr.w	lr, lr, r2
 8082960:	fa20 f304 	lsr.w	r3, r0, r4
 8082964:	fa01 f205 	lsl.w	r2, r1, r5
 8082968:	ea43 0302 	orr.w	r3, r3, r2
 808296c:	fa21 f004 	lsr.w	r0, r1, r4
 8082970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082974:	fa21 f204 	lsr.w	r2, r1, r4
 8082978:	ea20 0002 	bic.w	r0, r0, r2
 808297c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8082980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082984:	bf08      	it	eq
 8082986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808298a:	bd70      	pop	{r4, r5, r6, pc}
 808298c:	f094 0f00 	teq	r4, #0
 8082990:	d10f      	bne.n	80829b2 <__aeabi_dmul+0x1c2>
 8082992:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8082996:	0040      	lsls	r0, r0, #1
 8082998:	eb41 0101 	adc.w	r1, r1, r1
 808299c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80829a0:	bf08      	it	eq
 80829a2:	3c01      	subeq	r4, #1
 80829a4:	d0f7      	beq.n	8082996 <__aeabi_dmul+0x1a6>
 80829a6:	ea41 0106 	orr.w	r1, r1, r6
 80829aa:	f095 0f00 	teq	r5, #0
 80829ae:	bf18      	it	ne
 80829b0:	4770      	bxne	lr
 80829b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80829b6:	0052      	lsls	r2, r2, #1
 80829b8:	eb43 0303 	adc.w	r3, r3, r3
 80829bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80829c0:	bf08      	it	eq
 80829c2:	3d01      	subeq	r5, #1
 80829c4:	d0f7      	beq.n	80829b6 <__aeabi_dmul+0x1c6>
 80829c6:	ea43 0306 	orr.w	r3, r3, r6
 80829ca:	4770      	bx	lr
 80829cc:	ea94 0f0c 	teq	r4, ip
 80829d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80829d4:	bf18      	it	ne
 80829d6:	ea95 0f0c 	teqne	r5, ip
 80829da:	d00c      	beq.n	80829f6 <__aeabi_dmul+0x206>
 80829dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80829e0:	bf18      	it	ne
 80829e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80829e6:	d1d1      	bne.n	808298c <__aeabi_dmul+0x19c>
 80829e8:	ea81 0103 	eor.w	r1, r1, r3
 80829ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80829f0:	f04f 0000 	mov.w	r0, #0
 80829f4:	bd70      	pop	{r4, r5, r6, pc}
 80829f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80829fa:	bf06      	itte	eq
 80829fc:	4610      	moveq	r0, r2
 80829fe:	4619      	moveq	r1, r3
 8082a00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082a04:	d019      	beq.n	8082a3a <__aeabi_dmul+0x24a>
 8082a06:	ea94 0f0c 	teq	r4, ip
 8082a0a:	d102      	bne.n	8082a12 <__aeabi_dmul+0x222>
 8082a0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8082a10:	d113      	bne.n	8082a3a <__aeabi_dmul+0x24a>
 8082a12:	ea95 0f0c 	teq	r5, ip
 8082a16:	d105      	bne.n	8082a24 <__aeabi_dmul+0x234>
 8082a18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8082a1c:	bf1c      	itt	ne
 8082a1e:	4610      	movne	r0, r2
 8082a20:	4619      	movne	r1, r3
 8082a22:	d10a      	bne.n	8082a3a <__aeabi_dmul+0x24a>
 8082a24:	ea81 0103 	eor.w	r1, r1, r3
 8082a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082a2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082a30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082a34:	f04f 0000 	mov.w	r0, #0
 8082a38:	bd70      	pop	{r4, r5, r6, pc}
 8082a3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082a3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8082a42:	bd70      	pop	{r4, r5, r6, pc}

08082a44 <__aeabi_ddiv>:
 8082a44:	b570      	push	{r4, r5, r6, lr}
 8082a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8082a52:	bf1d      	ittte	ne
 8082a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082a58:	ea94 0f0c 	teqne	r4, ip
 8082a5c:	ea95 0f0c 	teqne	r5, ip
 8082a60:	f000 f8a7 	bleq	8082bb2 <__aeabi_ddiv+0x16e>
 8082a64:	eba4 0405 	sub.w	r4, r4, r5
 8082a68:	ea81 0e03 	eor.w	lr, r1, r3
 8082a6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082a74:	f000 8088 	beq.w	8082b88 <__aeabi_ddiv+0x144>
 8082a78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082a7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8082a80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8082a84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8082a88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8082a8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8082a90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8082a94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8082a98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8082a9c:	429d      	cmp	r5, r3
 8082a9e:	bf08      	it	eq
 8082aa0:	4296      	cmpeq	r6, r2
 8082aa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8082aa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8082aaa:	d202      	bcs.n	8082ab2 <__aeabi_ddiv+0x6e>
 8082aac:	085b      	lsrs	r3, r3, #1
 8082aae:	ea4f 0232 	mov.w	r2, r2, rrx
 8082ab2:	1ab6      	subs	r6, r6, r2
 8082ab4:	eb65 0503 	sbc.w	r5, r5, r3
 8082ab8:	085b      	lsrs	r3, r3, #1
 8082aba:	ea4f 0232 	mov.w	r2, r2, rrx
 8082abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8082ac2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8082ac6:	ebb6 0e02 	subs.w	lr, r6, r2
 8082aca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082ace:	bf22      	ittt	cs
 8082ad0:	1ab6      	subcs	r6, r6, r2
 8082ad2:	4675      	movcs	r5, lr
 8082ad4:	ea40 000c 	orrcs.w	r0, r0, ip
 8082ad8:	085b      	lsrs	r3, r3, #1
 8082ada:	ea4f 0232 	mov.w	r2, r2, rrx
 8082ade:	ebb6 0e02 	subs.w	lr, r6, r2
 8082ae2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082ae6:	bf22      	ittt	cs
 8082ae8:	1ab6      	subcs	r6, r6, r2
 8082aea:	4675      	movcs	r5, lr
 8082aec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082af0:	085b      	lsrs	r3, r3, #1
 8082af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8082af6:	ebb6 0e02 	subs.w	lr, r6, r2
 8082afa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082afe:	bf22      	ittt	cs
 8082b00:	1ab6      	subcs	r6, r6, r2
 8082b02:	4675      	movcs	r5, lr
 8082b04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082b08:	085b      	lsrs	r3, r3, #1
 8082b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8082b0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8082b12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082b16:	bf22      	ittt	cs
 8082b18:	1ab6      	subcs	r6, r6, r2
 8082b1a:	4675      	movcs	r5, lr
 8082b1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8082b20:	ea55 0e06 	orrs.w	lr, r5, r6
 8082b24:	d018      	beq.n	8082b58 <__aeabi_ddiv+0x114>
 8082b26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8082b2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8082b2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8082b32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8082b36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8082b3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8082b3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8082b42:	d1c0      	bne.n	8082ac6 <__aeabi_ddiv+0x82>
 8082b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082b48:	d10b      	bne.n	8082b62 <__aeabi_ddiv+0x11e>
 8082b4a:	ea41 0100 	orr.w	r1, r1, r0
 8082b4e:	f04f 0000 	mov.w	r0, #0
 8082b52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8082b56:	e7b6      	b.n	8082ac6 <__aeabi_ddiv+0x82>
 8082b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082b5c:	bf04      	itt	eq
 8082b5e:	4301      	orreq	r1, r0
 8082b60:	2000      	moveq	r0, #0
 8082b62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082b66:	bf88      	it	hi
 8082b68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082b6c:	f63f aeaf 	bhi.w	80828ce <__aeabi_dmul+0xde>
 8082b70:	ebb5 0c03 	subs.w	ip, r5, r3
 8082b74:	bf04      	itt	eq
 8082b76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8082b7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082b7e:	f150 0000 	adcs.w	r0, r0, #0
 8082b82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082b86:	bd70      	pop	{r4, r5, r6, pc}
 8082b88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8082b8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8082b90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8082b94:	bfc2      	ittt	gt
 8082b96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082b9e:	bd70      	popgt	{r4, r5, r6, pc}
 8082ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082ba4:	f04f 0e00 	mov.w	lr, #0
 8082ba8:	3c01      	subs	r4, #1
 8082baa:	e690      	b.n	80828ce <__aeabi_dmul+0xde>
 8082bac:	ea45 0e06 	orr.w	lr, r5, r6
 8082bb0:	e68d      	b.n	80828ce <__aeabi_dmul+0xde>
 8082bb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082bb6:	ea94 0f0c 	teq	r4, ip
 8082bba:	bf08      	it	eq
 8082bbc:	ea95 0f0c 	teqeq	r5, ip
 8082bc0:	f43f af3b 	beq.w	8082a3a <__aeabi_dmul+0x24a>
 8082bc4:	ea94 0f0c 	teq	r4, ip
 8082bc8:	d10a      	bne.n	8082be0 <__aeabi_ddiv+0x19c>
 8082bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082bce:	f47f af34 	bne.w	8082a3a <__aeabi_dmul+0x24a>
 8082bd2:	ea95 0f0c 	teq	r5, ip
 8082bd6:	f47f af25 	bne.w	8082a24 <__aeabi_dmul+0x234>
 8082bda:	4610      	mov	r0, r2
 8082bdc:	4619      	mov	r1, r3
 8082bde:	e72c      	b.n	8082a3a <__aeabi_dmul+0x24a>
 8082be0:	ea95 0f0c 	teq	r5, ip
 8082be4:	d106      	bne.n	8082bf4 <__aeabi_ddiv+0x1b0>
 8082be6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082bea:	f43f aefd 	beq.w	80829e8 <__aeabi_dmul+0x1f8>
 8082bee:	4610      	mov	r0, r2
 8082bf0:	4619      	mov	r1, r3
 8082bf2:	e722      	b.n	8082a3a <__aeabi_dmul+0x24a>
 8082bf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082bf8:	bf18      	it	ne
 8082bfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082bfe:	f47f aec5 	bne.w	808298c <__aeabi_dmul+0x19c>
 8082c02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8082c06:	f47f af0d 	bne.w	8082a24 <__aeabi_dmul+0x234>
 8082c0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8082c0e:	f47f aeeb 	bne.w	80829e8 <__aeabi_dmul+0x1f8>
 8082c12:	e712      	b.n	8082a3a <__aeabi_dmul+0x24a>

08082c14 <__aeabi_d2iz>:
 8082c14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8082c18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082c1c:	d215      	bcs.n	8082c4a <__aeabi_d2iz+0x36>
 8082c1e:	d511      	bpl.n	8082c44 <__aeabi_d2iz+0x30>
 8082c20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8082c24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082c28:	d912      	bls.n	8082c50 <__aeabi_d2iz+0x3c>
 8082c2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082c32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8082c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8082c3e:	bf18      	it	ne
 8082c40:	4240      	negne	r0, r0
 8082c42:	4770      	bx	lr
 8082c44:	f04f 0000 	mov.w	r0, #0
 8082c48:	4770      	bx	lr
 8082c4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8082c4e:	d105      	bne.n	8082c5c <__aeabi_d2iz+0x48>
 8082c50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8082c54:	bf08      	it	eq
 8082c56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8082c5a:	4770      	bx	lr
 8082c5c:	f04f 0000 	mov.w	r0, #0
 8082c60:	4770      	bx	lr
 8082c62:	bf00      	nop

08082c64 <__aeabi_d2f>:
 8082c64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8082c68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8082c6c:	bf24      	itt	cs
 8082c6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8082c72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8082c76:	d90d      	bls.n	8082c94 <__aeabi_d2f+0x30>
 8082c78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082c7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8082c80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8082c84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8082c88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8082c8c:	bf08      	it	eq
 8082c8e:	f020 0001 	biceq.w	r0, r0, #1
 8082c92:	4770      	bx	lr
 8082c94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8082c98:	d121      	bne.n	8082cde <__aeabi_d2f+0x7a>
 8082c9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8082c9e:	bfbc      	itt	lt
 8082ca0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8082ca4:	4770      	bxlt	lr
 8082ca6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082caa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8082cae:	f1c2 0218 	rsb	r2, r2, #24
 8082cb2:	f1c2 0c20 	rsb	ip, r2, #32
 8082cb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8082cba:	fa20 f002 	lsr.w	r0, r0, r2
 8082cbe:	bf18      	it	ne
 8082cc0:	f040 0001 	orrne.w	r0, r0, #1
 8082cc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082cc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8082ccc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8082cd0:	ea40 000c 	orr.w	r0, r0, ip
 8082cd4:	fa23 f302 	lsr.w	r3, r3, r2
 8082cd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8082cdc:	e7cc      	b.n	8082c78 <__aeabi_d2f+0x14>
 8082cde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8082ce2:	d107      	bne.n	8082cf4 <__aeabi_d2f+0x90>
 8082ce4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8082ce8:	bf1e      	ittt	ne
 8082cea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8082cee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8082cf2:	4770      	bxne	lr
 8082cf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8082cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082d00:	4770      	bx	lr
 8082d02:	bf00      	nop

08082d04 <__aeabi_frsub>:
 8082d04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8082d08:	e002      	b.n	8082d10 <__addsf3>
 8082d0a:	bf00      	nop

08082d0c <__aeabi_fsub>:
 8082d0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08082d10 <__addsf3>:
 8082d10:	0042      	lsls	r2, r0, #1
 8082d12:	bf1f      	itttt	ne
 8082d14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8082d18:	ea92 0f03 	teqne	r2, r3
 8082d1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8082d20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082d24:	d06a      	beq.n	8082dfc <__addsf3+0xec>
 8082d26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8082d2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8082d2e:	bfc1      	itttt	gt
 8082d30:	18d2      	addgt	r2, r2, r3
 8082d32:	4041      	eorgt	r1, r0
 8082d34:	4048      	eorgt	r0, r1
 8082d36:	4041      	eorgt	r1, r0
 8082d38:	bfb8      	it	lt
 8082d3a:	425b      	neglt	r3, r3
 8082d3c:	2b19      	cmp	r3, #25
 8082d3e:	bf88      	it	hi
 8082d40:	4770      	bxhi	lr
 8082d42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8082d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082d4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8082d4e:	bf18      	it	ne
 8082d50:	4240      	negne	r0, r0
 8082d52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082d56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8082d5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8082d5e:	bf18      	it	ne
 8082d60:	4249      	negne	r1, r1
 8082d62:	ea92 0f03 	teq	r2, r3
 8082d66:	d03f      	beq.n	8082de8 <__addsf3+0xd8>
 8082d68:	f1a2 0201 	sub.w	r2, r2, #1
 8082d6c:	fa41 fc03 	asr.w	ip, r1, r3
 8082d70:	eb10 000c 	adds.w	r0, r0, ip
 8082d74:	f1c3 0320 	rsb	r3, r3, #32
 8082d78:	fa01 f103 	lsl.w	r1, r1, r3
 8082d7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082d80:	d502      	bpl.n	8082d88 <__addsf3+0x78>
 8082d82:	4249      	negs	r1, r1
 8082d84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8082d88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8082d8c:	d313      	bcc.n	8082db6 <__addsf3+0xa6>
 8082d8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8082d92:	d306      	bcc.n	8082da2 <__addsf3+0x92>
 8082d94:	0840      	lsrs	r0, r0, #1
 8082d96:	ea4f 0131 	mov.w	r1, r1, rrx
 8082d9a:	f102 0201 	add.w	r2, r2, #1
 8082d9e:	2afe      	cmp	r2, #254	; 0xfe
 8082da0:	d251      	bcs.n	8082e46 <__addsf3+0x136>
 8082da2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8082da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082daa:	bf08      	it	eq
 8082dac:	f020 0001 	biceq.w	r0, r0, #1
 8082db0:	ea40 0003 	orr.w	r0, r0, r3
 8082db4:	4770      	bx	lr
 8082db6:	0049      	lsls	r1, r1, #1
 8082db8:	eb40 0000 	adc.w	r0, r0, r0
 8082dbc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8082dc0:	f1a2 0201 	sub.w	r2, r2, #1
 8082dc4:	d1ed      	bne.n	8082da2 <__addsf3+0x92>
 8082dc6:	fab0 fc80 	clz	ip, r0
 8082dca:	f1ac 0c08 	sub.w	ip, ip, #8
 8082dce:	ebb2 020c 	subs.w	r2, r2, ip
 8082dd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8082dd6:	bfaa      	itet	ge
 8082dd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8082ddc:	4252      	neglt	r2, r2
 8082dde:	4318      	orrge	r0, r3
 8082de0:	bfbc      	itt	lt
 8082de2:	40d0      	lsrlt	r0, r2
 8082de4:	4318      	orrlt	r0, r3
 8082de6:	4770      	bx	lr
 8082de8:	f092 0f00 	teq	r2, #0
 8082dec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8082df0:	bf06      	itte	eq
 8082df2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8082df6:	3201      	addeq	r2, #1
 8082df8:	3b01      	subne	r3, #1
 8082dfa:	e7b5      	b.n	8082d68 <__addsf3+0x58>
 8082dfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082e00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082e04:	bf18      	it	ne
 8082e06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082e0a:	d021      	beq.n	8082e50 <__addsf3+0x140>
 8082e0c:	ea92 0f03 	teq	r2, r3
 8082e10:	d004      	beq.n	8082e1c <__addsf3+0x10c>
 8082e12:	f092 0f00 	teq	r2, #0
 8082e16:	bf08      	it	eq
 8082e18:	4608      	moveq	r0, r1
 8082e1a:	4770      	bx	lr
 8082e1c:	ea90 0f01 	teq	r0, r1
 8082e20:	bf1c      	itt	ne
 8082e22:	2000      	movne	r0, #0
 8082e24:	4770      	bxne	lr
 8082e26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082e2a:	d104      	bne.n	8082e36 <__addsf3+0x126>
 8082e2c:	0040      	lsls	r0, r0, #1
 8082e2e:	bf28      	it	cs
 8082e30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8082e34:	4770      	bx	lr
 8082e36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082e3a:	bf3c      	itt	cc
 8082e3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8082e40:	4770      	bxcc	lr
 8082e42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082e46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082e4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082e4e:	4770      	bx	lr
 8082e50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8082e54:	bf16      	itet	ne
 8082e56:	4608      	movne	r0, r1
 8082e58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082e5c:	4601      	movne	r1, r0
 8082e5e:	0242      	lsls	r2, r0, #9
 8082e60:	bf06      	itte	eq
 8082e62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8082e66:	ea90 0f01 	teqeq	r0, r1
 8082e6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8082e6e:	4770      	bx	lr

08082e70 <__aeabi_ui2f>:
 8082e70:	f04f 0300 	mov.w	r3, #0
 8082e74:	e004      	b.n	8082e80 <__aeabi_i2f+0x8>
 8082e76:	bf00      	nop

08082e78 <__aeabi_i2f>:
 8082e78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8082e7c:	bf48      	it	mi
 8082e7e:	4240      	negmi	r0, r0
 8082e80:	ea5f 0c00 	movs.w	ip, r0
 8082e84:	bf08      	it	eq
 8082e86:	4770      	bxeq	lr
 8082e88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8082e8c:	4601      	mov	r1, r0
 8082e8e:	f04f 0000 	mov.w	r0, #0
 8082e92:	e01c      	b.n	8082ece <__aeabi_l2f+0x2a>

08082e94 <__aeabi_ul2f>:
 8082e94:	ea50 0201 	orrs.w	r2, r0, r1
 8082e98:	bf08      	it	eq
 8082e9a:	4770      	bxeq	lr
 8082e9c:	f04f 0300 	mov.w	r3, #0
 8082ea0:	e00a      	b.n	8082eb8 <__aeabi_l2f+0x14>
 8082ea2:	bf00      	nop

08082ea4 <__aeabi_l2f>:
 8082ea4:	ea50 0201 	orrs.w	r2, r0, r1
 8082ea8:	bf08      	it	eq
 8082eaa:	4770      	bxeq	lr
 8082eac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8082eb0:	d502      	bpl.n	8082eb8 <__aeabi_l2f+0x14>
 8082eb2:	4240      	negs	r0, r0
 8082eb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082eb8:	ea5f 0c01 	movs.w	ip, r1
 8082ebc:	bf02      	ittt	eq
 8082ebe:	4684      	moveq	ip, r0
 8082ec0:	4601      	moveq	r1, r0
 8082ec2:	2000      	moveq	r0, #0
 8082ec4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082ec8:	bf08      	it	eq
 8082eca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082ece:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8082ed2:	fabc f28c 	clz	r2, ip
 8082ed6:	3a08      	subs	r2, #8
 8082ed8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082edc:	db10      	blt.n	8082f00 <__aeabi_l2f+0x5c>
 8082ede:	fa01 fc02 	lsl.w	ip, r1, r2
 8082ee2:	4463      	add	r3, ip
 8082ee4:	fa00 fc02 	lsl.w	ip, r0, r2
 8082ee8:	f1c2 0220 	rsb	r2, r2, #32
 8082eec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082ef0:	fa20 f202 	lsr.w	r2, r0, r2
 8082ef4:	eb43 0002 	adc.w	r0, r3, r2
 8082ef8:	bf08      	it	eq
 8082efa:	f020 0001 	biceq.w	r0, r0, #1
 8082efe:	4770      	bx	lr
 8082f00:	f102 0220 	add.w	r2, r2, #32
 8082f04:	fa01 fc02 	lsl.w	ip, r1, r2
 8082f08:	f1c2 0220 	rsb	r2, r2, #32
 8082f0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082f10:	fa21 f202 	lsr.w	r2, r1, r2
 8082f14:	eb43 0002 	adc.w	r0, r3, r2
 8082f18:	bf08      	it	eq
 8082f1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082f1e:	4770      	bx	lr

08082f20 <__aeabi_fmul>:
 8082f20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082f24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082f28:	bf1e      	ittt	ne
 8082f2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082f2e:	ea92 0f0c 	teqne	r2, ip
 8082f32:	ea93 0f0c 	teqne	r3, ip
 8082f36:	d06f      	beq.n	8083018 <__aeabi_fmul+0xf8>
 8082f38:	441a      	add	r2, r3
 8082f3a:	ea80 0c01 	eor.w	ip, r0, r1
 8082f3e:	0240      	lsls	r0, r0, #9
 8082f40:	bf18      	it	ne
 8082f42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8082f46:	d01e      	beq.n	8082f86 <__aeabi_fmul+0x66>
 8082f48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8082f4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8082f50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8082f54:	fba0 3101 	umull	r3, r1, r0, r1
 8082f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082f5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8082f60:	bf3e      	ittt	cc
 8082f62:	0049      	lslcc	r1, r1, #1
 8082f64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8082f68:	005b      	lslcc	r3, r3, #1
 8082f6a:	ea40 0001 	orr.w	r0, r0, r1
 8082f6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8082f72:	2afd      	cmp	r2, #253	; 0xfd
 8082f74:	d81d      	bhi.n	8082fb2 <__aeabi_fmul+0x92>
 8082f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8082f7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082f7e:	bf08      	it	eq
 8082f80:	f020 0001 	biceq.w	r0, r0, #1
 8082f84:	4770      	bx	lr
 8082f86:	f090 0f00 	teq	r0, #0
 8082f8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8082f8e:	bf08      	it	eq
 8082f90:	0249      	lsleq	r1, r1, #9
 8082f92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082f96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8082f9a:	3a7f      	subs	r2, #127	; 0x7f
 8082f9c:	bfc2      	ittt	gt
 8082f9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082fa2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8082fa6:	4770      	bxgt	lr
 8082fa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082fac:	f04f 0300 	mov.w	r3, #0
 8082fb0:	3a01      	subs	r2, #1
 8082fb2:	dc5d      	bgt.n	8083070 <__aeabi_fmul+0x150>
 8082fb4:	f112 0f19 	cmn.w	r2, #25
 8082fb8:	bfdc      	itt	le
 8082fba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8082fbe:	4770      	bxle	lr
 8082fc0:	f1c2 0200 	rsb	r2, r2, #0
 8082fc4:	0041      	lsls	r1, r0, #1
 8082fc6:	fa21 f102 	lsr.w	r1, r1, r2
 8082fca:	f1c2 0220 	rsb	r2, r2, #32
 8082fce:	fa00 fc02 	lsl.w	ip, r0, r2
 8082fd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8082fd6:	f140 0000 	adc.w	r0, r0, #0
 8082fda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8082fde:	bf08      	it	eq
 8082fe0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082fe4:	4770      	bx	lr
 8082fe6:	f092 0f00 	teq	r2, #0
 8082fea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082fee:	bf02      	ittt	eq
 8082ff0:	0040      	lsleq	r0, r0, #1
 8082ff2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082ff6:	3a01      	subeq	r2, #1
 8082ff8:	d0f9      	beq.n	8082fee <__aeabi_fmul+0xce>
 8082ffa:	ea40 000c 	orr.w	r0, r0, ip
 8082ffe:	f093 0f00 	teq	r3, #0
 8083002:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083006:	bf02      	ittt	eq
 8083008:	0049      	lsleq	r1, r1, #1
 808300a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808300e:	3b01      	subeq	r3, #1
 8083010:	d0f9      	beq.n	8083006 <__aeabi_fmul+0xe6>
 8083012:	ea41 010c 	orr.w	r1, r1, ip
 8083016:	e78f      	b.n	8082f38 <__aeabi_fmul+0x18>
 8083018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808301c:	ea92 0f0c 	teq	r2, ip
 8083020:	bf18      	it	ne
 8083022:	ea93 0f0c 	teqne	r3, ip
 8083026:	d00a      	beq.n	808303e <__aeabi_fmul+0x11e>
 8083028:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808302c:	bf18      	it	ne
 808302e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083032:	d1d8      	bne.n	8082fe6 <__aeabi_fmul+0xc6>
 8083034:	ea80 0001 	eor.w	r0, r0, r1
 8083038:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808303c:	4770      	bx	lr
 808303e:	f090 0f00 	teq	r0, #0
 8083042:	bf17      	itett	ne
 8083044:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083048:	4608      	moveq	r0, r1
 808304a:	f091 0f00 	teqne	r1, #0
 808304e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8083052:	d014      	beq.n	808307e <__aeabi_fmul+0x15e>
 8083054:	ea92 0f0c 	teq	r2, ip
 8083058:	d101      	bne.n	808305e <__aeabi_fmul+0x13e>
 808305a:	0242      	lsls	r2, r0, #9
 808305c:	d10f      	bne.n	808307e <__aeabi_fmul+0x15e>
 808305e:	ea93 0f0c 	teq	r3, ip
 8083062:	d103      	bne.n	808306c <__aeabi_fmul+0x14c>
 8083064:	024b      	lsls	r3, r1, #9
 8083066:	bf18      	it	ne
 8083068:	4608      	movne	r0, r1
 808306a:	d108      	bne.n	808307e <__aeabi_fmul+0x15e>
 808306c:	ea80 0001 	eor.w	r0, r0, r1
 8083070:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083074:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083078:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808307c:	4770      	bx	lr
 808307e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083082:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8083086:	4770      	bx	lr

08083088 <__aeabi_fdiv>:
 8083088:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808308c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083090:	bf1e      	ittt	ne
 8083092:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083096:	ea92 0f0c 	teqne	r2, ip
 808309a:	ea93 0f0c 	teqne	r3, ip
 808309e:	d069      	beq.n	8083174 <__aeabi_fdiv+0xec>
 80830a0:	eba2 0203 	sub.w	r2, r2, r3
 80830a4:	ea80 0c01 	eor.w	ip, r0, r1
 80830a8:	0249      	lsls	r1, r1, #9
 80830aa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80830ae:	d037      	beq.n	8083120 <__aeabi_fdiv+0x98>
 80830b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80830b4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80830b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80830bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80830c0:	428b      	cmp	r3, r1
 80830c2:	bf38      	it	cc
 80830c4:	005b      	lslcc	r3, r3, #1
 80830c6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80830ca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80830ce:	428b      	cmp	r3, r1
 80830d0:	bf24      	itt	cs
 80830d2:	1a5b      	subcs	r3, r3, r1
 80830d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80830d8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80830dc:	bf24      	itt	cs
 80830de:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80830e2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80830e6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80830ea:	bf24      	itt	cs
 80830ec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80830f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80830f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80830f8:	bf24      	itt	cs
 80830fa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80830fe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083102:	011b      	lsls	r3, r3, #4
 8083104:	bf18      	it	ne
 8083106:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808310a:	d1e0      	bne.n	80830ce <__aeabi_fdiv+0x46>
 808310c:	2afd      	cmp	r2, #253	; 0xfd
 808310e:	f63f af50 	bhi.w	8082fb2 <__aeabi_fmul+0x92>
 8083112:	428b      	cmp	r3, r1
 8083114:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083118:	bf08      	it	eq
 808311a:	f020 0001 	biceq.w	r0, r0, #1
 808311e:	4770      	bx	lr
 8083120:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083124:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083128:	327f      	adds	r2, #127	; 0x7f
 808312a:	bfc2      	ittt	gt
 808312c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083130:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083134:	4770      	bxgt	lr
 8083136:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808313a:	f04f 0300 	mov.w	r3, #0
 808313e:	3a01      	subs	r2, #1
 8083140:	e737      	b.n	8082fb2 <__aeabi_fmul+0x92>
 8083142:	f092 0f00 	teq	r2, #0
 8083146:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808314a:	bf02      	ittt	eq
 808314c:	0040      	lsleq	r0, r0, #1
 808314e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083152:	3a01      	subeq	r2, #1
 8083154:	d0f9      	beq.n	808314a <__aeabi_fdiv+0xc2>
 8083156:	ea40 000c 	orr.w	r0, r0, ip
 808315a:	f093 0f00 	teq	r3, #0
 808315e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083162:	bf02      	ittt	eq
 8083164:	0049      	lsleq	r1, r1, #1
 8083166:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808316a:	3b01      	subeq	r3, #1
 808316c:	d0f9      	beq.n	8083162 <__aeabi_fdiv+0xda>
 808316e:	ea41 010c 	orr.w	r1, r1, ip
 8083172:	e795      	b.n	80830a0 <__aeabi_fdiv+0x18>
 8083174:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083178:	ea92 0f0c 	teq	r2, ip
 808317c:	d108      	bne.n	8083190 <__aeabi_fdiv+0x108>
 808317e:	0242      	lsls	r2, r0, #9
 8083180:	f47f af7d 	bne.w	808307e <__aeabi_fmul+0x15e>
 8083184:	ea93 0f0c 	teq	r3, ip
 8083188:	f47f af70 	bne.w	808306c <__aeabi_fmul+0x14c>
 808318c:	4608      	mov	r0, r1
 808318e:	e776      	b.n	808307e <__aeabi_fmul+0x15e>
 8083190:	ea93 0f0c 	teq	r3, ip
 8083194:	d104      	bne.n	80831a0 <__aeabi_fdiv+0x118>
 8083196:	024b      	lsls	r3, r1, #9
 8083198:	f43f af4c 	beq.w	8083034 <__aeabi_fmul+0x114>
 808319c:	4608      	mov	r0, r1
 808319e:	e76e      	b.n	808307e <__aeabi_fmul+0x15e>
 80831a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80831a4:	bf18      	it	ne
 80831a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80831aa:	d1ca      	bne.n	8083142 <__aeabi_fdiv+0xba>
 80831ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80831b0:	f47f af5c 	bne.w	808306c <__aeabi_fmul+0x14c>
 80831b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80831b8:	f47f af3c 	bne.w	8083034 <__aeabi_fmul+0x114>
 80831bc:	e75f      	b.n	808307e <__aeabi_fmul+0x15e>
 80831be:	bf00      	nop

080831c0 <__aeabi_f2iz>:
 80831c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80831c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80831c8:	d30f      	bcc.n	80831ea <__aeabi_f2iz+0x2a>
 80831ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80831ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80831d2:	d90d      	bls.n	80831f0 <__aeabi_f2iz+0x30>
 80831d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80831d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80831dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80831e0:	fa23 f002 	lsr.w	r0, r3, r2
 80831e4:	bf18      	it	ne
 80831e6:	4240      	negne	r0, r0
 80831e8:	4770      	bx	lr
 80831ea:	f04f 0000 	mov.w	r0, #0
 80831ee:	4770      	bx	lr
 80831f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80831f4:	d101      	bne.n	80831fa <__aeabi_f2iz+0x3a>
 80831f6:	0242      	lsls	r2, r0, #9
 80831f8:	d105      	bne.n	8083206 <__aeabi_f2iz+0x46>
 80831fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80831fe:	bf08      	it	eq
 8083200:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083204:	4770      	bx	lr
 8083206:	f04f 0000 	mov.w	r0, #0
 808320a:	4770      	bx	lr

0808320c <__cxa_atexit>:
 808320c:	b510      	push	{r4, lr}
 808320e:	4c05      	ldr	r4, [pc, #20]	; (8083224 <__cxa_atexit+0x18>)
 8083210:	4613      	mov	r3, r2
 8083212:	b12c      	cbz	r4, 8083220 <__cxa_atexit+0x14>
 8083214:	460a      	mov	r2, r1
 8083216:	4601      	mov	r1, r0
 8083218:	2002      	movs	r0, #2
 808321a:	f3af 8000 	nop.w
 808321e:	bd10      	pop	{r4, pc}
 8083220:	4620      	mov	r0, r4
 8083222:	bd10      	pop	{r4, pc}
 8083224:	00000000 	.word	0x00000000

08083228 <memcpy>:
 8083228:	b510      	push	{r4, lr}
 808322a:	1e43      	subs	r3, r0, #1
 808322c:	440a      	add	r2, r1
 808322e:	4291      	cmp	r1, r2
 8083230:	d004      	beq.n	808323c <memcpy+0x14>
 8083232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083236:	f803 4f01 	strb.w	r4, [r3, #1]!
 808323a:	e7f8      	b.n	808322e <memcpy+0x6>
 808323c:	bd10      	pop	{r4, pc}

0808323e <memset>:
 808323e:	4603      	mov	r3, r0
 8083240:	4402      	add	r2, r0
 8083242:	4293      	cmp	r3, r2
 8083244:	d002      	beq.n	808324c <memset+0xe>
 8083246:	f803 1b01 	strb.w	r1, [r3], #1
 808324a:	e7fa      	b.n	8083242 <memset+0x4>
 808324c:	4770      	bx	lr
	...

08083250 <srand>:
 8083250:	b538      	push	{r3, r4, r5, lr}
 8083252:	4b12      	ldr	r3, [pc, #72]	; (808329c <srand+0x4c>)
 8083254:	4605      	mov	r5, r0
 8083256:	681c      	ldr	r4, [r3, #0]
 8083258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808325a:	b9d3      	cbnz	r3, 8083292 <srand+0x42>
 808325c:	2018      	movs	r0, #24
 808325e:	f7fd fd09 	bl	8080c74 <malloc>
 8083262:	f243 330e 	movw	r3, #13070	; 0x330e
 8083266:	63a0      	str	r0, [r4, #56]	; 0x38
 8083268:	8003      	strh	r3, [r0, #0]
 808326a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808326e:	8043      	strh	r3, [r0, #2]
 8083270:	f241 2334 	movw	r3, #4660	; 0x1234
 8083274:	8083      	strh	r3, [r0, #4]
 8083276:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808327a:	80c3      	strh	r3, [r0, #6]
 808327c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083280:	8103      	strh	r3, [r0, #8]
 8083282:	2305      	movs	r3, #5
 8083284:	8143      	strh	r3, [r0, #10]
 8083286:	230b      	movs	r3, #11
 8083288:	8183      	strh	r3, [r0, #12]
 808328a:	2201      	movs	r2, #1
 808328c:	2300      	movs	r3, #0
 808328e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8083292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083294:	2200      	movs	r2, #0
 8083296:	611d      	str	r5, [r3, #16]
 8083298:	615a      	str	r2, [r3, #20]
 808329a:	bd38      	pop	{r3, r4, r5, pc}
 808329c:	20000090 	.word	0x20000090

080832a0 <strcmp>:
 80832a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80832a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80832a8:	2a01      	cmp	r2, #1
 80832aa:	bf28      	it	cs
 80832ac:	429a      	cmpcs	r2, r3
 80832ae:	d0f7      	beq.n	80832a0 <strcmp>
 80832b0:	1ad0      	subs	r0, r2, r3
 80832b2:	4770      	bx	lr

080832b4 <strdup>:
 80832b4:	4b02      	ldr	r3, [pc, #8]	; (80832c0 <strdup+0xc>)
 80832b6:	4601      	mov	r1, r0
 80832b8:	6818      	ldr	r0, [r3, #0]
 80832ba:	f000 b803 	b.w	80832c4 <_strdup_r>
 80832be:	bf00      	nop
 80832c0:	20000090 	.word	0x20000090

080832c4 <_strdup_r>:
 80832c4:	b570      	push	{r4, r5, r6, lr}
 80832c6:	4606      	mov	r6, r0
 80832c8:	4608      	mov	r0, r1
 80832ca:	460c      	mov	r4, r1
 80832cc:	f000 f80d 	bl	80832ea <strlen>
 80832d0:	1c45      	adds	r5, r0, #1
 80832d2:	4629      	mov	r1, r5
 80832d4:	4630      	mov	r0, r6
 80832d6:	f7fd fcf5 	bl	8080cc4 <_malloc_r>
 80832da:	4606      	mov	r6, r0
 80832dc:	b118      	cbz	r0, 80832e6 <_strdup_r+0x22>
 80832de:	462a      	mov	r2, r5
 80832e0:	4621      	mov	r1, r4
 80832e2:	f7ff ffa1 	bl	8083228 <memcpy>
 80832e6:	4630      	mov	r0, r6
 80832e8:	bd70      	pop	{r4, r5, r6, pc}

080832ea <strlen>:
 80832ea:	4603      	mov	r3, r0
 80832ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80832f0:	2a00      	cmp	r2, #0
 80832f2:	d1fb      	bne.n	80832ec <strlen+0x2>
 80832f4:	1a18      	subs	r0, r3, r0
 80832f6:	3801      	subs	r0, #1
 80832f8:	4770      	bx	lr

080832fa <link_code_end>:
	...

080832fc <dynalib_user>:
 80832fc:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808330c:	0000 0000 6552 6573 7474 6e69 2067 654d     ....Resetting Me
 808331c:	6f6d 7972 3200 2535 6420 6e6f 0065 3035     mory.25% done.50
 808332c:	2025 6f64 656e 3700 2535 6420 6e6f 0065     % done.75% done.
 808333c:	6f44 656e 5200 6c65 6165 6573 7300 6174     Done.Release.sta
 808334c:	6574 664f 6843 0067 6148 6472 6552 6573     teOfChg.HardRese
 808335c:	0074 6953 6e67 6c61 6d00 6165 7573 6572     t.Signal.measure
 808336c:	6f4e 0077 7325 5320 253a 2e32 6630 2525     Now.%s S:%2.0f%%
 808337c:	202c 3a51 3225 302e 2566 2025 5400 7365     , Q:%2.0f%% .Tes
 808338c:	2074 6146 6c69 6465 6552 6573 2074 6544     t FailedReset De
 808339c:	6976 6563 7420 206f 6f43 746e 6e69 6575     vice to Continue
 80833ac:	4200 6765 6e69 696e 676e 5420 7365 2074     .Beginning Test 
 80833bc:	7552 006e 6554 7473 5320 6174 7472 4600     Run.Test Start.F
 80833cc:	6961 656c 2064 202d 694d 7373 6e69 2067     ailed - Missing 
 80833dc:	5246 4d41 5400 7365 2074 3123 4900 206e     FRAM.Test #1.In 
 80833ec:	7270 636f 7365 2073 202d 7245 7361 6e69     process - Erasin
 80833fc:	2067 5246 4d41 4600 6961 656c 2064 202d     g FRAM.Failed - 
 808340c:	5246 4d41 5220 6165 2064 7245 6f72 0072     FRAM Read Error.
 808341c:	5246 4d41 5420 7365 2074 6150 7373 6465     FRAM Test Passed
 808342c:	5400 6d65 6570 6172 7574 6572 6920 2073     .Temperature is 
 808343c:	6925 0046 6554 7473 2320 0032 7250 7365     %iF.Test #2.Pres
 808344c:	2073 7355 7265 5320 6977 6374 0068 6554     s User Switch.Te
 808345c:	7473 2320 0033 7355 7265 5320 6977 6374     st #3.User Switc
 808346c:	2068 7250 7365 2073 6544 6574 7463 6465     h Press Detected
 808347c:	4200 7461 6574 7972 6320 6168 6772 2065     .Battery charge 
 808348c:	656c 6576 206c 203d 6925 5400 7365 2074     level = %i.Test 
 808349c:	3423 4200 7461 6574 7972 6320 6168 6772     #4.Battery charg
 80834ac:	2065 6574 7473 7020 7361 6573 0064 6554     e test passed.Te
 80834bc:	7473 2320 0035 7845 6570 7463 7420 6968     st #5.Expect thi
 80834cc:	2073 6574 7473 7420 206f 6174 656b 7e20     s test to take ~
 80834dc:	3036 6d20 6e69 7475 7365 5400 7365 2074     60 minutes.Test 
 80834ec:	3623 5320 6174 7472 6465 4500 616c 7370     #6 Started.Elaps
 80834fc:	6465 7420 6d69 2065 6e69 6d20 6e69 7475     ed time in minut
 808350c:	7365 6920 2073 6925 5400 7365 2074 3623     es is %i.Test #6
 808351c:	4620 6e69 7369 6568 0064 6946 616e 206c      Finished.Final 
 808352c:	6554 7473 2d20 4820 7261 2064 6552 6573     Test - Hard Rese
 808353c:	2074 6e69 3120 7320 6365 6e6f 0064 6554     t in 1 second.Te
 808354c:	7473 2320 0037 6649 7920 756f 7320 6565     st #7.If you see
 808355c:	7420 6968 2073 656d 7373 6761 2065 202d      this message - 
 808356c:	6168 6472 7220 7365 7465 7420 7365 2074     hard reset test 
 808357c:	6166 6c69 6465 5500 6b6e 6f6e 6e77 4e00     failed.Unknown.N
 808358c:	6e6f 0065 6957 6946 4700 4d53 5500 544d     one.WiFi.GSM.UMT
 808359c:	0053 4443 414d 4c00 4554 4900 4545 3845     S.CDMA.LTE.IEEE8
 80835ac:	3230 3531 0034 544c 5f45 4143 5f54 314d     02154.LTE_CAT_M1
 80835bc:	4c00 4554 435f 5441 4e5f 3142 3000               .LTE_CAT_NB1.

080835c9 <_ZL13releaseNumber>:
 80835c9:	2e30 3232 0000 0000                              0.22...

080835d0 <_ZTVN5spark13CellularClassE>:
	...
 80835d8:	0da5 0808 0d9b 0808 0d91 0808 0d03 0808     ................
 80835e8:	0d85 0808 0d79 0808 0d6d 0808 0d65 0808     ....y...m...e...
 80835f8:	0d5b 0808 0d51 0808 0d0d 0808               [...Q.......

08083604 <_ZTV14CellularSignal>:
	...
 808360c:	0e55 0808 0ed7 0808 0e57 0808 0f15 0808     U.......W.......
 808361c:	0e5d 0808 0ee5 0808 0e81 0808 0ea5 0808     ]...............
 808362c:	fffc ffff 0000 0000 0ecf 0808               ............

08083638 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8083640:	0f5d 0808 0f63 0808 0fb9 0808 0f71 0808     ]...c.......q...
 8083650:	0f5f 0808                                   _...

08083654 <_ZTV7TwoWire>:
	...
 808365c:	165d 0808 16a7 0808 167f 0808 165f 0808     ]..........._...
 808366c:	1687 0808 168f 0808 1697 0808 169f 0808     ................

0808367c <_ZTV9IPAddress>:
	...
 8083684:	175f 0808 174f 0808 1751 0808 6162 6475     _...O...Q...baud
 8083694:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80836a4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80836b4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80836c4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80836d4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80836e4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80836f4:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 8083704:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 8083714:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 8083724:	6564 3d20 0020 6564 6174 6c69 2073 203d     de = .details = 
 8083734:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
 8083744:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 8083754:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 8083764:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

08083774 <_ZTVN5spark12NetworkClassE>:
	...
 808377c:	17fd 0808 1807 0808 1811 0808 181b 0808     ................
 808378c:	1825 0808 1831 0808 183d 0808 1849 0808     %...1...=...I...
 808379c:	1851 0808 185b 0808 1865 0808               Q...[...e...

080837a8 <_ZTV8SPIClass>:
	...
 80837b0:	1a0d 0808 1a0f 0808 005a 2b25 3330 3a64     ........Z.%+03d:
 80837c0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80837d0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80837e0:	0000 0000                                   ....

080837e4 <_ZTV11USARTSerial>:
	...
 80837ec:	1bf1 0808 1c41 0808 1c4f 0808 18c5 0808     ....A...O.......
 80837fc:	1c05 0808 1c27 0808 1c13 0808 1c3b 0808     ....'.......;...
 808380c:	1bf3 0808 1bf7 0808                         ........

08083814 <_ZTV9USBSerial>:
	...
 808381c:	1cf9 0808 1d49 0808 1d57 0808 18c5 0808     ....I...W.......
 808382c:	1d35 0808 1cfb 0808 1d11 0808 1d43 0808     5...........C...
 808383c:	1d27 0808 1cf5 0808                         '.......

08083844 <__sf_fake_stdin>:
	...

08083864 <__sf_fake_stdout>:
	...

08083884 <__sf_fake_stderr>:
	...
 80838a4:	0043                                        C.

080838a6 <link_const_variable_data_end>:
	...

080838a8 <link_constructors_location>:
 80838a8:	08080159 	.word	0x08080159
 80838ac:	080807b1 	.word	0x080807b1
 80838b0:	080807f9 	.word	0x080807f9
 80838b4:	08080e25 	.word	0x08080e25
 80838b8:	080817ed 	.word	0x080817ed
 80838bc:	080818b1 	.word	0x080818b1
 80838c0:	080819f1 	.word	0x080819f1
 80838c4:	08081b59 	.word	0x08081b59
 80838c8:	08081bdd 	.word	0x08081bdd
 80838cc:	08082151 	.word	0x08082151
 80838d0:	08082181 	.word	0x08082181
 80838d4:	080821f1 	.word	0x080821f1
 80838d8:	080822b5 	.word	0x080822b5
 80838dc:	08082339 	.word	0x08082339
 80838e0:	080823bd 	.word	0x080823bd

080838e4 <link_constructors_end>:
	...
