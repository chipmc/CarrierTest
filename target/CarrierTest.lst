
/Users/chipmc/Documents/Maker/Particle/Projects/CarrierTest/target/CarrierTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08083950  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000400  08083954  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000062c  2000046c  2000046c  0003046c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080839c0  080839c0  000239c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080839e8  080839e8  000239e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000acfed  00000000  00000000  000239ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010bae  00000000  00000000  000d09d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014c26  00000000  00000000  000e1587  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002038  00000000  00000000  000f61ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003350  00000000  00000000  000f81e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027032  00000000  00000000  000fb535  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027146  00000000  00000000  00122567  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a542c  00000000  00000000  001496ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bc78  00000000  00000000  001eeadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	a4 33 08 08                                         .3..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f003 f94f 	bl	80832d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f003 f954 	bl	80832e6 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08083954 	.word	0x08083954
 808004c:	2000046c 	.word	0x2000046c
 8080050:	2000046c 	.word	0x2000046c
 8080054:	20000a98 	.word	0x20000a98
 8080058:	20000a98 	.word	0x20000a98

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 ffe9 	bl	8082034 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	0808390c 	.word	0x0808390c
 8080084:	08083948 	.word	0x08083948

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b8ea 	b.w	8080260 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f9e9 	bl	8080464 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 bf8f 	b.w	8081fb8 <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 bf5d 	b.w	8080f58 <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 bf63 	b.w	8080f68 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800b2:	6803      	ldr	r3, [r0, #0]
 80800b4:	b2c9      	uxtb	r1, r1
 80800b6:	689b      	ldr	r3, [r3, #8]
 80800b8:	4718      	bx	r3

080800ba <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800ba:	2200      	movs	r2, #0
 80800bc:	7042      	strb	r2, [r0, #1]
}
 80800be:	4770      	bx	lr

080800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
 80800c0:	b508      	push	{r3, lr}
  i2c_addr = addr;
 80800c2:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80800c4:	f002 f85a 	bl	808217c <_Z19__fetch_global_Wirev>
 80800c8:	f001 fb80 	bl	80817cc <_ZN7TwoWire5beginEv>

  // Everything seems to be properly initialised and connected 
  _framInitialised = true;
*/
  return true;
}
 80800cc:	2001      	movs	r0, #1
 80800ce:	bd08      	pop	{r3, pc}

080800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800d0:	b570      	push	{r4, r5, r6, lr}
 80800d2:	4606      	mov	r6, r0
 80800d4:	460c      	mov	r4, r1
 80800d6:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800d8:	f002 f850 	bl	808217c <_Z19__fetch_global_Wirev>
 80800dc:	7831      	ldrb	r1, [r6, #0]
 80800de:	f001 fb91 	bl	8081804 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800e2:	f002 f84b 	bl	808217c <_Z19__fetch_global_Wirev>
 80800e6:	0a21      	lsrs	r1, r4, #8
 80800e8:	f7ff ffe3 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800ec:	f002 f846 	bl	808217c <_Z19__fetch_global_Wirev>
 80800f0:	b2e1      	uxtb	r1, r4
 80800f2:	f7ff ffde 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800f6:	f002 f841 	bl	808217c <_Z19__fetch_global_Wirev>
 80800fa:	6803      	ldr	r3, [r0, #0]
 80800fc:	4629      	mov	r1, r5
 80800fe:	689b      	ldr	r3, [r3, #8]
 8080100:	4798      	blx	r3
  Wire.endTransmission();
 8080102:	f002 f83b 	bl	808217c <_Z19__fetch_global_Wirev>
}
 8080106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
 808010a:	f001 bb86 	b.w	808181a <_ZN7TwoWire15endTransmissionEv>

0808010e <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 808010e:	b538      	push	{r3, r4, r5, lr}
 8080110:	4604      	mov	r4, r0
 8080112:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080114:	f002 f832 	bl	808217c <_Z19__fetch_global_Wirev>
 8080118:	7821      	ldrb	r1, [r4, #0]
 808011a:	f001 fb73 	bl	8081804 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 808011e:	f002 f82d 	bl	808217c <_Z19__fetch_global_Wirev>
 8080122:	0a29      	lsrs	r1, r5, #8
 8080124:	f7ff ffc5 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 8080128:	f002 f828 	bl	808217c <_Z19__fetch_global_Wirev>
 808012c:	b2e9      	uxtb	r1, r5
 808012e:	f7ff ffc0 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080132:	f002 f823 	bl	808217c <_Z19__fetch_global_Wirev>
 8080136:	f001 fb70 	bl	808181a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808013a:	f002 f81f 	bl	808217c <_Z19__fetch_global_Wirev>
 808013e:	2201      	movs	r2, #1
 8080140:	7821      	ldrb	r1, [r4, #0]
 8080142:	f001 fb52 	bl	80817ea <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
 8080146:	f002 f819 	bl	808217c <_Z19__fetch_global_Wirev>
 808014a:	6803      	ldr	r3, [r0, #0]
 808014c:	695b      	ldr	r3, [r3, #20]
 808014e:	4798      	blx	r3
}
 8080150:	b2c0      	uxtb	r0, r0
 8080152:	bd38      	pop	{r3, r4, r5, pc}

08080154 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080154:	f000 bcf4 	b.w	8080b40 <HAL_Pin_Map>

08080158 <_Z11watchdogISRv>:
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
  return temperatureF;
}

void watchdogISR()
{
 8080158:	b508      	push	{r3, lr}
  watchdogInterrupt = true;
 808015a:	4b06      	ldr	r3, [pc, #24]	; (8080174 <_Z11watchdogISRv+0x1c>)
 808015c:	2101      	movs	r1, #1
  digitalWrite(WIRING_donePin, HIGH);                              // Pet the watchdog
 808015e:	2006      	movs	r0, #6
  return temperatureF;
}

void watchdogISR()
{
  watchdogInterrupt = true;
 8080160:	7019      	strb	r1, [r3, #0]
  digitalWrite(WIRING_donePin, HIGH);                              // Pet the watchdog
 8080162:	f001 ffc8 	bl	80820f6 <digitalWrite>
  digitalWrite(WIRING_donePin, LOW);
}
 8080166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void watchdogISR()
{
  watchdogInterrupt = true;
  digitalWrite(WIRING_donePin, HIGH);                              // Pet the watchdog
  digitalWrite(WIRING_donePin, LOW);
 808016a:	2100      	movs	r1, #0
 808016c:	2006      	movs	r0, #6
 808016e:	f001 bfc2 	b.w	80820f6 <digitalWrite>
 8080172:	bf00      	nop
 8080174:	20000498 	.word	0x20000498

08080178 <_Z12hardResetNow6String>:
  }
}


int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
 8080178:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808017a:	4905      	ldr	r1, [pc, #20]	; (8080190 <_Z12hardResetNow6String+0x18>)
 808017c:	f001 fd5f 	bl	8081c3e <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080180:	b120      	cbz	r0, 808018c <_Z12hardResetNow6String+0x14>
  {
    digitalWrite(WIRING_hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
 8080182:	2004      	movs	r0, #4
 8080184:	2101      	movs	r1, #1
 8080186:	f001 ffb6 	bl	80820f6 <digitalWrite>
 808018a:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 808018c:	bd08      	pop	{r3, pc}
 808018e:	bf00      	nop
 8080190:	0808346a 	.word	0x0808346a

08080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080196:	4605      	mov	r5, r0
 8080198:	f89d 4018 	ldrb.w	r4, [sp, #24]
 808019c:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808019e:	f88d 3000 	strb.w	r3, [sp]
 80801a2:	233c      	movs	r3, #60	; 0x3c
 80801a4:	f001 f900 	bl	80813a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80801a8:	4628      	mov	r0, r5
 80801aa:	b003      	add	sp, #12
 80801ac:	bd30      	pop	{r4, r5, pc}
	...

080801b0 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80801b0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801b2:	f000 fca5 	bl	8080b00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80801b6:	4b03      	ldr	r3, [pc, #12]	; (80801c4 <_ZN10CloudClass7processEv+0x14>)
 80801b8:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80801ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80801be:	f000 be4b 	b.w	8080e58 <spark_process>
 80801c2:	bf00      	nop
 80801c4:	2000098c 	.word	0x2000098c

080801c8 <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 80801c8:	b281      	uxth	r1, r0
 80801ca:	4801      	ldr	r0, [pc, #4]	; (80801d0 <_Z9FRAMread8j+0x8>)
 80801cc:	f7ff bf9f 	b.w	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
 80801d0:	2000048d 	.word	0x2000048d

080801d4 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
 80801d4:	460a      	mov	r2, r1
 80801d6:	b281      	uxth	r1, r0
 80801d8:	4801      	ldr	r0, [pc, #4]	; (80801e0 <_Z10FRAMwrite8jh+0xc>)
 80801da:	f7ff bf79 	b.w	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80801de:	bf00      	nop
 80801e0:	2000048d 	.word	0x2000048d

080801e4 <_Z9ResetFRAMv>:
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 80801e4:	b510      	push	{r4, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    Serial.println("Resetting Memory");
 80801e6:	f001 fe47 	bl	8081e78 <_Z16_fetch_usbserialv>
 80801ea:	4918      	ldr	r1, [pc, #96]	; (808024c <_Z9ResetFRAMv+0x68>)
 80801ec:	f001 fc49 	bl	8081a82 <_ZN5Print7printlnEPKc>
    for (unsigned long i=4; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
 80801f0:	2404      	movs	r4, #4
        FRAMwrite8(i,0x0);
 80801f2:	2100      	movs	r1, #0
 80801f4:	4620      	mov	r0, r4
 80801f6:	f7ff ffed 	bl	80801d4 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 80801fa:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80801fe:	d103      	bne.n	8080208 <_Z9ResetFRAMv+0x24>
 8080200:	f001 fe3a 	bl	8081e78 <_Z16_fetch_usbserialv>
 8080204:	4912      	ldr	r1, [pc, #72]	; (8080250 <_Z9ResetFRAMv+0x6c>)
 8080206:	e014      	b.n	8080232 <_Z9ResetFRAMv+0x4e>
        if (i==16384) Serial.println(F("50% done"));
 8080208:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 808020c:	d103      	bne.n	8080216 <_Z9ResetFRAMv+0x32>
 808020e:	f001 fe33 	bl	8081e78 <_Z16_fetch_usbserialv>
 8080212:	4910      	ldr	r1, [pc, #64]	; (8080254 <_Z9ResetFRAMv+0x70>)
 8080214:	e00d      	b.n	8080232 <_Z9ResetFRAMv+0x4e>
        if (i==(24576)) Serial.println(F("75% done"));
 8080216:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 808021a:	d103      	bne.n	8080224 <_Z9ResetFRAMv+0x40>
 808021c:	f001 fe2c 	bl	8081e78 <_Z16_fetch_usbserialv>
 8080220:	490d      	ldr	r1, [pc, #52]	; (8080258 <_Z9ResetFRAMv+0x74>)
 8080222:	e006      	b.n	8080232 <_Z9ResetFRAMv+0x4e>
        if (i==32767) Serial.println(F("Done"));
 8080224:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8080228:	429c      	cmp	r4, r3
 808022a:	d104      	bne.n	8080236 <_Z9ResetFRAMv+0x52>
 808022c:	f001 fe24 	bl	8081e78 <_Z16_fetch_usbserialv>
 8080230:	490a      	ldr	r1, [pc, #40]	; (808025c <_Z9ResetFRAMv+0x78>)
 8080232:	f001 fc26 	bl	8081a82 <_ZN5Print7printlnEPKc>

void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    Serial.println("Resetting Memory");
    for (unsigned long i=4; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
 8080236:	3401      	adds	r4, #1
 8080238:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 808023c:	d1d9      	bne.n	80801f2 <_Z9ResetFRAMv+0xe>
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 808023e:	2107      	movs	r1, #7
 8080240:	2000      	movs	r0, #0
}
 8080242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 8080246:	f7ff bfc5 	b.w	80801d4 <_Z10FRAMwrite8jh>
 808024a:	bf00      	nop
 808024c:	080833be 	.word	0x080833be
 8080250:	080833cf 	.word	0x080833cf
 8080254:	080833d8 	.word	0x080833d8
 8080258:	080833e1 	.word	0x080833e1
 808025c:	080833ea 	.word	0x080833ea

08080260 <setup>:
int stateOfCharge = 0;            // stores battery charge level value



// setup() runs once, when the device is first turned on.
void setup() {
 8080260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  pinMode(WIRING_int2Pin,INPUT);                                          // PIR Sensor Interrupt pin
 8080262:	2100      	movs	r1, #0
 8080264:	2002      	movs	r0, #2
 8080266:	f001 ff35 	bl	80820d4 <pinMode>
  pinMode(WIRING_userSwitch,INPUT);                                      // Button for user input
 808026a:	2100      	movs	r1, #0
 808026c:	2005      	movs	r0, #5
 808026e:	f001 ff31 	bl	80820d4 <pinMode>
  pinMode(WIRING_wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080272:	2100      	movs	r1, #0
 8080274:	2011      	movs	r0, #17
 8080276:	f001 ff2d 	bl	80820d4 <pinMode>
  pinMode(WIRING_blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 808027a:	2101      	movs	r1, #1
 808027c:	2007      	movs	r0, #7
 808027e:	f001 ff29 	bl	80820d4 <pinMode>
  pinMode(WIRING_tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 8080282:	2101      	movs	r1, #1
 8080284:	201d      	movs	r0, #29
 8080286:	f001 ff25 	bl	80820d4 <pinMode>
  digitalWrite(WIRING_tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 808028a:	2101      	movs	r1, #1
 808028c:	201d      	movs	r0, #29
 808028e:	f001 ff32 	bl	80820f6 <digitalWrite>
  pinMode(WIRING_donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8080292:	2101      	movs	r1, #1
 8080294:	2006      	movs	r0, #6
 8080296:	f001 ff1d 	bl	80820d4 <pinMode>
  digitalWrite(WIRING_donePin,HIGH);
 808029a:	2101      	movs	r1, #1
 808029c:	2006      	movs	r0, #6
 808029e:	f001 ff2a 	bl	80820f6 <digitalWrite>
  digitalWrite(WIRING_donePin,LOW);                                      // Pet the watchdog
 80802a2:	2100      	movs	r1, #0
 80802a4:	2006      	movs	r0, #6
 80802a6:	f001 ff26 	bl	80820f6 <digitalWrite>
  pinMode(WIRING_hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 80802aa:	2101      	movs	r1, #1
 80802ac:	2004      	movs	r0, #4
 80802ae:	f001 ff11 	bl	80820d4 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80802b2:	2300      	movs	r3, #0
 80802b4:	2204      	movs	r2, #4
 80802b6:	4921      	ldr	r1, [pc, #132]	; (808033c <setup+0xdc>)
 80802b8:	4821      	ldr	r0, [pc, #132]	; (8080340 <setup+0xe0>)
 80802ba:	f000 fdbd 	bl	8080e38 <spark_variable>
 80802be:	2300      	movs	r3, #0
 80802c0:	2202      	movs	r2, #2
 80802c2:	4920      	ldr	r1, [pc, #128]	; (8080344 <setup+0xe4>)
 80802c4:	4820      	ldr	r0, [pc, #128]	; (8080348 <setup+0xe8>)
 80802c6:	f000 fdb7 	bl	8080e38 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80802ca:	4a20      	ldr	r2, [pc, #128]	; (808034c <setup+0xec>)
 80802cc:	4920      	ldr	r1, [pc, #128]	; (8080350 <setup+0xf0>)
 80802ce:	4821      	ldr	r0, [pc, #132]	; (8080354 <setup+0xf4>)
 80802d0:	f000 ff4a 	bl	8081168 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", stateOfCharge);
  Particle.function("HardReset",hardResetNow);

  attachInterrupt(WIRING_wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to respond
 80802d4:	2300      	movs	r3, #0
 80802d6:	9300      	str	r3, [sp, #0]
 80802d8:	2201      	movs	r2, #1
 80802da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80802de:	491e      	ldr	r1, [pc, #120]	; (8080358 <setup+0xf8>)
 80802e0:	2011      	movs	r0, #17
 80802e2:	f001 fab5 	bl	8081850 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802e6:	f000 fdc7 	bl	8080e78 <spark_cloud_flag_connected>

  if (!Particle.connected()) {                                     // Only going to connect if we are in connectionMode
 80802ea:	4604      	mov	r4, r0
 80802ec:	b9e0      	cbnz	r0, 8080328 <setup+0xc8>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80802ee:	f000 fdbb 	bl	8080e68 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802f2:	4620      	mov	r0, r4
 80802f4:	f000 fc1c 	bl	8080b30 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802f8:	4604      	mov	r4, r0
 80802fa:	4e18      	ldr	r6, [pc, #96]	; (808035c <setup+0xfc>)
 80802fc:	2500      	movs	r5, #0
 80802fe:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080300:	2000      	movs	r0, #0
 8080302:	f000 fc15 	bl	8080b30 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080306:	1b00      	subs	r0, r0, r4
 8080308:	eb61 0105 	sbc.w	r1, r1, r5
 808030c:	428f      	cmp	r7, r1
 808030e:	bf08      	it	eq
 8080310:	4286      	cmpeq	r6, r0
 8080312:	d305      	bcc.n	8080320 <setup+0xc0>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080314:	f000 fdb0 	bl	8080e78 <spark_cloud_flag_connected>
 8080318:	b910      	cbnz	r0, 8080320 <setup+0xc0>
            spark_process();
 808031a:	f000 fd9d 	bl	8080e58 <spark_process>
 808031e:	e7ef      	b.n	8080300 <setup+0xa0>
 8080320:	f000 fdaa 	bl	8080e78 <spark_cloud_flag_connected>
    Particle.connect();
    waitFor(Particle.connected,90000);                             // 60 seconds then we timeout  -- *** need to add disconnected option and test
    Particle.process();
 8080324:	f7ff ff44 	bl	80801b0 <_ZN10CloudClass7processEv>
  }

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 8080328:	480d      	ldr	r0, [pc, #52]	; (8080360 <setup+0x100>)
 808032a:	f001 f9ed 	bl	8081708 <_ZN9FuelGauge6getSoCEv>
 808032e:	f002 ff9b 	bl	8083268 <__aeabi_f2iz>
 8080332:	4b04      	ldr	r3, [pc, #16]	; (8080344 <setup+0xe4>)
 8080334:	6018      	str	r0, [r3, #0]
}
 8080336:	b003      	add	sp, #12
 8080338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808033a:	bf00      	nop
 808033c:	080833b8 	.word	0x080833b8
 8080340:	080833ef 	.word	0x080833ef
 8080344:	200004a0 	.word	0x200004a0
 8080348:	080833f7 	.word	0x080833f7
 808034c:	08083402 	.word	0x08083402
 8080350:	08080179 	.word	0x08080179
 8080354:	0808113d 	.word	0x0808113d
 8080358:	08080159 	.word	0x08080159
 808035c:	00015f8f 	.word	0x00015f8f
 8080360:	20000490 	.word	0x20000490
 8080364:	00000000 	.word	0x00000000

08080368 <_Z14getTemperaturev>:
  Particle.publish("Test #7", "If you see this message - hard reset test failed", PRIVATE);
  BlinkForever();
}

int getTemperature()
{
 8080368:	b508      	push	{r3, lr}
  int reading = analogRead(WIRING_tmp36Pin);   //getting the voltage reading from the temperature sensor
 808036a:	200a      	movs	r0, #10
 808036c:	f001 feef 	bl	808214e <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080370:	f002 fa2c 	bl	80827cc <__aeabi_i2d>
 8080374:	a314      	add	r3, pc, #80	; (adr r3, 80803c8 <_Z14getTemperaturev+0x60>)
 8080376:	e9d3 2300 	ldrd	r2, r3, [r3]
 808037a:	f002 fa8d 	bl	8082898 <__aeabi_dmul>
 808037e:	f002 fcc5 	bl	8082d0c <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 8080382:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8080386:	f002 fe1f 	bl	8082fc8 <__aeabi_fmul>
 808038a:	f002 fa31 	bl	80827f0 <__aeabi_f2d>
 808038e:	2200      	movs	r2, #0
 8080390:	4b0f      	ldr	r3, [pc, #60]	; (80803d0 <_Z14getTemperaturev+0x68>)
 8080392:	f002 f8cd 	bl	8082530 <__aeabi_dsub>
 8080396:	2200      	movs	r2, #0
 8080398:	4b0e      	ldr	r3, [pc, #56]	; (80803d4 <_Z14getTemperaturev+0x6c>)
 808039a:	f002 fa7d 	bl	8082898 <__aeabi_dmul>
 808039e:	f002 fc8d 	bl	8082cbc <__aeabi_d2iz>
 80803a2:	f002 fa13 	bl	80827cc <__aeabi_i2d>
 80803a6:	2200      	movs	r2, #0
 80803a8:	4b0b      	ldr	r3, [pc, #44]	; (80803d8 <_Z14getTemperaturev+0x70>)
 80803aa:	f002 fa75 	bl	8082898 <__aeabi_dmul>
 80803ae:	2200      	movs	r2, #0
 80803b0:	4b0a      	ldr	r3, [pc, #40]	; (80803dc <_Z14getTemperaturev+0x74>)
 80803b2:	f002 fb9b 	bl	8082aec <__aeabi_ddiv>
 80803b6:	2200      	movs	r2, #0
 80803b8:	4b09      	ldr	r3, [pc, #36]	; (80803e0 <_Z14getTemperaturev+0x78>)
 80803ba:	f002 f8bb 	bl	8082534 <__adddf3>
 80803be:	f002 fc7d 	bl	8082cbc <__aeabi_d2iz>
 80803c2:	4b08      	ldr	r3, [pc, #32]	; (80803e4 <_Z14getTemperaturev+0x7c>)
 80803c4:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
 80803c6:	bd08      	pop	{r3, pc}
 80803c8:	66666666 	.word	0x66666666
 80803cc:	400a6666 	.word	0x400a6666
 80803d0:	3fe00000 	.word	0x3fe00000
 80803d4:	40590000 	.word	0x40590000
 80803d8:	40220000 	.word	0x40220000
 80803dc:	40140000 	.word	0x40140000
 80803e0:	40400000 	.word	0x40400000
 80803e4:	20000470 	.word	0x20000470

080803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80803e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80803ea:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80803ec:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80803ee:	b17c      	cbz	r4, 8080410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80803f0:	6863      	ldr	r3, [r4, #4]
 80803f2:	3b01      	subs	r3, #1
 80803f4:	6063      	str	r3, [r4, #4]
 80803f6:	b95b      	cbnz	r3, 8080410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80803f8:	6823      	ldr	r3, [r4, #0]
 80803fa:	4620      	mov	r0, r4
 80803fc:	689b      	ldr	r3, [r3, #8]
 80803fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080400:	68a3      	ldr	r3, [r4, #8]
 8080402:	3b01      	subs	r3, #1
 8080404:	60a3      	str	r3, [r4, #8]
 8080406:	b91b      	cbnz	r3, 8080410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080408:	6823      	ldr	r3, [r4, #0]
 808040a:	4620      	mov	r0, r4
 808040c:	68db      	ldr	r3, [r3, #12]
 808040e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080410:	4628      	mov	r0, r5
 8080412:	bd38      	pop	{r3, r4, r5, pc}

08080414 <_Z12BlinkForeverv>:
  watchdogInterrupt = true;
  digitalWrite(WIRING_donePin, HIGH);                              // Pet the watchdog
  digitalWrite(WIRING_donePin, LOW);
}

void BlinkForever() {
 8080414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  delay(1000);
 8080416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808041a:	f000 fdcd 	bl	8080fb8 <delay>
 808041e:	4b0f      	ldr	r3, [pc, #60]	; (808045c <_Z12BlinkForeverv+0x48>)
 8080420:	2200      	movs	r2, #0
 8080422:	781b      	ldrb	r3, [r3, #0]
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
 8080424:	a802      	add	r0, sp, #8
 8080426:	f88d 2000 	strb.w	r2, [sp]
 808042a:	490d      	ldr	r1, [pc, #52]	; (8080460 <_Z12BlinkForeverv+0x4c>)
 808042c:	f7ff feb2 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080430:	a803      	add	r0, sp, #12
 8080432:	f7ff ffd9 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("Test Failed" "Reset Device to Continue", PRIVATE);
  while(1) {
    digitalWrite(WIRING_blueLED,HIGH);
 8080436:	2101      	movs	r1, #1
 8080438:	2007      	movs	r0, #7
 808043a:	f001 fe5c 	bl	80820f6 <digitalWrite>
    delay(2000);
 808043e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080442:	f000 fdb9 	bl	8080fb8 <delay>
    digitalWrite(WIRING_blueLED,LOW);
 8080446:	2100      	movs	r1, #0
 8080448:	2007      	movs	r0, #7
 808044a:	f001 fe54 	bl	80820f6 <digitalWrite>
    delay(2000);
 808044e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080452:	f000 fdb1 	bl	8080fb8 <delay>
    Particle.process();
 8080456:	f7ff feab 	bl	80801b0 <_ZN10CloudClass7processEv>
 808045a:	e7ec      	b.n	8080436 <_Z12BlinkForeverv+0x22>
 808045c:	2000048c 	.word	0x2000048c
 8080460:	0808340c 	.word	0x0808340c

08080464 <loop>:

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
}


void loop() {
 8080464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080466:	4c9e      	ldr	r4, [pc, #632]	; (80806e0 <loop+0x27c>)
 8080468:	b099      	sub	sp, #100	; 0x64
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808046a:	2500      	movs	r5, #0
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
 808046c:	499d      	ldr	r1, [pc, #628]	; (80806e4 <loop+0x280>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808046e:	7823      	ldrb	r3, [r4, #0]
 8080470:	4a9d      	ldr	r2, [pc, #628]	; (80806e8 <loop+0x284>)
 8080472:	a808      	add	r0, sp, #32
 8080474:	f88d 5000 	strb.w	r5, [sp]
 8080478:	f7ff fe8c 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808047c:	a809      	add	r0, sp, #36	; 0x24
 808047e:	f7ff ffb3 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080486:	f000 fd97 	bl	8080fb8 <delay>
  Particle.process();
 808048a:	f7ff fe91 	bl	80801b0 <_ZN10CloudClass7processEv>

  if (!fram.begin()) {                                                // You can stick the new i2c addr in here, e.g. begin(0x51);
 808048e:	2150      	movs	r1, #80	; 0x50
 8080490:	4896      	ldr	r0, [pc, #600]	; (80806ec <loop+0x288>)
 8080492:	f7ff fe15 	bl	80800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>
 8080496:	b958      	cbnz	r0, 80804b0 <loop+0x4c>
    Particle.publish("Test #1", "Failed - Missing FRAM", PRIVATE);    // Can't communicate with FRAM - failed test
 8080498:	f88d 0000 	strb.w	r0, [sp]
 808049c:	7823      	ldrb	r3, [r4, #0]
 808049e:	a808      	add	r0, sp, #32
 80804a0:	4a93      	ldr	r2, [pc, #588]	; (80806f0 <loop+0x28c>)
 80804a2:	4994      	ldr	r1, [pc, #592]	; (80806f4 <loop+0x290>)
 80804a4:	f7ff fe76 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80804a8:	a809      	add	r0, sp, #36	; 0x24
 80804aa:	f7ff ff9d 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80804ae:	e011      	b.n	80804d4 <loop+0x70>
  }
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                 // Check to see if the memory map in the sketch matches the data on the chip
 80804b0:	4628      	mov	r0, r5
 80804b2:	f7ff fe89 	bl	80801c8 <_Z9FRAMread8j>
 80804b6:	2807      	cmp	r0, #7
 80804b8:	d00c      	beq.n	80804d4 <loop+0x70>
 80804ba:	7823      	ldrb	r3, [r4, #0]
    Particle.publish("Test #1", "In process - Erasing FRAM", PRIVATE);
 80804bc:	4a8e      	ldr	r2, [pc, #568]	; (80806f8 <loop+0x294>)
 80804be:	498d      	ldr	r1, [pc, #564]	; (80806f4 <loop+0x290>)
 80804c0:	a808      	add	r0, sp, #32
 80804c2:	f88d 5000 	strb.w	r5, [sp]
 80804c6:	f7ff fe65 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80804ca:	a809      	add	r0, sp, #36	; 0x24
 80804cc:	f7ff ff8c 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    ResetFRAM();                                                      // Reset the FRAM to correct the issue
 80804d0:	f7ff fe88 	bl	80801e4 <_Z9ResetFRAMv>
  }
  delay(1000);
 80804d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80804d8:	f000 fd6e 	bl	8080fb8 <delay>
  Particle.process();
 80804dc:	f7ff fe68 	bl	80801b0 <_ZN10CloudClass7processEv>

  if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) Particle.publish("Test #1", "Failed - FRAM Read Error", PRIVATE);
 80804e0:	2000      	movs	r0, #0
 80804e2:	f7ff fe71 	bl	80801c8 <_Z9FRAMread8j>
 80804e6:	2200      	movs	r2, #0
 80804e8:	2807      	cmp	r0, #7
 80804ea:	f88d 2000 	strb.w	r2, [sp]
 80804ee:	7823      	ldrb	r3, [r4, #0]
 80804f0:	bf14      	ite	ne
 80804f2:	4a82      	ldrne	r2, [pc, #520]	; (80806fc <loop+0x298>)
  else Particle.publish("Test #1", "FRAM Test Passed", PRIVATE);
 80804f4:	4a82      	ldreq	r2, [pc, #520]	; (8080700 <loop+0x29c>)
 80804f6:	497f      	ldr	r1, [pc, #508]	; (80806f4 <loop+0x290>)
 80804f8:	a808      	add	r0, sp, #32
 80804fa:	f7ff fe4b 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80804fe:	a809      	add	r0, sp, #36	; 0x24
 8080500:	f7ff ff72 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080508:	f000 fd56 	bl	8080fb8 <delay>
  Particle.process();
 808050c:	f7ff fe50 	bl	80801b0 <_ZN10CloudClass7processEv>

  int tempValue = getTemperature();
 8080510:	f7ff ff2a 	bl	8080368 <_Z14getTemperaturev>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080514:	2500      	movs	r5, #0
  char data[64];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "Temperature is %iF", tempValue);
 8080516:	4603      	mov	r3, r0
 8080518:	4a7a      	ldr	r2, [pc, #488]	; (8080704 <loop+0x2a0>)
 808051a:	2140      	movs	r1, #64	; 0x40
 808051c:	a808      	add	r0, sp, #32
 808051e:	f000 fd33 	bl	8080f88 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080522:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #2", data, PRIVATE);
 8080524:	aa08      	add	r2, sp, #32
 8080526:	4978      	ldr	r1, [pc, #480]	; (8080708 <loop+0x2a4>)
 8080528:	a806      	add	r0, sp, #24
 808052a:	f88d 5000 	strb.w	r5, [sp]
 808052e:	f7ff fe31 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080532:	a807      	add	r0, sp, #28
 8080534:	f7ff ff58 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808053c:	f000 fd3c 	bl	8080fb8 <delay>
  Particle.process();
 8080540:	f7ff fe36 	bl	80801b0 <_ZN10CloudClass7processEv>
 8080544:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #3", "Press User Switch",PRIVATE);
 8080546:	4a71      	ldr	r2, [pc, #452]	; (808070c <loop+0x2a8>)
 8080548:	4971      	ldr	r1, [pc, #452]	; (8080710 <loop+0x2ac>)
 808054a:	a806      	add	r0, sp, #24
 808054c:	f88d 5000 	strb.w	r5, [sp]
 8080550:	f7ff fe20 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080554:	a807      	add	r0, sp, #28
 8080556:	f7ff ff47 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808055a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808055e:	f000 fd2b 	bl	8080fb8 <delay>
  while(digitalRead(WIRING_userSwitch)) Particle.process();
 8080562:	2005      	movs	r0, #5
 8080564:	f001 fde0 	bl	8082128 <digitalRead>
 8080568:	4605      	mov	r5, r0
 808056a:	b110      	cbz	r0, 8080572 <loop+0x10e>
 808056c:	f7ff fe20 	bl	80801b0 <_ZN10CloudClass7processEv>
 8080570:	e7f7      	b.n	8080562 <loop+0xfe>
 8080572:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #3", "User Switch Press Detected",PRIVATE);
 8080574:	4a67      	ldr	r2, [pc, #412]	; (8080714 <loop+0x2b0>)
 8080576:	4966      	ldr	r1, [pc, #408]	; (8080710 <loop+0x2ac>)
 8080578:	f88d 0000 	strb.w	r0, [sp]
 808057c:	a806      	add	r0, sp, #24
 808057e:	f7ff fe09 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080582:	a807      	add	r0, sp, #28
 8080584:	f7ff ff30 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808058c:	f000 fd14 	bl	8080fb8 <delay>
  Particle.process();
 8080590:	f7ff fe0e 	bl	80801b0 <_ZN10CloudClass7processEv>
 8080594:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #4", "Started testing Accelerometer - pls wait", PRIVATE);
 8080596:	4a60      	ldr	r2, [pc, #384]	; (8080718 <loop+0x2b4>)
 8080598:	4960      	ldr	r1, [pc, #384]	; (808071c <loop+0x2b8>)
 808059a:	f88d 5000 	strb.w	r5, [sp]
 808059e:	a806      	add	r0, sp, #24
 80805a0:	f7ff fdf8 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80805a4:	a807      	add	r0, sp, #28
 80805a6:	f7ff ff1f 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80805aa:	f000 faa9 	bl	8080b00 <HAL_Timer_Get_Milli_Seconds>
 80805ae:	4605      	mov	r5, r0
  unsigned long waitForAccel = millis();
  // Initialize the accelerometer with begin():
  // begin can take two parameters: full-scale range, and output data rate (ODR).
  // Full-scale range can be: SCALE_2G, SCALE_4G, or SCALE_8G (2, 4, or 8g)
  // ODR can be: ODR_800, ODR_400, ODR_200, ODR_100, ODR_50, ODR_12, ODR_6 or ODR_1
  accel.begin(SCALE_2G, ODR_1); // Set up accel with +/-2g range, and slowest (1Hz) ODR
 80805b0:	2207      	movs	r2, #7
 80805b2:	2102      	movs	r1, #2
 80805b4:	485a      	ldr	r0, [pc, #360]	; (8080720 <loop+0x2bc>)
 80805b6:	f000 f9ed 	bl	8080994 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>
  do {
 80805ba:	f505 45ea 	add.w	r5, r5, #29952	; 0x7500
 80805be:	3530      	adds	r5, #48	; 0x30
    if (accel.available())
 80805c0:	4857      	ldr	r0, [pc, #348]	; (8080720 <loop+0x2bc>)
 80805c2:	f000 f990 	bl	80808e6 <_ZN8MMA8452Q9availableEv>
 80805c6:	4e56      	ldr	r6, [pc, #344]	; (8080720 <loop+0x2bc>)
 80805c8:	b120      	cbz	r0, 80805d4 <loop+0x170>
    {
    // To update acceleration values from the accelerometer, call accel.read();
        accel.read();
 80805ca:	4630      	mov	r0, r6
 80805cc:	f000 fa32 	bl	8080a34 <_ZN8MMA8452Q4readEv>

    // After reading, six class variables are updated: x, y, z, cx, cy, and cz.
    // Those are the raw, 12-bit values (x, y, and z) and the calculated
    // acceleration's in units of g (cx, cy, and cz).
    Particle.process();
 80805d0:	f7ff fdee 	bl	80801b0 <_ZN10CloudClass7processEv>
 80805d4:	f000 fa94 	bl	8080b00 <HAL_Timer_Get_Milli_Seconds>
  // Initialize the accelerometer with begin():
  // begin can take two parameters: full-scale range, and output data rate (ODR).
  // Full-scale range can be: SCALE_2G, SCALE_4G, or SCALE_8G (2, 4, or 8g)
  // ODR can be: ODR_800, ODR_400, ODR_200, ODR_100, ODR_50, ODR_12, ODR_6 or ODR_1
  accel.begin(SCALE_2G, ODR_1); // Set up accel with +/-2g range, and slowest (1Hz) ODR
  do {
 80805d8:	42a8      	cmp	r0, r5
 80805da:	d9f1      	bls.n	80805c0 <loop+0x15c>
    // acceleration's in units of g (cx, cy, and cz).
    Particle.process();
    }

  } while (millis() <= waitForAccel + 30000);  // Give it 30 seconds.
  snprintf(data, sizeof(data), "Acceleration Data is X: %2.1f, Y: %2.1f, Z: %2.1f", accel.cx, accel.cy, accel.cz);
 80805dc:	6930      	ldr	r0, [r6, #16]
 80805de:	f002 f907 	bl	80827f0 <__aeabi_f2d>
 80805e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80805e6:	68f0      	ldr	r0, [r6, #12]
 80805e8:	f002 f902 	bl	80827f0 <__aeabi_f2d>
 80805ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80805f0:	68b0      	ldr	r0, [r6, #8]
 80805f2:	f002 f8fd 	bl	80827f0 <__aeabi_f2d>
 80805f6:	4a4b      	ldr	r2, [pc, #300]	; (8080724 <loop+0x2c0>)
 80805f8:	e9cd 0100 	strd	r0, r1, [sp]
 80805fc:	2140      	movs	r1, #64	; 0x40
 80805fe:	a808      	add	r0, sp, #32
 8080600:	f000 fcc2 	bl	8080f88 <snprintf>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080604:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080606:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #4", data, PRIVATE);
 8080608:	4944      	ldr	r1, [pc, #272]	; (808071c <loop+0x2b8>)
 808060a:	f88d 2000 	strb.w	r2, [sp]
 808060e:	a806      	add	r0, sp, #24
 8080610:	aa08      	add	r2, sp, #32
 8080612:	f7ff fdbf 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080616:	a807      	add	r0, sp, #28
 8080618:	f7ff fee6 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080620:	f000 fcca 	bl	8080fb8 <delay>
  Particle.process();
 8080624:	f7ff fdc4 	bl	80801b0 <_ZN10CloudClass7processEv>

  do {
    if (millis() >= updateInterval + lastUpdate) {
 8080628:	4f3f      	ldr	r7, [pc, #252]	; (8080728 <loop+0x2c4>)
 808062a:	4e40      	ldr	r6, [pc, #256]	; (808072c <loop+0x2c8>)
 808062c:	4d40      	ldr	r5, [pc, #256]	; (8080730 <loop+0x2cc>)
 808062e:	f000 fa67 	bl	8080b00 <HAL_Timer_Get_Milli_Seconds>
 8080632:	6833      	ldr	r3, [r6, #0]
 8080634:	683a      	ldr	r2, [r7, #0]
 8080636:	4413      	add	r3, r2
 8080638:	4298      	cmp	r0, r3
 808063a:	d31c      	bcc.n	8080676 <loop+0x212>
      stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 808063c:	483d      	ldr	r0, [pc, #244]	; (8080734 <loop+0x2d0>)
 808063e:	f001 f863 	bl	8081708 <_ZN9FuelGauge6getSoCEv>
 8080642:	f002 fe11 	bl	8083268 <__aeabi_f2iz>
      snprintf(data, sizeof(data), "Battery charge level = %i", stateOfCharge);
 8080646:	4a3c      	ldr	r2, [pc, #240]	; (8080738 <loop+0x2d4>)
  delay(1000);
  Particle.process();

  do {
    if (millis() >= updateInterval + lastUpdate) {
      stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 8080648:	4603      	mov	r3, r0
 808064a:	6028      	str	r0, [r5, #0]
      snprintf(data, sizeof(data), "Battery charge level = %i", stateOfCharge);
 808064c:	2140      	movs	r1, #64	; 0x40
 808064e:	a808      	add	r0, sp, #32
 8080650:	f000 fc9a 	bl	8080f88 <snprintf>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080654:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080656:	7823      	ldrb	r3, [r4, #0]
      Particle.publish("Test #5", data, PRIVATE);
 8080658:	4938      	ldr	r1, [pc, #224]	; (808073c <loop+0x2d8>)
 808065a:	f88d 2000 	strb.w	r2, [sp]
 808065e:	a806      	add	r0, sp, #24
 8080660:	aa08      	add	r2, sp, #32
 8080662:	f7ff fd97 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080666:	a807      	add	r0, sp, #28
 8080668:	f7ff febe 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.process();
 808066c:	f7ff fda0 	bl	80801b0 <_ZN10CloudClass7processEv>
 8080670:	f000 fa46 	bl	8080b00 <HAL_Timer_Get_Milli_Seconds>
      lastUpdate = millis();
 8080674:	6030      	str	r0, [r6, #0]
    }
  }  while(stateOfCharge <= 65);
 8080676:	682b      	ldr	r3, [r5, #0]
 8080678:	2b41      	cmp	r3, #65	; 0x41
 808067a:	ddd8      	ble.n	808062e <loop+0x1ca>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808067c:	2700      	movs	r7, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808067e:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #6", "Battery charge test passed", PRIVATE);
 8080680:	4a2f      	ldr	r2, [pc, #188]	; (8080740 <loop+0x2dc>)
 8080682:	4930      	ldr	r1, [pc, #192]	; (8080744 <loop+0x2e0>)
 8080684:	a806      	add	r0, sp, #24
 8080686:	f88d 7000 	strb.w	r7, [sp]
 808068a:	f7ff fd83 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808068e:	a807      	add	r0, sp, #28
 8080690:	f7ff feaa 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>


  time_t beginTime = Time.now();
 8080694:	f001 fb20 	bl	8081cd8 <_ZN9TimeClass3nowEv>
  watchdogISR();
  watchdogInterrupt = false;
 8080698:	4d2b      	ldr	r5, [pc, #172]	; (8080748 <loop+0x2e4>)
    }
  }  while(stateOfCharge <= 65);
  Particle.publish("Test #6", "Battery charge test passed", PRIVATE);


  time_t beginTime = Time.now();
 808069a:	4606      	mov	r6, r0
  watchdogISR();
 808069c:	f7ff fd5c 	bl	8080158 <_Z11watchdogISRv>
  watchdogInterrupt = false;
 80806a0:	702f      	strb	r7, [r5, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80806a2:	f000 fbe9 	bl	8080e78 <spark_cloud_flag_connected>

  if (Particle.connected()) Particle.publish("Test #7 Started","Expect this test to take ~60 minutes",PRIVATE);
 80806a6:	b158      	cbz	r0, 80806c0 <loop+0x25c>
 80806a8:	4b0d      	ldr	r3, [pc, #52]	; (80806e0 <loop+0x27c>)
 80806aa:	a806      	add	r0, sp, #24
 80806ac:	781b      	ldrb	r3, [r3, #0]
 80806ae:	4a27      	ldr	r2, [pc, #156]	; (808074c <loop+0x2e8>)
 80806b0:	f88d 7000 	strb.w	r7, [sp]
 80806b4:	4926      	ldr	r1, [pc, #152]	; (8080750 <loop+0x2ec>)
 80806b6:	f7ff fd6d 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80806ba:	a807      	add	r0, sp, #28
 80806bc:	f7ff fe94 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80806c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80806c4:	f000 fc78 	bl	8080fb8 <delay>
  Particle.process();
 80806c8:	f7ff fd72 	bl	80801b0 <_ZN10CloudClass7processEv>

  while(!watchdogInterrupt) {
 80806cc:	782b      	ldrb	r3, [r5, #0]
 80806ce:	2b00      	cmp	r3, #0
 80806d0:	d140      	bne.n	8080754 <loop+0x2f0>
    Particle.process();
 80806d2:	f7ff fd6d 	bl	80801b0 <_ZN10CloudClass7processEv>
    delay(1000);
 80806d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80806da:	f000 fc6d 	bl	8080fb8 <delay>

  if (Particle.connected()) Particle.publish("Test #7 Started","Expect this test to take ~60 minutes",PRIVATE);
  delay(1000);
  Particle.process();

  while(!watchdogInterrupt) {
 80806de:	e7f5      	b.n	80806cc <loop+0x268>
 80806e0:	2000048c 	.word	0x2000048c
 80806e4:	08083443 	.word	0x08083443
 80806e8:	08083430 	.word	0x08083430
 80806ec:	2000048d 	.word	0x2000048d
 80806f0:	0808344e 	.word	0x0808344e
 80806f4:	08083464 	.word	0x08083464
 80806f8:	0808346c 	.word	0x0808346c
 80806fc:	08083486 	.word	0x08083486
 8080700:	0808349f 	.word	0x0808349f
 8080704:	080834b0 	.word	0x080834b0
 8080708:	080834c3 	.word	0x080834c3
 808070c:	080834cb 	.word	0x080834cb
 8080710:	080834dd 	.word	0x080834dd
 8080714:	080834e5 	.word	0x080834e5
 8080718:	08083500 	.word	0x08083500
 808071c:	08083529 	.word	0x08083529
 8080720:	20000474 	.word	0x20000474
 8080724:	08083531 	.word	0x08083531
 8080728:	20000400 	.word	0x20000400
 808072c:	2000049c 	.word	0x2000049c
 8080730:	200004a0 	.word	0x200004a0
 8080734:	20000490 	.word	0x20000490
 8080738:	08083563 	.word	0x08083563
 808073c:	0808357d 	.word	0x0808357d
 8080740:	08083585 	.word	0x08083585
 8080744:	080835a0 	.word	0x080835a0
 8080748:	20000498 	.word	0x20000498
 808074c:	080835a8 	.word	0x080835a8
 8080750:	080835cd 	.word	0x080835cd
    Particle.process();
    delay(1000);
  }

  int elapsedMinutes = (Time.now() - beginTime)/60;
 8080754:	f001 fac0 	bl	8081cd8 <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "Elapsed time in minutes is %i", elapsedMinutes);
 8080758:	233c      	movs	r3, #60	; 0x3c
 808075a:	1b80      	subs	r0, r0, r6
 808075c:	fb90 f3f3 	sdiv	r3, r0, r3
 8080760:	4a1e      	ldr	r2, [pc, #120]	; (80807dc <loop+0x378>)
 8080762:	2140      	movs	r1, #64	; 0x40
 8080764:	a808      	add	r0, sp, #32
 8080766:	f000 fc0f 	bl	8080f88 <snprintf>
 808076a:	f000 fb85 	bl	8080e78 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Test #7 Finished", data ,PRIVATE);
 808076e:	b158      	cbz	r0, 8080788 <loop+0x324>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080770:	2200      	movs	r2, #0
 8080772:	f88d 2000 	strb.w	r2, [sp]
 8080776:	a806      	add	r0, sp, #24
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080778:	7823      	ldrb	r3, [r4, #0]
 808077a:	aa08      	add	r2, sp, #32
 808077c:	4918      	ldr	r1, [pc, #96]	; (80807e0 <loop+0x37c>)
 808077e:	f7ff fd09 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080782:	a807      	add	r0, sp, #28
 8080784:	f7ff fe30 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808078c:	2500      	movs	r5, #0
 808078e:	f000 fc13 	bl	8080fb8 <delay>
  Particle.process();
 8080792:	f7ff fd0d 	bl	80801b0 <_ZN10CloudClass7processEv>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080796:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #7", "Final Test - Hard Reset in 1 second",PRIVATE);
 8080798:	4a12      	ldr	r2, [pc, #72]	; (80807e4 <loop+0x380>)
 808079a:	4913      	ldr	r1, [pc, #76]	; (80807e8 <loop+0x384>)
 808079c:	a806      	add	r0, sp, #24
 808079e:	f88d 5000 	strb.w	r5, [sp]
 80807a2:	f7ff fcf7 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80807a6:	a807      	add	r0, sp, #28
 80807a8:	f7ff fe1e 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80807ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80807b0:	f000 fc02 	bl	8080fb8 <delay>
  Particle.process();
 80807b4:	f7ff fcfc 	bl	80801b0 <_ZN10CloudClass7processEv>

  digitalWrite(WIRING_hardResetPin,HIGH);                    // Zero the count so only every three
 80807b8:	2101      	movs	r1, #1
 80807ba:	2004      	movs	r0, #4
 80807bc:	f001 fc9b 	bl	80820f6 <digitalWrite>
 80807c0:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #7", "If you see this message - hard reset test failed", PRIVATE);
 80807c2:	4a0a      	ldr	r2, [pc, #40]	; (80807ec <loop+0x388>)
 80807c4:	4908      	ldr	r1, [pc, #32]	; (80807e8 <loop+0x384>)
 80807c6:	a806      	add	r0, sp, #24
 80807c8:	f88d 5000 	strb.w	r5, [sp]
 80807cc:	f7ff fce2 	bl	8080194 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80807d0:	a807      	add	r0, sp, #28
 80807d2:	f7ff fe09 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  BlinkForever();
 80807d6:	f7ff fe1d 	bl	8080414 <_Z12BlinkForeverv>
 80807da:	bf00      	nop
 80807dc:	080835dd 	.word	0x080835dd
 80807e0:	080835fb 	.word	0x080835fb
 80807e4:	0808360c 	.word	0x0808360c
 80807e8:	08083630 	.word	0x08083630
 80807ec:	08083638 	.word	0x08083638

080807f0 <_GLOBAL__sub_I_accel>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80807f0:	4b0e      	ldr	r3, [pc, #56]	; (808082c <_GLOBAL__sub_I_accel+0x3c>)
  {
    digitalWrite(WIRING_hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 80807f2:	b510      	push	{r4, lr}
 80807f4:	2401      	movs	r4, #1
 80807f6:	701c      	strb	r4, [r3, #0]
 80807f8:	f000 f9a2 	bl	8080b40 <HAL_Pin_Map>
*/
// Include the library:
#include "SparkFunMMA8452Q/SparkFunMMA8452Q.h"

// Create an MMA8452Q object, used throughout the rest of the sketch.
MMA8452Q accel; // Default constructor, SA0 pin is HIGH
 80807fc:	211d      	movs	r1, #29
 80807fe:	480c      	ldr	r0, [pc, #48]	; (8080830 <_GLOBAL__sub_I_accel+0x40>)
 8080800:	f000 f820 	bl	8080844 <_ZN8MMA8452QC1Eh>
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 8080804:	480b      	ldr	r0, [pc, #44]	; (8080834 <_GLOBAL__sub_I_accel+0x44>)
 8080806:	f7ff fc58 	bl	80800ba <_ZN17Adafruit_FRAM_I2CC1Ev>
 #include "electrondoc.h"                                 // Documents pinout
 #include "MMA8452-Functions.h"                           // Adds the accelerometer functions


 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 808080a:	4620      	mov	r0, r4
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 808080c:	4c0a      	ldr	r4, [pc, #40]	; (8080838 <_GLOBAL__sub_I_accel+0x48>)
 #include "electrondoc.h"                                 // Documents pinout
 #include "MMA8452-Functions.h"                           // Adds the accelerometer functions


 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 808080e:	2100      	movs	r1, #0
 8080810:	f000 fade 	bl	8080dd0 <system_thread_set_state>
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 8080814:	2100      	movs	r1, #0
 8080816:	4620      	mov	r0, r4
 8080818:	f000 ff36 	bl	8081688 <_ZN9FuelGaugeC1Eb>
 808081c:	4620      	mov	r0, r4
  {
    digitalWrite(WIRING_hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 808081e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 #include "MMA8452-Functions.h"                           // Adds the accelerometer functions


 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 8080822:	4a06      	ldr	r2, [pc, #24]	; (808083c <_GLOBAL__sub_I_accel+0x4c>)
 8080824:	4906      	ldr	r1, [pc, #24]	; (8080840 <_GLOBAL__sub_I_accel+0x50>)
 8080826:	f001 bd2f 	b.w	8082288 <__aeabi_atexit>
 808082a:	bf00      	nop
 808082c:	2000048c 	.word	0x2000048c
 8080830:	20000474 	.word	0x20000474
 8080834:	2000048d 	.word	0x2000048d
 8080838:	20000490 	.word	0x20000490
 808083c:	2000046c 	.word	0x2000046c
 8080840:	080816a7 	.word	0x080816a7

08080844 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
 8080844:	7501      	strb	r1, [r0, #20]
}
 8080846:	4770      	bx	lr

08080848 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
 8080848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808084a:	4607      	mov	r7, r0
 808084c:	460c      	mov	r4, r1
 808084e:	4615      	mov	r5, r2
 8080850:	461e      	mov	r6, r3
	Wire.beginTransmission(address);
 8080852:	f001 fc93 	bl	808217c <_Z19__fetch_global_Wirev>
 8080856:	7d39      	ldrb	r1, [r7, #20]
 8080858:	f000 ffd4 	bl	8081804 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
 808085c:	f001 fc8e 	bl	808217c <_Z19__fetch_global_Wirev>
 8080860:	4621      	mov	r1, r4
 8080862:	f7ff fc26 	bl	80800b2 <_ZN7TwoWire5writeEi>
 8080866:	462c      	mov	r4, r5
	for (int x = 0; x < len; x++)
 8080868:	1b63      	subs	r3, r4, r5
 808086a:	429e      	cmp	r6, r3
 808086c:	dd07      	ble.n	808087e <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x36>
		Wire.write(buffer[x]);
 808086e:	f001 fc85 	bl	808217c <_Z19__fetch_global_Wirev>
 8080872:	6803      	ldr	r3, [r0, #0]
 8080874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8080878:	689b      	ldr	r3, [r3, #8]
 808087a:	4798      	blx	r3
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
	Wire.beginTransmission(address);
	Wire.write(reg);
	for (int x = 0; x < len; x++)
 808087c:	e7f4      	b.n	8080868 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x20>
		Wire.write(buffer[x]);
	Wire.endTransmission(); //Stop transmitting
 808087e:	f001 fc7d 	bl	808217c <_Z19__fetch_global_Wirev>
}
 8080882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
{
	Wire.beginTransmission(address);
	Wire.write(reg);
	for (int x = 0; x < len; x++)
		Wire.write(buffer[x]);
	Wire.endTransmission(); //Stop transmitting
 8080886:	f000 bfc8 	b.w	808181a <_ZN7TwoWire15endTransmissionEv>

0808088a <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
}

// WRITE A SINGLE REGISTER
// 	Write a single byte of data to a register in the MMA8452Q.
void MMA8452Q::writeRegister(MMA8452Q_Register reg, byte data)
{
 808088a:	b513      	push	{r0, r1, r4, lr}
 808088c:	ac02      	add	r4, sp, #8
 808088e:	f804 2d01 	strb.w	r2, [r4, #-1]!
	writeRegisters(reg, &data, 1);
 8080892:	2301      	movs	r3, #1
 8080894:	4622      	mov	r2, r4
 8080896:	f7ff ffd7 	bl	8080848 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
 808089a:	b002      	add	sp, #8
 808089c:	bd10      	pop	{r4, pc}

0808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:
}

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
 808089e:	b538      	push	{r3, r4, r5, lr}
 80808a0:	4604      	mov	r4, r0
 80808a2:	460d      	mov	r5, r1
	Wire.beginTransmission(address);
 80808a4:	f001 fc6a 	bl	808217c <_Z19__fetch_global_Wirev>
 80808a8:	7d21      	ldrb	r1, [r4, #20]
 80808aa:	f000 ffab 	bl	8081804 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
 80808ae:	f001 fc65 	bl	808217c <_Z19__fetch_global_Wirev>
 80808b2:	4629      	mov	r1, r5
 80808b4:	f7ff fbfd 	bl	80800b2 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
 80808b8:	f001 fc60 	bl	808217c <_Z19__fetch_global_Wirev>
 80808bc:	2100      	movs	r1, #0
 80808be:	f000 ffa8 	bl	8081812 <_ZN7TwoWire15endTransmissionEh>
 80808c2:	b108      	cbz	r0, 80808c8 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
    	    return Wire.read();
	}
	
    return 0;
 80808c4:	2000      	movs	r0, #0
 80808c6:	bd38      	pop	{r3, r4, r5, pc}
	Wire.write(reg);
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
	{
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
 80808c8:	f001 fc58 	bl	808217c <_Z19__fetch_global_Wirev>
 80808cc:	2201      	movs	r2, #1
 80808ce:	7d21      	ldrb	r1, [r4, #20]
 80808d0:	f000 ff8e 	bl	80817f0 <_ZN7TwoWire11requestFromEii>
 80808d4:	2801      	cmp	r0, #1
 80808d6:	d1f5      	bne.n	80808c4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x26>
    	    return Wire.read();
 80808d8:	f001 fc50 	bl	808217c <_Z19__fetch_global_Wirev>
 80808dc:	6803      	ldr	r3, [r0, #0]
 80808de:	695b      	ldr	r3, [r3, #20]
 80808e0:	4798      	blx	r3
 80808e2:	b2c0      	uxtb	r0, r0
	}
	
    return 0;
}
 80808e4:	bd38      	pop	{r3, r4, r5, pc}

080808e6 <_ZN8MMA8452Q9availableEv>:

// CHECK IF NEW DATA IS AVAILABLE
//	This function checks the status of the MMA8452Q to see if new data is availble.
//	returns 0 if no new data is present, or a 1 if new data is available.
byte MMA8452Q::available()
{
 80808e6:	b508      	push	{r3, lr}
	return (readRegister(STATUS) & 0x08) >> 3;
 80808e8:	2100      	movs	r1, #0
 80808ea:	f7ff ffd8 	bl	808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
}
 80808ee:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80808f2:	bd08      	pop	{r3, pc}

080808f4 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:

// SET FULL-SCALE RANGE
//	This function sets the full-scale range of the x, y, and z axis accelerometers.
//	Possible values for the fsr variable are SCALE_2G, SCALE_4G, or SCALE_8G.
void MMA8452Q::setScale(MMA8452Q_Scale fsr)
{
 80808f4:	b538      	push	{r3, r4, r5, lr}
 80808f6:	460d      	mov	r5, r1
	// Must be in standby mode to make changes!!!
	byte cfg = readRegister(XYZ_DATA_CFG);
 80808f8:	210e      	movs	r1, #14

// SET FULL-SCALE RANGE
//	This function sets the full-scale range of the x, y, and z axis accelerometers.
//	Possible values for the fsr variable are SCALE_2G, SCALE_4G, or SCALE_8G.
void MMA8452Q::setScale(MMA8452Q_Scale fsr)
{
 80808fa:	4604      	mov	r4, r0
	// Must be in standby mode to make changes!!!
	byte cfg = readRegister(XYZ_DATA_CFG);
 80808fc:	f7ff ffcf 	bl	808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
 8080900:	f020 0003 	bic.w	r0, r0, #3
 8080904:	ea40 0295 	orr.w	r2, r0, r5, lsr #2
	writeRegister(XYZ_DATA_CFG, cfg);
 8080908:	b2d2      	uxtb	r2, r2
 808090a:	4620      	mov	r0, r4
}
 808090c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
	// Must be in standby mode to make changes!!!
	byte cfg = readRegister(XYZ_DATA_CFG);
	cfg &= 0xFC; // Mask out scale bits
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
	writeRegister(XYZ_DATA_CFG, cfg);
 8080910:	210e      	movs	r1, #14
 8080912:	f7ff bfba 	b.w	808088a <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

08080916 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
// SET THE OUTPUT DATA RATE
//	This function sets the output data rate of the MMA8452Q.
//	Possible values for the odr parameter are: ODR_800, ODR_400, ODR_200, 
//	ODR_100, ODR_50, ODR_12, ODR_6, or ODR_1
void MMA8452Q::setODR(MMA8452Q_ODR odr)
{
 8080916:	b538      	push	{r3, r4, r5, lr}
 8080918:	460d      	mov	r5, r1
	// Must be in standby mode to make changes!!!
	byte ctrl = readRegister(CTRL_REG1);
 808091a:	212a      	movs	r1, #42	; 0x2a
// SET THE OUTPUT DATA RATE
//	This function sets the output data rate of the MMA8452Q.
//	Possible values for the odr parameter are: ODR_800, ODR_400, ODR_200, 
//	ODR_100, ODR_50, ODR_12, ODR_6, or ODR_1
void MMA8452Q::setODR(MMA8452Q_ODR odr)
{
 808091c:	4604      	mov	r4, r0
	// Must be in standby mode to make changes!!!
	byte ctrl = readRegister(CTRL_REG1);
 808091e:	f7ff ffbe 	bl	808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
	ctrl |= (odr << 3);
 8080922:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8080926:	ea40 02c5 	orr.w	r2, r0, r5, lsl #3
	writeRegister(CTRL_REG1, ctrl);
 808092a:	b2d2      	uxtb	r2, r2
 808092c:	4620      	mov	r0, r4
}
 808092e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
	// Must be in standby mode to make changes!!!
	byte ctrl = readRegister(CTRL_REG1);
	ctrl &= 0xCF; // Mask out data rate bits
	ctrl |= (odr << 3);
	writeRegister(CTRL_REG1, ctrl);
 8080932:	212a      	movs	r1, #42	; 0x2a
 8080934:	f7ff bfa9 	b.w	808088a <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

08080938 <_ZN8MMA8452Q7setupPLEv>:
}

// SET UP PORTRAIT/LANDSCAPE DETECTION
//	This function sets up portrait and landscape detection.
void MMA8452Q::setupPL()
{
 8080938:	b510      	push	{r4, lr}
	// Must be in standby mode to make changes!!!
	// For more info check out this app note:
	//	http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
	// 1. Enable P/L
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
 808093a:	2111      	movs	r1, #17
}

// SET UP PORTRAIT/LANDSCAPE DETECTION
//	This function sets up portrait and landscape detection.
void MMA8452Q::setupPL()
{
 808093c:	4604      	mov	r4, r0
	// Must be in standby mode to make changes!!!
	// For more info check out this app note:
	//	http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
	// 1. Enable P/L
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
 808093e:	f7ff ffae 	bl	808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
 8080942:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 8080946:	b2d2      	uxtb	r2, r2
 8080948:	4620      	mov	r0, r4
 808094a:	2111      	movs	r1, #17
 808094c:	f7ff ff9d 	bl	808088a <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	// 2. Set the debounce rate
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
 8080950:	4620      	mov	r0, r4
}
 8080952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// For more info check out this app note:
	//	http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
	// 1. Enable P/L
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
	// 2. Set the debounce rate
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
 8080956:	2250      	movs	r2, #80	; 0x50
 8080958:	2112      	movs	r1, #18
 808095a:	f7ff bf96 	b.w	808088a <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

0808095e <_ZN8MMA8452Q7standbyEv>:
}

// SET STANDBY MODE
//	Sets the MMA8452 to standby mode. It must be in standby to change most register settings
void MMA8452Q::standby()
{
 808095e:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
 8080960:	212a      	movs	r1, #42	; 0x2a
}

// SET STANDBY MODE
//	Sets the MMA8452 to standby mode. It must be in standby to change most register settings
void MMA8452Q::standby()
{
 8080962:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
 8080964:	f7ff ff9b 	bl	808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
 8080968:	212a      	movs	r1, #42	; 0x2a
 808096a:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 808096e:	4620      	mov	r0, r4
}
 8080970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// SET STANDBY MODE
//	Sets the MMA8452 to standby mode. It must be in standby to change most register settings
void MMA8452Q::standby()
{
	byte c = readRegister(CTRL_REG1);
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
 8080974:	f7ff bf89 	b.w	808088a <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

08080978 <_ZN8MMA8452Q6activeEv>:
}

// SET ACTIVE MODE
//	Sets the MMA8452 to active mode. Needs to be in this mode to output data
void MMA8452Q::active()
{
 8080978:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
 808097a:	212a      	movs	r1, #42	; 0x2a
}

// SET ACTIVE MODE
//	Sets the MMA8452 to active mode. Needs to be in this mode to output data
void MMA8452Q::active()
{
 808097c:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
 808097e:	f7ff ff8e 	bl	808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
 8080982:	f040 0201 	orr.w	r2, r0, #1
 8080986:	b2d2      	uxtb	r2, r2
 8080988:	4620      	mov	r0, r4
}
 808098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// SET ACTIVE MODE
//	Sets the MMA8452 to active mode. Needs to be in this mode to output data
void MMA8452Q::active()
{
	byte c = readRegister(CTRL_REG1);
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
 808098e:	212a      	movs	r1, #42	; 0x2a
 8080990:	f7ff bf7b 	b.w	808088a <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

08080994 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>:
//	This function initializes the MMA8452Q. It sets up the scale (either 2, 4,
//	or 8g), output data rate, portrait/landscape detection and tap detection.
//	It also checks the WHO_AM_I register to make sure we can communicate with
//	the sensor. Returns a 0 if communication failed, 1 if successful.
byte MMA8452Q::begin(MMA8452Q_Scale fsr, MMA8452Q_ODR odr)
{
 8080994:	b538      	push	{r3, r4, r5, lr}
 8080996:	4604      	mov	r4, r0
	scale = fsr; // Haul fsr into our class variable, scale
 8080998:	7541      	strb	r1, [r0, #21]
//	This function initializes the MMA8452Q. It sets up the scale (either 2, 4,
//	or 8g), output data rate, portrait/landscape detection and tap detection.
//	It also checks the WHO_AM_I register to make sure we can communicate with
//	the sensor. Returns a 0 if communication failed, 1 if successful.
byte MMA8452Q::begin(MMA8452Q_Scale fsr, MMA8452Q_ODR odr)
{
 808099a:	4615      	mov	r5, r2
	scale = fsr; // Haul fsr into our class variable, scale
	
	Wire.begin(); // Initialize I2C
 808099c:	f001 fbee 	bl	808217c <_Z19__fetch_global_Wirev>
 80809a0:	f000 ff14 	bl	80817cc <_ZN7TwoWire5beginEv>
	
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
 80809a4:	210d      	movs	r1, #13
 80809a6:	4620      	mov	r0, r4
 80809a8:	f7ff ff79 	bl	808089e <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
 80809ac:	282a      	cmp	r0, #42	; 0x2a
 80809ae:	d112      	bne.n	80809d6 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x42>
	{
		return 0;
	}
	
	standby();  // Must be in standby to change registers
 80809b0:	4620      	mov	r0, r4
 80809b2:	f7ff ffd4 	bl	808095e <_ZN8MMA8452Q7standbyEv>
	
	setScale(scale);  // Set up accelerometer scale
 80809b6:	7d61      	ldrb	r1, [r4, #21]
 80809b8:	4620      	mov	r0, r4
 80809ba:	f7ff ff9b 	bl	80808f4 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
 80809be:	4629      	mov	r1, r5
 80809c0:	4620      	mov	r0, r4
 80809c2:	f7ff ffa8 	bl	8080916 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
 80809c6:	4620      	mov	r0, r4
 80809c8:	f7ff ffb6 	bl	8080938 <_ZN8MMA8452Q7setupPLEv>
	// Multiply parameter by 0.0625g to calculate threshold.
	//setupTap(0x02, 0x02, 0x02); // Disable x, y, set z to 0.5g
	
	active();  // Set to active to start reading
 80809cc:	4620      	mov	r0, r4
 80809ce:	f7ff ffd3 	bl	8080978 <_ZN8MMA8452Q6activeEv>
	
	return 1;
 80809d2:	2001      	movs	r0, #1
 80809d4:	bd38      	pop	{r3, r4, r5, pc}
	
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
	
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
	{
		return 0;
 80809d6:	2000      	movs	r0, #0
	//setupTap(0x02, 0x02, 0x02); // Disable x, y, set z to 0.5g
	
	active();  // Set to active to start reading
	
	return 1;
}
 80809d8:	bd38      	pop	{r3, r4, r5, pc}

080809da <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>:

// READ MULTIPLE REGISTERS
//	Read "len" bytes from the MMA8452Q, starting at register "reg". Bytes are stored
//	in "buffer" on exit.
byte MMA8452Q::readRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
 80809da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80809dc:	4604      	mov	r4, r0
 80809de:	460f      	mov	r7, r1
 80809e0:	4616      	mov	r6, r2
 80809e2:	461d      	mov	r5, r3
	Wire.beginTransmission(address);
 80809e4:	f001 fbca 	bl	808217c <_Z19__fetch_global_Wirev>
 80809e8:	7d21      	ldrb	r1, [r4, #20]
 80809ea:	f000 ff0b 	bl	8081804 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
 80809ee:	f001 fbc5 	bl	808217c <_Z19__fetch_global_Wirev>
 80809f2:	4639      	mov	r1, r7
 80809f4:	f7ff fb5d 	bl	80800b2 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if ( Wire.endTransmission(false) == 0)
 80809f8:	f001 fbc0 	bl	808217c <_Z19__fetch_global_Wirev>
 80809fc:	2100      	movs	r1, #0
 80809fe:	f000 ff08 	bl	8081812 <_ZN7TwoWire15endTransmissionEh>
 8080a02:	b998      	cbnz	r0, 8080a2c <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x52>
	{
	     //Ask for bytes, once done, bus is released by default
    	if (Wire.requestFrom(address, len) == len)
 8080a04:	f001 fbba 	bl	808217c <_Z19__fetch_global_Wirev>
 8080a08:	462a      	mov	r2, r5
 8080a0a:	7d21      	ldrb	r1, [r4, #20]
 8080a0c:	f000 feed 	bl	80817ea <_ZN7TwoWire11requestFromEhh>
 8080a10:	4285      	cmp	r5, r0
 8080a12:	d10b      	bne.n	8080a2c <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x52>
 8080a14:	4634      	mov	r4, r6
    	{
        	for(int x = 0 ; x < len ; x++)
 8080a16:	1ba3      	subs	r3, r4, r6
 8080a18:	42ab      	cmp	r3, r5
 8080a1a:	da09      	bge.n	8080a30 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x56>
        		buffer[x] = Wire.read();
 8080a1c:	f001 fbae 	bl	808217c <_Z19__fetch_global_Wirev>
 8080a20:	6803      	ldr	r3, [r0, #0]
 8080a22:	695b      	ldr	r3, [r3, #20]
 8080a24:	4798      	blx	r3
 8080a26:	f804 0b01 	strb.w	r0, [r4], #1
 8080a2a:	e7f4      	b.n	8080a16 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x3c>
        	return 1;
    	}
	}
	return 0;
 8080a2c:	2000      	movs	r0, #0
 8080a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ( Wire.endTransmission(false) == 0)
	{
	     //Ask for bytes, once done, bus is released by default
    	if (Wire.requestFrom(address, len) == len)
    	{
        	for(int x = 0 ; x < len ; x++)
 8080a30:	2001      	movs	r0, #1
        		buffer[x] = Wire.read();
        	return 1;
    	}
	}
	return 0;
 8080a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080a34 <_ZN8MMA8452Q4readEv>:
//		* int's x, y, and z will store the signed 12-bit values read out
//		  of the acceleromter.
//		* floats cx, cy, and cz will store the calculated acceleration from
//		  those 12-bit values. These variables are in units of g's.
void MMA8452Q::read()
{
 8080a34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8080a38:	4604      	mov	r4, r0
	byte rawData[6];  // x/y/z accel register data stored here

	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
 8080a3a:	466a      	mov	r2, sp
 8080a3c:	2101      	movs	r1, #1
 8080a3e:	2306      	movs	r3, #6
 8080a40:	f7ff ffcb 	bl	80809da <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>
	
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
 8080a44:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8080a48:	f89d 7000 	ldrb.w	r7, [sp]
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
 8080a4c:	f89d 6002 	ldrb.w	r6, [sp, #2]
{
	byte rawData[6];  // x/y/z accel register data stored here

	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
	
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
 8080a50:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
 8080a54:	f89d 3003 	ldrb.w	r3, [sp, #3]
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
 8080a58:	f89d 5004 	ldrb.w	r5, [sp, #4]
	byte rawData[6];  // x/y/z accel register data stored here

	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
	
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
 8080a5c:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
 8080a60:	f89d 3005 	ldrb.w	r3, [sp, #5]
{
	byte rawData[6];  // x/y/z accel register data stored here

	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
	
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
 8080a64:	f347 170b 	sbfx	r7, r7, #4, #12
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
 8080a68:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
	byte rawData[6];  // x/y/z accel register data stored here

	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
	
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
 8080a6c:	f346 160b 	sbfx	r6, r6, #4, #12
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
 8080a70:	f345 150b 	sbfx	r5, r5, #4, #12
{
	byte rawData[6];  // x/y/z accel register data stored here

	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
	
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
 8080a74:	8027      	strh	r7, [r4, #0]
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
 8080a76:	8066      	strh	r6, [r4, #2]
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
 8080a78:	80a5      	strh	r5, [r4, #4]
	cx = (float) x / (float)(1<<11) * (float)(scale);
 8080a7a:	7d60      	ldrb	r0, [r4, #21]
 8080a7c:	f002 fa4c 	bl	8082f18 <__aeabi_ui2f>
 8080a80:	4680      	mov	r8, r0
 8080a82:	4638      	mov	r0, r7
 8080a84:	f002 fa4c 	bl	8082f20 <__aeabi_i2f>
 8080a88:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 8080a8c:	f002 fa9c 	bl	8082fc8 <__aeabi_fmul>
 8080a90:	4641      	mov	r1, r8
 8080a92:	f002 fa99 	bl	8082fc8 <__aeabi_fmul>
 8080a96:	60a0      	str	r0, [r4, #8]
	cy = (float) y / (float)(1<<11) * (float)(scale);
 8080a98:	4630      	mov	r0, r6
 8080a9a:	f002 fa41 	bl	8082f20 <__aeabi_i2f>
 8080a9e:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 8080aa2:	f002 fa91 	bl	8082fc8 <__aeabi_fmul>
 8080aa6:	4641      	mov	r1, r8
 8080aa8:	f002 fa8e 	bl	8082fc8 <__aeabi_fmul>
 8080aac:	60e0      	str	r0, [r4, #12]
	cz = (float) z / (float)(1<<11) * (float)(scale);
 8080aae:	4628      	mov	r0, r5
 8080ab0:	f002 fa36 	bl	8082f20 <__aeabi_i2f>
 8080ab4:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 8080ab8:	f002 fa86 	bl	8082fc8 <__aeabi_fmul>
 8080abc:	4641      	mov	r1, r8
 8080abe:	f002 fa83 	bl	8082fc8 <__aeabi_fmul>
 8080ac2:	6120      	str	r0, [r4, #16]
}
 8080ac4:	b002      	add	sp, #8
 8080ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080aca <_GLOBAL__sub_I__ZN8MMA8452QC2Eh>:
 8080aca:	f000 b839 	b.w	8080b40 <HAL_Pin_Map>
	...

08080ad0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080ad0:	b508      	push	{r3, lr}
 8080ad2:	4b02      	ldr	r3, [pc, #8]	; (8080adc <inet_gethostbyname+0xc>)
 8080ad4:	681b      	ldr	r3, [r3, #0]
 8080ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080ad8:	9301      	str	r3, [sp, #4]
 8080ada:	bd08      	pop	{r3, pc}
 8080adc:	08060020 	.word	0x08060020

08080ae0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080ae0:	b508      	push	{r3, lr}
 8080ae2:	4b02      	ldr	r3, [pc, #8]	; (8080aec <os_mutex_create+0xc>)
 8080ae4:	681b      	ldr	r3, [r3, #0]
 8080ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080ae8:	9301      	str	r3, [sp, #4]
 8080aea:	bd08      	pop	{r3, pc}
 8080aec:	080401d0 	.word	0x080401d0

08080af0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080af0:	b508      	push	{r3, lr}
 8080af2:	4b02      	ldr	r3, [pc, #8]	; (8080afc <HAL_RNG_GetRandomNumber+0xc>)
 8080af4:	681b      	ldr	r3, [r3, #0]
 8080af6:	685b      	ldr	r3, [r3, #4]
 8080af8:	9301      	str	r3, [sp, #4]
 8080afa:	bd08      	pop	{r3, pc}
 8080afc:	0804019c 	.word	0x0804019c

08080b00 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080b00:	b508      	push	{r3, lr}
 8080b02:	4b02      	ldr	r3, [pc, #8]	; (8080b0c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080b04:	681b      	ldr	r3, [r3, #0]
 8080b06:	695b      	ldr	r3, [r3, #20]
 8080b08:	9301      	str	r3, [sp, #4]
 8080b0a:	bd08      	pop	{r3, pc}
 8080b0c:	0804019c 	.word	0x0804019c

08080b10 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8080b10:	b508      	push	{r3, lr}
 8080b12:	4b02      	ldr	r3, [pc, #8]	; (8080b1c <HAL_RTC_Get_UnixTime+0xc>)
 8080b14:	681b      	ldr	r3, [r3, #0]
 8080b16:	69db      	ldr	r3, [r3, #28]
 8080b18:	9301      	str	r3, [sp, #4]
 8080b1a:	bd08      	pop	{r3, pc}
 8080b1c:	0804019c 	.word	0x0804019c

08080b20 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8080b20:	b508      	push	{r3, lr}
 8080b22:	4b02      	ldr	r3, [pc, #8]	; (8080b2c <HAL_RTC_Time_Is_Valid+0xc>)
 8080b24:	681b      	ldr	r3, [r3, #0]
 8080b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080b28:	9301      	str	r3, [sp, #4]
 8080b2a:	bd08      	pop	{r3, pc}
 8080b2c:	0804019c 	.word	0x0804019c

08080b30 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8080b30:	b508      	push	{r3, lr}
 8080b32:	4b02      	ldr	r3, [pc, #8]	; (8080b3c <hal_timer_millis+0xc>)
 8080b34:	681b      	ldr	r3, [r3, #0]
 8080b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8080b38:	9301      	str	r3, [sp, #4]
 8080b3a:	bd08      	pop	{r3, pc}
 8080b3c:	0804019c 	.word	0x0804019c

08080b40 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8080b40:	b508      	push	{r3, lr}
 8080b42:	4b02      	ldr	r3, [pc, #8]	; (8080b4c <HAL_Pin_Map+0xc>)
 8080b44:	681b      	ldr	r3, [r3, #0]
 8080b46:	681b      	ldr	r3, [r3, #0]
 8080b48:	9301      	str	r3, [sp, #4]
 8080b4a:	bd08      	pop	{r3, pc}
 8080b4c:	080401b0 	.word	0x080401b0

08080b50 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8080b50:	b508      	push	{r3, lr}
 8080b52:	4b02      	ldr	r3, [pc, #8]	; (8080b5c <HAL_Validate_Pin_Function+0xc>)
 8080b54:	681b      	ldr	r3, [r3, #0]
 8080b56:	685b      	ldr	r3, [r3, #4]
 8080b58:	9301      	str	r3, [sp, #4]
 8080b5a:	bd08      	pop	{r3, pc}
 8080b5c:	080401b0 	.word	0x080401b0

08080b60 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080b60:	b508      	push	{r3, lr}
 8080b62:	4b02      	ldr	r3, [pc, #8]	; (8080b6c <HAL_Pin_Mode+0xc>)
 8080b64:	681b      	ldr	r3, [r3, #0]
 8080b66:	689b      	ldr	r3, [r3, #8]
 8080b68:	9301      	str	r3, [sp, #4]
 8080b6a:	bd08      	pop	{r3, pc}
 8080b6c:	080401b0 	.word	0x080401b0

08080b70 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080b70:	b508      	push	{r3, lr}
 8080b72:	4b02      	ldr	r3, [pc, #8]	; (8080b7c <HAL_Get_Pin_Mode+0xc>)
 8080b74:	681b      	ldr	r3, [r3, #0]
 8080b76:	68db      	ldr	r3, [r3, #12]
 8080b78:	9301      	str	r3, [sp, #4]
 8080b7a:	bd08      	pop	{r3, pc}
 8080b7c:	080401b0 	.word	0x080401b0

08080b80 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080b80:	b508      	push	{r3, lr}
 8080b82:	4b02      	ldr	r3, [pc, #8]	; (8080b8c <HAL_GPIO_Write+0xc>)
 8080b84:	681b      	ldr	r3, [r3, #0]
 8080b86:	691b      	ldr	r3, [r3, #16]
 8080b88:	9301      	str	r3, [sp, #4]
 8080b8a:	bd08      	pop	{r3, pc}
 8080b8c:	080401b0 	.word	0x080401b0

08080b90 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8080b90:	b508      	push	{r3, lr}
 8080b92:	4b02      	ldr	r3, [pc, #8]	; (8080b9c <HAL_GPIO_Read+0xc>)
 8080b94:	681b      	ldr	r3, [r3, #0]
 8080b96:	695b      	ldr	r3, [r3, #20]
 8080b98:	9301      	str	r3, [sp, #4]
 8080b9a:	bd08      	pop	{r3, pc}
 8080b9c:	080401b0 	.word	0x080401b0

08080ba0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8080ba0:	b508      	push	{r3, lr}
 8080ba2:	4b02      	ldr	r3, [pc, #8]	; (8080bac <HAL_Interrupts_Attach+0xc>)
 8080ba4:	681b      	ldr	r3, [r3, #0]
 8080ba6:	699b      	ldr	r3, [r3, #24]
 8080ba8:	9301      	str	r3, [sp, #4]
 8080baa:	bd08      	pop	{r3, pc}
 8080bac:	080401b0 	.word	0x080401b0

08080bb0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 8080bb0:	b508      	push	{r3, lr}
 8080bb2:	4b02      	ldr	r3, [pc, #8]	; (8080bbc <HAL_Interrupts_Detach+0xc>)
 8080bb4:	681b      	ldr	r3, [r3, #0]
 8080bb6:	69db      	ldr	r3, [r3, #28]
 8080bb8:	9301      	str	r3, [sp, #4]
 8080bba:	bd08      	pop	{r3, pc}
 8080bbc:	080401b0 	.word	0x080401b0

08080bc0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8080bc0:	b508      	push	{r3, lr}
 8080bc2:	4b02      	ldr	r3, [pc, #8]	; (8080bcc <HAL_ADC_Read+0xc>)
 8080bc4:	681b      	ldr	r3, [r3, #0]
 8080bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080bc8:	9301      	str	r3, [sp, #4]
 8080bca:	bd08      	pop	{r3, pc}
 8080bcc:	080401b0 	.word	0x080401b0

08080bd0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8080bd0:	b508      	push	{r3, lr}
 8080bd2:	4b02      	ldr	r3, [pc, #8]	; (8080bdc <HAL_I2C_Begin+0xc>)
 8080bd4:	681b      	ldr	r3, [r3, #0]
 8080bd6:	68db      	ldr	r3, [r3, #12]
 8080bd8:	9301      	str	r3, [sp, #4]
 8080bda:	bd08      	pop	{r3, pc}
 8080bdc:	080401ac 	.word	0x080401ac

08080be0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8080be0:	b508      	push	{r3, lr}
 8080be2:	4b02      	ldr	r3, [pc, #8]	; (8080bec <HAL_I2C_Request_Data+0xc>)
 8080be4:	681b      	ldr	r3, [r3, #0]
 8080be6:	695b      	ldr	r3, [r3, #20]
 8080be8:	9301      	str	r3, [sp, #4]
 8080bea:	bd08      	pop	{r3, pc}
 8080bec:	080401ac 	.word	0x080401ac

08080bf0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8080bf0:	b508      	push	{r3, lr}
 8080bf2:	4b02      	ldr	r3, [pc, #8]	; (8080bfc <HAL_I2C_Begin_Transmission+0xc>)
 8080bf4:	681b      	ldr	r3, [r3, #0]
 8080bf6:	699b      	ldr	r3, [r3, #24]
 8080bf8:	9301      	str	r3, [sp, #4]
 8080bfa:	bd08      	pop	{r3, pc}
 8080bfc:	080401ac 	.word	0x080401ac

08080c00 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8080c00:	b508      	push	{r3, lr}
 8080c02:	4b02      	ldr	r3, [pc, #8]	; (8080c0c <HAL_I2C_End_Transmission+0xc>)
 8080c04:	681b      	ldr	r3, [r3, #0]
 8080c06:	69db      	ldr	r3, [r3, #28]
 8080c08:	9301      	str	r3, [sp, #4]
 8080c0a:	bd08      	pop	{r3, pc}
 8080c0c:	080401ac 	.word	0x080401ac

08080c10 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8080c10:	b508      	push	{r3, lr}
 8080c12:	4b02      	ldr	r3, [pc, #8]	; (8080c1c <HAL_I2C_Write_Data+0xc>)
 8080c14:	681b      	ldr	r3, [r3, #0]
 8080c16:	6a1b      	ldr	r3, [r3, #32]
 8080c18:	9301      	str	r3, [sp, #4]
 8080c1a:	bd08      	pop	{r3, pc}
 8080c1c:	080401ac 	.word	0x080401ac

08080c20 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8080c20:	b508      	push	{r3, lr}
 8080c22:	4b02      	ldr	r3, [pc, #8]	; (8080c2c <HAL_I2C_Available_Data+0xc>)
 8080c24:	681b      	ldr	r3, [r3, #0]
 8080c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080c28:	9301      	str	r3, [sp, #4]
 8080c2a:	bd08      	pop	{r3, pc}
 8080c2c:	080401ac 	.word	0x080401ac

08080c30 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8080c30:	b508      	push	{r3, lr}
 8080c32:	4b02      	ldr	r3, [pc, #8]	; (8080c3c <HAL_I2C_Read_Data+0xc>)
 8080c34:	681b      	ldr	r3, [r3, #0]
 8080c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080c38:	9301      	str	r3, [sp, #4]
 8080c3a:	bd08      	pop	{r3, pc}
 8080c3c:	080401ac 	.word	0x080401ac

08080c40 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8080c40:	b508      	push	{r3, lr}
 8080c42:	4b02      	ldr	r3, [pc, #8]	; (8080c4c <HAL_I2C_Peek_Data+0xc>)
 8080c44:	681b      	ldr	r3, [r3, #0]
 8080c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080c48:	9301      	str	r3, [sp, #4]
 8080c4a:	bd08      	pop	{r3, pc}
 8080c4c:	080401ac 	.word	0x080401ac

08080c50 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8080c50:	b508      	push	{r3, lr}
 8080c52:	4b02      	ldr	r3, [pc, #8]	; (8080c5c <HAL_I2C_Flush_Data+0xc>)
 8080c54:	681b      	ldr	r3, [r3, #0]
 8080c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080c58:	9301      	str	r3, [sp, #4]
 8080c5a:	bd08      	pop	{r3, pc}
 8080c5c:	080401ac 	.word	0x080401ac

08080c60 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8080c60:	b508      	push	{r3, lr}
 8080c62:	4b02      	ldr	r3, [pc, #8]	; (8080c6c <HAL_I2C_Is_Enabled+0xc>)
 8080c64:	681b      	ldr	r3, [r3, #0]
 8080c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080c68:	9301      	str	r3, [sp, #4]
 8080c6a:	bd08      	pop	{r3, pc}
 8080c6c:	080401ac 	.word	0x080401ac

08080c70 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080c70:	b508      	push	{r3, lr}
 8080c72:	4b02      	ldr	r3, [pc, #8]	; (8080c7c <HAL_I2C_Init+0xc>)
 8080c74:	681b      	ldr	r3, [r3, #0]
 8080c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080c78:	9301      	str	r3, [sp, #4]
 8080c7a:	bd08      	pop	{r3, pc}
 8080c7c:	080401ac 	.word	0x080401ac

08080c80 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8080c80:	b508      	push	{r3, lr}
 8080c82:	4b02      	ldr	r3, [pc, #8]	; (8080c8c <HAL_I2C_Acquire+0xc>)
 8080c84:	681b      	ldr	r3, [r3, #0]
 8080c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080c88:	9301      	str	r3, [sp, #4]
 8080c8a:	bd08      	pop	{r3, pc}
 8080c8c:	080401ac 	.word	0x080401ac

08080c90 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8080c90:	b508      	push	{r3, lr}
 8080c92:	4b02      	ldr	r3, [pc, #8]	; (8080c9c <HAL_I2C_Release+0xc>)
 8080c94:	681b      	ldr	r3, [r3, #0]
 8080c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080c98:	9301      	str	r3, [sp, #4]
 8080c9a:	bd08      	pop	{r3, pc}
 8080c9c:	080401ac 	.word	0x080401ac

08080ca0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080ca0:	b508      	push	{r3, lr}
 8080ca2:	4b02      	ldr	r3, [pc, #8]	; (8080cac <HAL_SPI_Init+0xc>)
 8080ca4:	681b      	ldr	r3, [r3, #0]
 8080ca6:	69db      	ldr	r3, [r3, #28]
 8080ca8:	9301      	str	r3, [sp, #4]
 8080caa:	bd08      	pop	{r3, pc}
 8080cac:	080401b4 	.word	0x080401b4

08080cb0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8080cb0:	b508      	push	{r3, lr}
 8080cb2:	4b02      	ldr	r3, [pc, #8]	; (8080cbc <HAL_SPI_Is_Enabled+0xc>)
 8080cb4:	681b      	ldr	r3, [r3, #0]
 8080cb6:	6a1b      	ldr	r3, [r3, #32]
 8080cb8:	9301      	str	r3, [sp, #4]
 8080cba:	bd08      	pop	{r3, pc}
 8080cbc:	080401b4 	.word	0x080401b4

08080cc0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080cc0:	b508      	push	{r3, lr}
 8080cc2:	4b02      	ldr	r3, [pc, #8]	; (8080ccc <HAL_USART_Init+0xc>)
 8080cc4:	681b      	ldr	r3, [r3, #0]
 8080cc6:	699b      	ldr	r3, [r3, #24]
 8080cc8:	9301      	str	r3, [sp, #4]
 8080cca:	bd08      	pop	{r3, pc}
 8080ccc:	080401c4 	.word	0x080401c4

08080cd0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8080cd0:	b508      	push	{r3, lr}
 8080cd2:	4b02      	ldr	r3, [pc, #8]	; (8080cdc <HAL_USART_Write_Data+0xc>)
 8080cd4:	681b      	ldr	r3, [r3, #0]
 8080cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080cd8:	9301      	str	r3, [sp, #4]
 8080cda:	bd08      	pop	{r3, pc}
 8080cdc:	080401c4 	.word	0x080401c4

08080ce0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8080ce0:	b508      	push	{r3, lr}
 8080ce2:	4b02      	ldr	r3, [pc, #8]	; (8080cec <HAL_USART_Available_Data+0xc>)
 8080ce4:	681b      	ldr	r3, [r3, #0]
 8080ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080ce8:	9301      	str	r3, [sp, #4]
 8080cea:	bd08      	pop	{r3, pc}
 8080cec:	080401c4 	.word	0x080401c4

08080cf0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080cf0:	b508      	push	{r3, lr}
 8080cf2:	4b02      	ldr	r3, [pc, #8]	; (8080cfc <HAL_USART_Read_Data+0xc>)
 8080cf4:	681b      	ldr	r3, [r3, #0]
 8080cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080cf8:	9301      	str	r3, [sp, #4]
 8080cfa:	bd08      	pop	{r3, pc}
 8080cfc:	080401c4 	.word	0x080401c4

08080d00 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080d00:	b508      	push	{r3, lr}
 8080d02:	4b02      	ldr	r3, [pc, #8]	; (8080d0c <HAL_USART_Peek_Data+0xc>)
 8080d04:	681b      	ldr	r3, [r3, #0]
 8080d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080d08:	9301      	str	r3, [sp, #4]
 8080d0a:	bd08      	pop	{r3, pc}
 8080d0c:	080401c4 	.word	0x080401c4

08080d10 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080d10:	b508      	push	{r3, lr}
 8080d12:	4b02      	ldr	r3, [pc, #8]	; (8080d1c <HAL_USART_Flush_Data+0xc>)
 8080d14:	681b      	ldr	r3, [r3, #0]
 8080d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080d18:	9301      	str	r3, [sp, #4]
 8080d1a:	bd08      	pop	{r3, pc}
 8080d1c:	080401c4 	.word	0x080401c4

08080d20 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080d20:	b508      	push	{r3, lr}
 8080d22:	4b02      	ldr	r3, [pc, #8]	; (8080d2c <HAL_USART_Is_Enabled+0xc>)
 8080d24:	681b      	ldr	r3, [r3, #0]
 8080d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080d28:	9301      	str	r3, [sp, #4]
 8080d2a:	bd08      	pop	{r3, pc}
 8080d2c:	080401c4 	.word	0x080401c4

08080d30 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080d30:	b508      	push	{r3, lr}
 8080d32:	4b02      	ldr	r3, [pc, #8]	; (8080d3c <HAL_USART_Available_Data_For_Write+0xc>)
 8080d34:	681b      	ldr	r3, [r3, #0]
 8080d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080d38:	9301      	str	r3, [sp, #4]
 8080d3a:	bd08      	pop	{r3, pc}
 8080d3c:	080401c4 	.word	0x080401c4

08080d40 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080d40:	b508      	push	{r3, lr}
 8080d42:	4b02      	ldr	r3, [pc, #8]	; (8080d4c <HAL_USB_USART_Init+0xc>)
 8080d44:	681b      	ldr	r3, [r3, #0]
 8080d46:	681b      	ldr	r3, [r3, #0]
 8080d48:	9301      	str	r3, [sp, #4]
 8080d4a:	bd08      	pop	{r3, pc}
 8080d4c:	0806001c 	.word	0x0806001c

08080d50 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080d50:	b508      	push	{r3, lr}
 8080d52:	4b02      	ldr	r3, [pc, #8]	; (8080d5c <HAL_USB_USART_Available_Data+0xc>)
 8080d54:	681b      	ldr	r3, [r3, #0]
 8080d56:	691b      	ldr	r3, [r3, #16]
 8080d58:	9301      	str	r3, [sp, #4]
 8080d5a:	bd08      	pop	{r3, pc}
 8080d5c:	0806001c 	.word	0x0806001c

08080d60 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080d60:	b508      	push	{r3, lr}
 8080d62:	4b02      	ldr	r3, [pc, #8]	; (8080d6c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080d64:	681b      	ldr	r3, [r3, #0]
 8080d66:	695b      	ldr	r3, [r3, #20]
 8080d68:	9301      	str	r3, [sp, #4]
 8080d6a:	bd08      	pop	{r3, pc}
 8080d6c:	0806001c 	.word	0x0806001c

08080d70 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080d70:	b508      	push	{r3, lr}
 8080d72:	4b02      	ldr	r3, [pc, #8]	; (8080d7c <HAL_USB_USART_Receive_Data+0xc>)
 8080d74:	681b      	ldr	r3, [r3, #0]
 8080d76:	699b      	ldr	r3, [r3, #24]
 8080d78:	9301      	str	r3, [sp, #4]
 8080d7a:	bd08      	pop	{r3, pc}
 8080d7c:	0806001c 	.word	0x0806001c

08080d80 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080d80:	b508      	push	{r3, lr}
 8080d82:	4b02      	ldr	r3, [pc, #8]	; (8080d8c <HAL_USB_USART_Send_Data+0xc>)
 8080d84:	681b      	ldr	r3, [r3, #0]
 8080d86:	69db      	ldr	r3, [r3, #28]
 8080d88:	9301      	str	r3, [sp, #4]
 8080d8a:	bd08      	pop	{r3, pc}
 8080d8c:	0806001c 	.word	0x0806001c

08080d90 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080d90:	b508      	push	{r3, lr}
 8080d92:	4b02      	ldr	r3, [pc, #8]	; (8080d9c <HAL_USB_USART_Flush_Data+0xc>)
 8080d94:	681b      	ldr	r3, [r3, #0]
 8080d96:	6a1b      	ldr	r3, [r3, #32]
 8080d98:	9301      	str	r3, [sp, #4]
 8080d9a:	bd08      	pop	{r3, pc}
 8080d9c:	0806001c 	.word	0x0806001c

08080da0 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8080da0:	b508      	push	{r3, lr}
 8080da2:	4b02      	ldr	r3, [pc, #8]	; (8080dac <system_mode+0xc>)
 8080da4:	681b      	ldr	r3, [r3, #0]
 8080da6:	681b      	ldr	r3, [r3, #0]
 8080da8:	9301      	str	r3, [sp, #4]
 8080daa:	bd08      	pop	{r3, pc}
 8080dac:	080401a4 	.word	0x080401a4

08080db0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080db0:	b508      	push	{r3, lr}
 8080db2:	4b02      	ldr	r3, [pc, #8]	; (8080dbc <set_system_mode+0xc>)
 8080db4:	681b      	ldr	r3, [r3, #0]
 8080db6:	685b      	ldr	r3, [r3, #4]
 8080db8:	9301      	str	r3, [sp, #4]
 8080dba:	bd08      	pop	{r3, pc}
 8080dbc:	080401a4 	.word	0x080401a4

08080dc0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080dc0:	b508      	push	{r3, lr}
 8080dc2:	4b02      	ldr	r3, [pc, #8]	; (8080dcc <system_delay_ms+0xc>)
 8080dc4:	681b      	ldr	r3, [r3, #0]
 8080dc6:	695b      	ldr	r3, [r3, #20]
 8080dc8:	9301      	str	r3, [sp, #4]
 8080dca:	bd08      	pop	{r3, pc}
 8080dcc:	080401a4 	.word	0x080401a4

08080dd0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8080dd0:	b508      	push	{r3, lr}
 8080dd2:	4b02      	ldr	r3, [pc, #8]	; (8080ddc <system_thread_set_state+0xc>)
 8080dd4:	681b      	ldr	r3, [r3, #0]
 8080dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080dd8:	9301      	str	r3, [sp, #4]
 8080dda:	bd08      	pop	{r3, pc}
 8080ddc:	080401a4 	.word	0x080401a4

08080de0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080de0:	b508      	push	{r3, lr}
 8080de2:	4b02      	ldr	r3, [pc, #8]	; (8080dec <application_thread_current+0xc>)
 8080de4:	681b      	ldr	r3, [r3, #0]
 8080de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080de8:	9301      	str	r3, [sp, #4]
 8080dea:	bd08      	pop	{r3, pc}
 8080dec:	080401a4 	.word	0x080401a4

08080df0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080df0:	b508      	push	{r3, lr}
 8080df2:	4b02      	ldr	r3, [pc, #8]	; (8080dfc <application_thread_invoke+0xc>)
 8080df4:	681b      	ldr	r3, [r3, #0]
 8080df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080df8:	9301      	str	r3, [sp, #4]
 8080dfa:	bd08      	pop	{r3, pc}
 8080dfc:	080401a4 	.word	0x080401a4

08080e00 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8080e00:	b508      	push	{r3, lr}
 8080e02:	4b02      	ldr	r3, [pc, #8]	; (8080e0c <system_thread_get_state+0xc>)
 8080e04:	681b      	ldr	r3, [r3, #0]
 8080e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080e08:	9301      	str	r3, [sp, #4]
 8080e0a:	bd08      	pop	{r3, pc}
 8080e0c:	080401a4 	.word	0x080401a4

08080e10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080e10:	b508      	push	{r3, lr}
 8080e12:	4b03      	ldr	r3, [pc, #12]	; (8080e20 <system_ctrl_set_app_request_handler+0x10>)
 8080e14:	681b      	ldr	r3, [r3, #0]
 8080e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080e1a:	9301      	str	r3, [sp, #4]
 8080e1c:	bd08      	pop	{r3, pc}
 8080e1e:	0000      	.short	0x0000
 8080e20:	080401a4 	.word	0x080401a4

08080e24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080e24:	b508      	push	{r3, lr}
 8080e26:	4b03      	ldr	r3, [pc, #12]	; (8080e34 <system_ctrl_set_result+0x10>)
 8080e28:	681b      	ldr	r3, [r3, #0]
 8080e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080e2e:	9301      	str	r3, [sp, #4]
 8080e30:	bd08      	pop	{r3, pc}
 8080e32:	0000      	.short	0x0000
 8080e34:	080401a4 	.word	0x080401a4

08080e38 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8080e38:	b508      	push	{r3, lr}
 8080e3a:	4b02      	ldr	r3, [pc, #8]	; (8080e44 <spark_variable+0xc>)
 8080e3c:	681b      	ldr	r3, [r3, #0]
 8080e3e:	681b      	ldr	r3, [r3, #0]
 8080e40:	9301      	str	r3, [sp, #4]
 8080e42:	bd08      	pop	{r3, pc}
 8080e44:	080401cc 	.word	0x080401cc

08080e48 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8080e48:	b508      	push	{r3, lr}
 8080e4a:	4b02      	ldr	r3, [pc, #8]	; (8080e54 <spark_function+0xc>)
 8080e4c:	681b      	ldr	r3, [r3, #0]
 8080e4e:	685b      	ldr	r3, [r3, #4]
 8080e50:	9301      	str	r3, [sp, #4]
 8080e52:	bd08      	pop	{r3, pc}
 8080e54:	080401cc 	.word	0x080401cc

08080e58 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080e58:	b508      	push	{r3, lr}
 8080e5a:	4b02      	ldr	r3, [pc, #8]	; (8080e64 <spark_process+0xc>)
 8080e5c:	681b      	ldr	r3, [r3, #0]
 8080e5e:	689b      	ldr	r3, [r3, #8]
 8080e60:	9301      	str	r3, [sp, #4]
 8080e62:	bd08      	pop	{r3, pc}
 8080e64:	080401cc 	.word	0x080401cc

08080e68 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080e68:	b508      	push	{r3, lr}
 8080e6a:	4b02      	ldr	r3, [pc, #8]	; (8080e74 <spark_cloud_flag_connect+0xc>)
 8080e6c:	681b      	ldr	r3, [r3, #0]
 8080e6e:	68db      	ldr	r3, [r3, #12]
 8080e70:	9301      	str	r3, [sp, #4]
 8080e72:	bd08      	pop	{r3, pc}
 8080e74:	080401cc 	.word	0x080401cc

08080e78 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080e78:	b508      	push	{r3, lr}
 8080e7a:	4b02      	ldr	r3, [pc, #8]	; (8080e84 <spark_cloud_flag_connected+0xc>)
 8080e7c:	681b      	ldr	r3, [r3, #0]
 8080e7e:	695b      	ldr	r3, [r3, #20]
 8080e80:	9301      	str	r3, [sp, #4]
 8080e82:	bd08      	pop	{r3, pc}
 8080e84:	080401cc 	.word	0x080401cc

08080e88 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080e88:	b508      	push	{r3, lr}
 8080e8a:	4b02      	ldr	r3, [pc, #8]	; (8080e94 <spark_send_event+0xc>)
 8080e8c:	681b      	ldr	r3, [r3, #0]
 8080e8e:	6a1b      	ldr	r3, [r3, #32]
 8080e90:	9301      	str	r3, [sp, #4]
 8080e92:	bd08      	pop	{r3, pc}
 8080e94:	080401cc 	.word	0x080401cc

08080e98 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8080e98:	b508      	push	{r3, lr}
 8080e9a:	4b02      	ldr	r3, [pc, #8]	; (8080ea4 <spark_sync_time_pending+0xc>)
 8080e9c:	681b      	ldr	r3, [r3, #0]
 8080e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080ea0:	9301      	str	r3, [sp, #4]
 8080ea2:	bd08      	pop	{r3, pc}
 8080ea4:	080401cc 	.word	0x080401cc

08080ea8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080ea8:	b508      	push	{r3, lr}
 8080eaa:	4b02      	ldr	r3, [pc, #8]	; (8080eb4 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080eac:	681b      	ldr	r3, [r3, #0]
 8080eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080eb0:	9301      	str	r3, [sp, #4]
 8080eb2:	bd08      	pop	{r3, pc}
 8080eb4:	080401cc 	.word	0x080401cc

08080eb8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080eb8:	b508      	push	{r3, lr}
 8080eba:	4b02      	ldr	r3, [pc, #8]	; (8080ec4 <network_connect+0xc>)
 8080ebc:	681b      	ldr	r3, [r3, #0]
 8080ebe:	685b      	ldr	r3, [r3, #4]
 8080ec0:	9301      	str	r3, [sp, #4]
 8080ec2:	bd08      	pop	{r3, pc}
 8080ec4:	080401c8 	.word	0x080401c8

08080ec8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080ec8:	b508      	push	{r3, lr}
 8080eca:	4b02      	ldr	r3, [pc, #8]	; (8080ed4 <network_connecting+0xc>)
 8080ecc:	681b      	ldr	r3, [r3, #0]
 8080ece:	689b      	ldr	r3, [r3, #8]
 8080ed0:	9301      	str	r3, [sp, #4]
 8080ed2:	bd08      	pop	{r3, pc}
 8080ed4:	080401c8 	.word	0x080401c8

08080ed8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080ed8:	b508      	push	{r3, lr}
 8080eda:	4b02      	ldr	r3, [pc, #8]	; (8080ee4 <network_disconnect+0xc>)
 8080edc:	681b      	ldr	r3, [r3, #0]
 8080ede:	68db      	ldr	r3, [r3, #12]
 8080ee0:	9301      	str	r3, [sp, #4]
 8080ee2:	bd08      	pop	{r3, pc}
 8080ee4:	080401c8 	.word	0x080401c8

08080ee8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080ee8:	b508      	push	{r3, lr}
 8080eea:	4b02      	ldr	r3, [pc, #8]	; (8080ef4 <network_ready+0xc>)
 8080eec:	681b      	ldr	r3, [r3, #0]
 8080eee:	691b      	ldr	r3, [r3, #16]
 8080ef0:	9301      	str	r3, [sp, #4]
 8080ef2:	bd08      	pop	{r3, pc}
 8080ef4:	080401c8 	.word	0x080401c8

08080ef8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080ef8:	b508      	push	{r3, lr}
 8080efa:	4b02      	ldr	r3, [pc, #8]	; (8080f04 <network_on+0xc>)
 8080efc:	681b      	ldr	r3, [r3, #0]
 8080efe:	695b      	ldr	r3, [r3, #20]
 8080f00:	9301      	str	r3, [sp, #4]
 8080f02:	bd08      	pop	{r3, pc}
 8080f04:	080401c8 	.word	0x080401c8

08080f08 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080f08:	b508      	push	{r3, lr}
 8080f0a:	4b02      	ldr	r3, [pc, #8]	; (8080f14 <network_off+0xc>)
 8080f0c:	681b      	ldr	r3, [r3, #0]
 8080f0e:	699b      	ldr	r3, [r3, #24]
 8080f10:	9301      	str	r3, [sp, #4]
 8080f12:	bd08      	pop	{r3, pc}
 8080f14:	080401c8 	.word	0x080401c8

08080f18 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080f18:	b508      	push	{r3, lr}
 8080f1a:	4b02      	ldr	r3, [pc, #8]	; (8080f24 <network_listen+0xc>)
 8080f1c:	681b      	ldr	r3, [r3, #0]
 8080f1e:	69db      	ldr	r3, [r3, #28]
 8080f20:	9301      	str	r3, [sp, #4]
 8080f22:	bd08      	pop	{r3, pc}
 8080f24:	080401c8 	.word	0x080401c8

08080f28 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080f28:	b508      	push	{r3, lr}
 8080f2a:	4b02      	ldr	r3, [pc, #8]	; (8080f34 <network_listening+0xc>)
 8080f2c:	681b      	ldr	r3, [r3, #0]
 8080f2e:	6a1b      	ldr	r3, [r3, #32]
 8080f30:	9301      	str	r3, [sp, #4]
 8080f32:	bd08      	pop	{r3, pc}
 8080f34:	080401c8 	.word	0x080401c8

08080f38 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080f38:	b508      	push	{r3, lr}
 8080f3a:	4b02      	ldr	r3, [pc, #8]	; (8080f44 <network_set_listen_timeout+0xc>)
 8080f3c:	681b      	ldr	r3, [r3, #0]
 8080f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080f40:	9301      	str	r3, [sp, #4]
 8080f42:	bd08      	pop	{r3, pc}
 8080f44:	080401c8 	.word	0x080401c8

08080f48 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080f48:	b508      	push	{r3, lr}
 8080f4a:	4b02      	ldr	r3, [pc, #8]	; (8080f54 <network_get_listen_timeout+0xc>)
 8080f4c:	681b      	ldr	r3, [r3, #0]
 8080f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080f50:	9301      	str	r3, [sp, #4]
 8080f52:	bd08      	pop	{r3, pc}
 8080f54:	080401c8 	.word	0x080401c8

08080f58 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080f58:	b508      	push	{r3, lr}
 8080f5a:	4b02      	ldr	r3, [pc, #8]	; (8080f64 <malloc+0xc>)
 8080f5c:	681b      	ldr	r3, [r3, #0]
 8080f5e:	681b      	ldr	r3, [r3, #0]
 8080f60:	9301      	str	r3, [sp, #4]
 8080f62:	bd08      	pop	{r3, pc}
 8080f64:	080401a0 	.word	0x080401a0

08080f68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080f68:	b508      	push	{r3, lr}
 8080f6a:	4b02      	ldr	r3, [pc, #8]	; (8080f74 <free+0xc>)
 8080f6c:	681b      	ldr	r3, [r3, #0]
 8080f6e:	685b      	ldr	r3, [r3, #4]
 8080f70:	9301      	str	r3, [sp, #4]
 8080f72:	bd08      	pop	{r3, pc}
 8080f74:	080401a0 	.word	0x080401a0

08080f78 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080f78:	b508      	push	{r3, lr}
 8080f7a:	4b02      	ldr	r3, [pc, #8]	; (8080f84 <realloc+0xc>)
 8080f7c:	681b      	ldr	r3, [r3, #0]
 8080f7e:	689b      	ldr	r3, [r3, #8]
 8080f80:	9301      	str	r3, [sp, #4]
 8080f82:	bd08      	pop	{r3, pc}
 8080f84:	080401a0 	.word	0x080401a0

08080f88 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8080f88:	b508      	push	{r3, lr}
 8080f8a:	4b02      	ldr	r3, [pc, #8]	; (8080f94 <snprintf+0xc>)
 8080f8c:	681b      	ldr	r3, [r3, #0]
 8080f8e:	69db      	ldr	r3, [r3, #28]
 8080f90:	9301      	str	r3, [sp, #4]
 8080f92:	bd08      	pop	{r3, pc}
 8080f94:	080401a0 	.word	0x080401a0

08080f98 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080f98:	b508      	push	{r3, lr}
 8080f9a:	4b02      	ldr	r3, [pc, #8]	; (8080fa4 <abort+0xc>)
 8080f9c:	681b      	ldr	r3, [r3, #0]
 8080f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080fa0:	9301      	str	r3, [sp, #4]
 8080fa2:	bd08      	pop	{r3, pc}
 8080fa4:	080401a0 	.word	0x080401a0

08080fa8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080fa8:	b508      	push	{r3, lr}
 8080faa:	4b02      	ldr	r3, [pc, #8]	; (8080fb4 <_malloc_r+0xc>)
 8080fac:	681b      	ldr	r3, [r3, #0]
 8080fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080fb0:	9301      	str	r3, [sp, #4]
 8080fb2:	bd08      	pop	{r3, pc}
 8080fb4:	080401a0 	.word	0x080401a0

08080fb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080fb8:	2100      	movs	r1, #0
 8080fba:	f7ff bf01 	b.w	8080dc0 <system_delay_ms>

08080fbe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8080fbe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080fc0:	6883      	ldr	r3, [r0, #8]
 8080fc2:	4604      	mov	r4, r0
 8080fc4:	b90b      	cbnz	r3, 8080fca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080fc6:	f001 f964 	bl	8082292 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080fca:	68c3      	ldr	r3, [r0, #12]
 8080fcc:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8080fce:	68a3      	ldr	r3, [r4, #8]
 8080fd0:	b11b      	cbz	r3, 8080fda <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080fd2:	2203      	movs	r2, #3
 8080fd4:	4621      	mov	r1, r4
 8080fd6:	4620      	mov	r0, r4
 8080fd8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080fda:	4620      	mov	r0, r4
}
 8080fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080fe0:	f7ff b85d 	b.w	808009e <_ZdlPv>

08080fe4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080fe4:	2200      	movs	r2, #0
 8080fe6:	4611      	mov	r1, r2
 8080fe8:	6840      	ldr	r0, [r0, #4]
 8080fea:	f7ff bf7d 	b.w	8080ee8 <network_ready>

08080fee <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080fee:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8080ff2:	2600      	movs	r6, #0
 8080ff4:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080ff6:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080ff8:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080ffa:	4688      	mov	r8, r1
 8080ffc:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8080ffe:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081002:	f002 f9c6 	bl	8083392 <strlen>
 8081006:	9600      	str	r6, [sp, #0]
 8081008:	b281      	uxth	r1, r0
 808100a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808100e:	4622      	mov	r2, r4
 8081010:	4638      	mov	r0, r7
 8081012:	f7ff fd5d 	bl	8080ad0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081016:	b120      	cbz	r0, 8081022 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8081018:	4631      	mov	r1, r6
 808101a:	4628      	mov	r0, r5
 808101c:	f000 fc72 	bl	8081904 <_ZN9IPAddressC1Em>
 8081020:	e003      	b.n	808102a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081022:	4621      	mov	r1, r4
 8081024:	4628      	mov	r0, r5
 8081026:	f000 fc65 	bl	80818f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808102a:	4628      	mov	r0, r5
 808102c:	b004      	add	sp, #16
 808102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081032 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081032:	2200      	movs	r2, #0
 8081034:	4611      	mov	r1, r2
 8081036:	6840      	ldr	r0, [r0, #4]
 8081038:	f7ff bf76 	b.w	8080f28 <network_listening>

0808103c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808103c:	2200      	movs	r2, #0
 808103e:	4611      	mov	r1, r2
 8081040:	6840      	ldr	r0, [r0, #4]
 8081042:	f7ff bf81 	b.w	8080f48 <network_get_listen_timeout>

08081046 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081046:	2200      	movs	r2, #0
 8081048:	6840      	ldr	r0, [r0, #4]
 808104a:	f7ff bf75 	b.w	8080f38 <network_set_listen_timeout>

0808104e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808104e:	2200      	movs	r2, #0
 8081050:	f081 0101 	eor.w	r1, r1, #1
 8081054:	6840      	ldr	r0, [r0, #4]
 8081056:	f7ff bf5f 	b.w	8080f18 <network_listen>

0808105a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808105a:	2300      	movs	r3, #0
 808105c:	461a      	mov	r2, r3
 808105e:	4619      	mov	r1, r3
 8081060:	6840      	ldr	r0, [r0, #4]
 8081062:	f7ff bf51 	b.w	8080f08 <network_off>

08081066 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081066:	2300      	movs	r3, #0
 8081068:	461a      	mov	r2, r3
 808106a:	4619      	mov	r1, r3
 808106c:	6840      	ldr	r0, [r0, #4]
 808106e:	f7ff bf43 	b.w	8080ef8 <network_on>

08081072 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081072:	2200      	movs	r2, #0
 8081074:	4611      	mov	r1, r2
 8081076:	6840      	ldr	r0, [r0, #4]
 8081078:	f7ff bf26 	b.w	8080ec8 <network_connecting>

0808107c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808107c:	2200      	movs	r2, #0
 808107e:	2102      	movs	r1, #2
 8081080:	6840      	ldr	r0, [r0, #4]
 8081082:	f7ff bf29 	b.w	8080ed8 <network_disconnect>

08081086 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081086:	2300      	movs	r3, #0
 8081088:	461a      	mov	r2, r3
 808108a:	6840      	ldr	r0, [r0, #4]
 808108c:	f7ff bf14 	b.w	8080eb8 <network_connect>

08081090 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081090:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081092:	4c0c      	ldr	r4, [pc, #48]	; (80810c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8081094:	2528      	movs	r5, #40	; 0x28
 8081096:	462a      	mov	r2, r5
 8081098:	2100      	movs	r1, #0
 808109a:	4620      	mov	r0, r4
 808109c:	f002 f923 	bl	80832e6 <memset>
        cid = -1;
 80810a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80810a4:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 80810a6:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80810a8:	4c07      	ldr	r4, [pc, #28]	; (80810c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 80810aa:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80810ac:	4620      	mov	r0, r4
 80810ae:	6063      	str	r3, [r4, #4]
 80810b0:	4b06      	ldr	r3, [pc, #24]	; (80810cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 80810b2:	252c      	movs	r5, #44	; 0x2c
 80810b4:	f840 3b08 	str.w	r3, [r0], #8
 80810b8:	462a      	mov	r2, r5
 80810ba:	2100      	movs	r1, #0
 80810bc:	f002 f913 	bl	80832e6 <memset>
        size = sizeof(*this);
 80810c0:	8125      	strh	r5, [r4, #8]
 80810c2:	bd38      	pop	{r3, r4, r5, pc}
 80810c4:	200004d8 	.word	0x200004d8
 80810c8:	200004a4 	.word	0x200004a4
 80810cc:	08083674 	.word	0x08083674

080810d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80810d0:	4770      	bx	lr

080810d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80810d2:	2000      	movs	r0, #0
 80810d4:	4770      	bx	lr

080810d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80810d6:	b510      	push	{r4, lr}
 80810d8:	4604      	mov	r4, r0
 80810da:	f7fe ffe0 	bl	808009e <_ZdlPv>
 80810de:	4620      	mov	r0, r4
 80810e0:	bd10      	pop	{r4, pc}

080810e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80810e2:	b508      	push	{r3, lr}
      { delete this; }
 80810e4:	b108      	cbz	r0, 80810ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80810e6:	f7ff fff6 	bl	80810d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80810ea:	bd08      	pop	{r3, pc}

080810ec <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80810ec:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80810ee:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80810f0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80810f2:	b113      	cbz	r3, 80810fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80810f4:	2203      	movs	r2, #3
 80810f6:	4601      	mov	r1, r0
 80810f8:	4798      	blx	r3
    }
 80810fa:	4620      	mov	r0, r4
 80810fc:	bd10      	pop	{r4, pc}

080810fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80810fe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081100:	68c4      	ldr	r4, [r0, #12]
 8081102:	b1d4      	cbz	r4, 808113a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081104:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081106:	2b02      	cmp	r3, #2
 8081108:	d102      	bne.n	8081110 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808110a:	68e0      	ldr	r0, [r4, #12]
 808110c:	f7ff ff2c 	bl	8080f68 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081110:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081112:	b12d      	cbz	r5, 8081120 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081114:	4628      	mov	r0, r5
 8081116:	f7ff ffe9 	bl	80810ec <_ZNSt14_Function_baseD1Ev>
 808111a:	4628      	mov	r0, r5
 808111c:	f7fe ffbf 	bl	808009e <_ZdlPv>
 8081120:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081122:	b12d      	cbz	r5, 8081130 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8081124:	4628      	mov	r0, r5
 8081126:	f7ff ffe1 	bl	80810ec <_ZNSt14_Function_baseD1Ev>
 808112a:	4628      	mov	r0, r5
 808112c:	f7fe ffb7 	bl	808009e <_ZdlPv>
 8081130:	4620      	mov	r0, r4
 8081132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081136:	f7fe bfb2 	b.w	808009e <_ZdlPv>
 808113a:	bd38      	pop	{r3, r4, r5, pc}

0808113c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808113c:	b510      	push	{r4, lr}
 808113e:	b088      	sub	sp, #32
 8081140:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081142:	4668      	mov	r0, sp
 8081144:	f000 fd4e 	bl	8081be4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8081148:	4669      	mov	r1, sp
 808114a:	a804      	add	r0, sp, #16
 808114c:	f000 fd6c 	bl	8081c28 <_ZN6StringC1ERKS_>
 8081150:	a804      	add	r0, sp, #16
 8081152:	47a0      	blx	r4
 8081154:	4604      	mov	r4, r0
 8081156:	a804      	add	r0, sp, #16
 8081158:	f000 fcfd 	bl	8081b56 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808115c:	4668      	mov	r0, sp
 808115e:	f000 fcfa 	bl	8081b56 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081162:	4620      	mov	r0, r4
 8081164:	b008      	add	sp, #32
 8081166:	bd10      	pop	{r4, pc}

08081168 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081168:	b5f0      	push	{r4, r5, r6, r7, lr}
 808116a:	4607      	mov	r7, r0
 808116c:	460e      	mov	r6, r1
 808116e:	4615      	mov	r5, r2
 8081170:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 8081172:	2410      	movs	r4, #16
 8081174:	4622      	mov	r2, r4
 8081176:	2100      	movs	r1, #0
 8081178:	4668      	mov	r0, sp
 808117a:	f002 f8b4 	bl	80832e6 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808117e:	2200      	movs	r2, #0
 8081180:	4669      	mov	r1, sp
 8081182:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 8081184:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 8081188:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808118a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808118c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808118e:	f7ff fe5b 	bl	8080e48 <spark_function>
}
 8081192:	b005      	add	sp, #20
 8081194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081196 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081196:	b513      	push	{r0, r1, r4, lr}
 8081198:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808119a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808119e:	2300      	movs	r3, #0
 80811a0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80811a2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80811a4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80811a6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80811a8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80811aa:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80811ac:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80811ae:	f7ff f91b 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80811b2:	4620      	mov	r0, r4
 80811b4:	b002      	add	sp, #8
 80811b6:	bd10      	pop	{r4, pc}

080811b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80811b8:	680b      	ldr	r3, [r1, #0]
 80811ba:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80811bc:	b113      	cbz	r3, 80811c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80811be:	685a      	ldr	r2, [r3, #4]
 80811c0:	3201      	adds	r2, #1
 80811c2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80811c4:	4770      	bx	lr

080811c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80811c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80811c8:	460c      	mov	r4, r1
 80811ca:	4606      	mov	r6, r0
 80811cc:	460f      	mov	r7, r1
 80811ce:	f854 3b04 	ldr.w	r3, [r4], #4
 80811d2:	ad02      	add	r5, sp, #8
 80811d4:	f845 3d08 	str.w	r3, [r5, #-8]!
 80811d8:	4621      	mov	r1, r4
 80811da:	a801      	add	r0, sp, #4
 80811dc:	f7ff ffec 	bl	80811b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80811e0:	4629      	mov	r1, r5
 80811e2:	4630      	mov	r0, r6
 80811e4:	f7ff ffd7 	bl	8081196 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80811e8:	a801      	add	r0, sp, #4
 80811ea:	f7ff f8fd 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80811ee:	4620      	mov	r0, r4
 80811f0:	f7ff f8fa 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80811f4:	4638      	mov	r0, r7
 80811f6:	f7fe ff52 	bl	808009e <_ZdlPv>
        return p;
    }
 80811fa:	4630      	mov	r0, r6
 80811fc:	b003      	add	sp, #12
 80811fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081200 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081200:	b513      	push	{r0, r1, r4, lr}
 8081202:	460b      	mov	r3, r1
 8081204:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081206:	c803      	ldmia	r0, {r0, r1}
 8081208:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808120c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081210:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081214:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081218:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808121c:	b002      	add	sp, #8
 808121e:	bd10      	pop	{r4, pc}

08081220 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081220:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081222:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081224:	b90a      	cbnz	r2, 808122a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081226:	f001 f834 	bl	8082292 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808122a:	68c3      	ldr	r3, [r0, #12]
    }
 808122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081230:	4718      	bx	r3

08081232 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081232:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081234:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081236:	f100 0110 	add.w	r1, r0, #16
 808123a:	f7ff fff1 	bl	8081220 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808123e:	bd08      	pop	{r3, pc}

08081240 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081240:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081242:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081244:	b90a      	cbnz	r2, 808124a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081246:	f001 f824 	bl	8082292 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808124a:	68c3      	ldr	r3, [r0, #12]
    }
 808124c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081250:	4718      	bx	r3

08081252 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081252:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081254:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081256:	f100 0110 	add.w	r1, r0, #16
 808125a:	f7ff fff1 	bl	8081240 <_ZNKSt8functionIFvRKbEEclES1_>
 808125e:	bd08      	pop	{r3, pc}

08081260 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081260:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081262:	2300      	movs	r3, #0
 8081264:	6083      	str	r3, [r0, #8]
 8081266:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081268:	4604      	mov	r4, r0
 808126a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808126c:	b12b      	cbz	r3, 808127a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808126e:	2202      	movs	r2, #2
 8081270:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081272:	68eb      	ldr	r3, [r5, #12]
 8081274:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081276:	68ab      	ldr	r3, [r5, #8]
 8081278:	60a3      	str	r3, [r4, #8]
	}
    }
 808127a:	4620      	mov	r0, r4
 808127c:	bd38      	pop	{r3, r4, r5, pc}
	...

08081280 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8081284:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081288:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808128a:	f04f 0002 	mov.w	r0, #2
 808128e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081290:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081294:	808b      	strh	r3, [r1, #4]
 8081296:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081298:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808129a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 808129e:	600b      	str	r3, [r1, #0]
 80812a0:	e8d4 1f4f 	ldrexb	r1, [r4]
 80812a4:	4299      	cmp	r1, r3
 80812a6:	d103      	bne.n	80812b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80812a8:	e8c4 0f45 	strexb	r5, r0, [r4]
 80812ac:	2d00      	cmp	r5, #0
 80812ae:	d1f7      	bne.n	80812a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80812b0:	d002      	beq.n	80812b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80812b2:	f88d 1000 	strb.w	r1, [sp]
 80812b6:	e06b      	b.n	8081390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80812b8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80812bc:	bf1c      	itt	ne
 80812be:	60e7      	strne	r7, [r4, #12]
 80812c0:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80812c2:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80812c6:	bf18      	it	ne
 80812c8:	461f      	movne	r7, r3
 80812ca:	2301      	movs	r3, #1
 80812cc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80812ce:	f3bf 8f5f 	dmb	sy
 80812d2:	f104 0308 	add.w	r3, r4, #8
 80812d6:	2000      	movs	r0, #0
 80812d8:	e853 6f00 	ldrex	r6, [r3]
 80812dc:	e843 0200 	strex	r2, r0, [r3]
 80812e0:	2a00      	cmp	r2, #0
 80812e2:	d1f9      	bne.n	80812d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80812e4:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80812e8:	2e00      	cmp	r6, #0
 80812ea:	d051      	beq.n	8081390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80812ec:	f7ff fd78 	bl	8080de0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80812f0:	b120      	cbz	r0, 80812fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80812f2:	4629      	mov	r1, r5
 80812f4:	4630      	mov	r0, r6
 80812f6:	f7ff ff93 	bl	8081220 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80812fa:	e043      	b.n	8081384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80812fc:	4631      	mov	r1, r6
 80812fe:	4668      	mov	r0, sp
 8081300:	f7ff ffae 	bl	8081260 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081304:	68e0      	ldr	r0, [r4, #12]
 8081306:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808130a:	b108      	cbz	r0, 8081310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 808130c:	f002 f826 	bl	808335c <strdup>
 8081310:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081312:	2010      	movs	r0, #16
 8081314:	f8ad 5014 	strh.w	r5, [sp, #20]
 8081318:	f7fe febf 	bl	808009a <_Znwj>
 808131c:	4605      	mov	r5, r0
 808131e:	b330      	cbz	r0, 808136e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081320:	f04f 0800 	mov.w	r8, #0
 8081324:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081328:	2018      	movs	r0, #24
 808132a:	f7fe feb6 	bl	808009a <_Znwj>
 808132e:	4604      	mov	r4, r0
 8081330:	b1c0      	cbz	r0, 8081364 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081332:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081336:	4601      	mov	r1, r0
 8081338:	4668      	mov	r0, sp
 808133a:	f7ff ff61 	bl	8081200 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808133e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081340:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081342:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081344:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081346:	9202      	str	r2, [sp, #8]
 8081348:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808134a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808134c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8081350:	9203      	str	r2, [sp, #12]
 8081352:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8081354:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081358:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808135c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808135e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081362:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081364:	4b0d      	ldr	r3, [pc, #52]	; (808139c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081366:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081368:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808136a:	4b0d      	ldr	r3, [pc, #52]	; (80813a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 808136c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808136e:	9804      	ldr	r0, [sp, #16]
 8081370:	f7ff fdfa 	bl	8080f68 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081374:	4668      	mov	r0, sp
 8081376:	f7ff feb9 	bl	80810ec <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808137a:	2200      	movs	r2, #0
 808137c:	4629      	mov	r1, r5
 808137e:	4809      	ldr	r0, [pc, #36]	; (80813a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8081380:	f7ff fd36 	bl	8080df0 <application_thread_invoke>
 8081384:	4630      	mov	r0, r6
 8081386:	f7ff feb1 	bl	80810ec <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808138a:	4630      	mov	r0, r6
 808138c:	f7fe fe87 	bl	808009e <_ZdlPv>
 8081390:	4638      	mov	r0, r7
 8081392:	f7ff fde9 	bl	8080f68 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8081396:	b006      	add	sp, #24
 8081398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808139c:	08081233 	.word	0x08081233
 80813a0:	08081491 	.word	0x08081491
 80813a4:	08080fbf 	.word	0x08080fbf

080813a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80813a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80813ac:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80813ae:	ad07      	add	r5, sp, #28
 80813b0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80813b4:	4606      	mov	r6, r0
 80813b6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80813b8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80813ba:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80813bc:	460f      	mov	r7, r1
 80813be:	4690      	mov	r8, r2
 80813c0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80813c4:	f8c5 b004 	str.w	fp, [r5, #4]
 80813c8:	f8c5 b008 	str.w	fp, [r5, #8]
 80813cc:	9307      	str	r3, [sp, #28]
 80813ce:	f7fe fe64 	bl	808009a <_Znwj>
 80813d2:	4604      	mov	r4, r0
 80813d4:	b138      	cbz	r0, 80813e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80813d6:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80813da:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80813de:	f8c0 b004 	str.w	fp, [r0, #4]
 80813e2:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80813e6:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80813e8:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80813ea:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80813ec:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80813ee:	f7fe fe54 	bl	808009a <_Znwj>
 80813f2:	b128      	cbz	r0, 8081400 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80813f4:	2301      	movs	r3, #1
 80813f6:	6043      	str	r3, [r0, #4]
 80813f8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80813fa:	4b23      	ldr	r3, [pc, #140]	; (8081488 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80813fc:	60c4      	str	r4, [r0, #12]
 80813fe:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081400:	4b22      	ldr	r3, [pc, #136]	; (808148c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081402:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081404:	2008      	movs	r0, #8
 8081406:	9308      	str	r3, [sp, #32]
 8081408:	f7fe fe47 	bl	808009a <_Znwj>
 808140c:	4604      	mov	r4, r0
 808140e:	b128      	cbz	r0, 808141c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081410:	9b03      	ldr	r3, [sp, #12]
 8081412:	a904      	add	r1, sp, #16
 8081414:	f840 3b04 	str.w	r3, [r0], #4
 8081418:	f7ff fece 	bl	80811b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808141c:	9500      	str	r5, [sp, #0]
 808141e:	fa5f f38a 	uxtb.w	r3, sl
 8081422:	464a      	mov	r2, r9
 8081424:	4641      	mov	r1, r8
 8081426:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081428:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808142a:	f7ff fd2d 	bl	8080e88 <spark_send_event>
 808142e:	b9b8      	cbnz	r0, 8081460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081430:	9b03      	ldr	r3, [sp, #12]
 8081432:	785b      	ldrb	r3, [r3, #1]
 8081434:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081438:	b993      	cbnz	r3, 8081460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808143a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808143e:	a905      	add	r1, sp, #20
 8081440:	a803      	add	r0, sp, #12
 8081442:	9205      	str	r2, [sp, #20]
 8081444:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081448:	f7ff ff1a 	bl	8081280 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808144c:	9805      	ldr	r0, [sp, #20]
 808144e:	f7ff fd8b 	bl	8080f68 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081452:	a805      	add	r0, sp, #20
 8081454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081456:	f7ff feb6 	bl	80811c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808145a:	a806      	add	r0, sp, #24
 808145c:	f7fe ffc4 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081460:	9b03      	ldr	r3, [sp, #12]
 8081462:	a904      	add	r1, sp, #16
 8081464:	a806      	add	r0, sp, #24
 8081466:	9305      	str	r3, [sp, #20]
 8081468:	f7ff fea6 	bl	80811b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808146c:	a905      	add	r1, sp, #20
 808146e:	4630      	mov	r0, r6
 8081470:	f7ff fe91 	bl	8081196 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081474:	a806      	add	r0, sp, #24
 8081476:	f7fe ffb7 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808147a:	a804      	add	r0, sp, #16
 808147c:	f7fe ffb4 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081480:	4630      	mov	r0, r6
 8081482:	b00b      	add	sp, #44	; 0x2c
 8081484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081488:	080836a8 	.word	0x080836a8
 808148c:	080815f9 	.word	0x080815f9

08081490 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081490:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081494:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081496:	d006      	beq.n	80814a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081498:	2a03      	cmp	r2, #3
 808149a:	d017      	beq.n	80814cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808149c:	2a01      	cmp	r2, #1
 808149e:	d120      	bne.n	80814e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80814a0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80814a2:	6003      	str	r3, [r0, #0]
	      break;
 80814a4:	e01d      	b.n	80814e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80814a6:	2018      	movs	r0, #24
 80814a8:	680e      	ldr	r6, [r1, #0]
 80814aa:	f7fe fdf6 	bl	808009a <_Znwj>
 80814ae:	4605      	mov	r5, r0
 80814b0:	b150      	cbz	r0, 80814c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80814b2:	4631      	mov	r1, r6
 80814b4:	f7ff fed4 	bl	8081260 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80814b8:	6930      	ldr	r0, [r6, #16]
 80814ba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80814be:	b108      	cbz	r0, 80814c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80814c0:	f001 ff4c 	bl	808335c <strdup>
 80814c4:	6128      	str	r0, [r5, #16]
 80814c6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80814c8:	6025      	str	r5, [r4, #0]
 80814ca:	e00a      	b.n	80814e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80814cc:	6804      	ldr	r4, [r0, #0]
 80814ce:	b144      	cbz	r4, 80814e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80814d0:	6920      	ldr	r0, [r4, #16]
 80814d2:	f7ff fd49 	bl	8080f68 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80814d6:	4620      	mov	r0, r4
 80814d8:	f7ff fe08 	bl	80810ec <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80814dc:	4620      	mov	r0, r4
 80814de:	f7fe fdde 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80814e2:	2000      	movs	r0, #0
 80814e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080814e6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80814e6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80814e8:	2300      	movs	r3, #0
 80814ea:	6083      	str	r3, [r0, #8]
 80814ec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80814ee:	4604      	mov	r4, r0
 80814f0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80814f2:	b12b      	cbz	r3, 8081500 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80814f4:	2202      	movs	r2, #2
 80814f6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80814f8:	68eb      	ldr	r3, [r5, #12]
 80814fa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80814fc:	68ab      	ldr	r3, [r5, #8]
 80814fe:	60a3      	str	r3, [r4, #8]
	}
    }
 8081500:	4620      	mov	r0, r4
 8081502:	bd38      	pop	{r3, r4, r5, pc}

08081504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081504:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081506:	b570      	push	{r4, r5, r6, lr}
 8081508:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808150a:	d006      	beq.n	808151a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808150c:	2a03      	cmp	r2, #3
 808150e:	d011      	beq.n	8081534 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8081510:	2a01      	cmp	r2, #1
 8081512:	d117      	bne.n	8081544 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081514:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081516:	6003      	str	r3, [r0, #0]
	      break;
 8081518:	e014      	b.n	8081544 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808151a:	2014      	movs	r0, #20
 808151c:	680e      	ldr	r6, [r1, #0]
 808151e:	f7fe fdbc 	bl	808009a <_Znwj>
 8081522:	4605      	mov	r5, r0
 8081524:	b120      	cbz	r0, 8081530 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081526:	4631      	mov	r1, r6
 8081528:	f7ff ffdd 	bl	80814e6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808152c:	7c33      	ldrb	r3, [r6, #16]
 808152e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081530:	6025      	str	r5, [r4, #0]
 8081532:	e007      	b.n	8081544 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081534:	6804      	ldr	r4, [r0, #0]
 8081536:	b12c      	cbz	r4, 8081544 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081538:	4620      	mov	r0, r4
 808153a:	f7ff fdd7 	bl	80810ec <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808153e:	4620      	mov	r0, r4
 8081540:	f7fe fdad 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081544:	2000      	movs	r0, #0
 8081546:	bd70      	pop	{r4, r5, r6, pc}

08081548 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8081548:	b5f0      	push	{r4, r5, r6, r7, lr}
 808154a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808154c:	f3bf 8f5f 	dmb	sy
 8081550:	b087      	sub	sp, #28
 8081552:	2300      	movs	r3, #0
 8081554:	e850 6f00 	ldrex	r6, [r0]
 8081558:	e840 3200 	strex	r2, r3, [r0]
 808155c:	2a00      	cmp	r2, #0
 808155e:	d1f9      	bne.n	8081554 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8081560:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081564:	2e00      	cmp	r6, #0
 8081566:	d03e      	beq.n	80815e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081568:	4618      	mov	r0, r3
 808156a:	f7ff fc39 	bl	8080de0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808156e:	4607      	mov	r7, r0
 8081570:	b120      	cbz	r0, 808157c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081572:	4621      	mov	r1, r4
 8081574:	4630      	mov	r0, r6
 8081576:	f7ff fe63 	bl	8081240 <_ZNKSt8functionIFvRKbEEclES1_>
 808157a:	e02e      	b.n	80815da <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808157c:	4631      	mov	r1, r6
 808157e:	a801      	add	r0, sp, #4
 8081580:	f7ff ffb1 	bl	80814e6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081584:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081586:	2010      	movs	r0, #16
 8081588:	f88d 3014 	strb.w	r3, [sp, #20]
 808158c:	f7fe fd85 	bl	808009a <_Znwj>
 8081590:	4605      	mov	r5, r0
 8081592:	b1d0      	cbz	r0, 80815ca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081594:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081596:	2014      	movs	r0, #20
 8081598:	f7fe fd7f 	bl	808009a <_Znwj>
 808159c:	4604      	mov	r4, r0
 808159e:	b178      	cbz	r0, 80815c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80815a0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80815a2:	4601      	mov	r1, r0
 80815a4:	a801      	add	r0, sp, #4
 80815a6:	f7ff fe2b 	bl	8081200 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80815aa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80815ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80815ae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80815b0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80815b2:	9203      	str	r2, [sp, #12]
 80815b4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80815b6:	60e3      	str	r3, [r4, #12]
 80815b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80815bc:	9204      	str	r2, [sp, #16]
 80815be:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80815c0:	4b0a      	ldr	r3, [pc, #40]	; (80815ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80815c2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80815c4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80815c6:	4b0a      	ldr	r3, [pc, #40]	; (80815f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80815c8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80815ca:	a801      	add	r0, sp, #4
 80815cc:	f7ff fd8e 	bl	80810ec <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80815d0:	2200      	movs	r2, #0
 80815d2:	4629      	mov	r1, r5
 80815d4:	4807      	ldr	r0, [pc, #28]	; (80815f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80815d6:	f7ff fc0b 	bl	8080df0 <application_thread_invoke>
 80815da:	4630      	mov	r0, r6
 80815dc:	f7ff fd86 	bl	80810ec <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80815e0:	4630      	mov	r0, r6
 80815e2:	f7fe fd5c 	bl	808009e <_ZdlPv>
        }
    }
 80815e6:	b007      	add	sp, #28
 80815e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80815ea:	bf00      	nop
 80815ec:	08081253 	.word	0x08081253
 80815f0:	08081505 	.word	0x08081505
 80815f4:	08080fbf 	.word	0x08080fbf

080815f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80815f8:	b530      	push	{r4, r5, lr}
 80815fa:	4604      	mov	r4, r0
 80815fc:	b085      	sub	sp, #20
 80815fe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8081600:	4668      	mov	r0, sp
 8081602:	4611      	mov	r1, r2
 8081604:	f7ff fddf 	bl	80811c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081608:	b17c      	cbz	r4, 808162a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808160a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808160c:	4628      	mov	r0, r5
 808160e:	b10d      	cbz	r5, 8081614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8081610:	f001 fea4 	bl	808335c <strdup>
 8081614:	9002      	str	r0, [sp, #8]
 8081616:	a902      	add	r1, sp, #8
 8081618:	4668      	mov	r0, sp
 808161a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808161e:	f7ff fe2f 	bl	8081280 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081622:	9802      	ldr	r0, [sp, #8]
 8081624:	f7ff fca0 	bl	8080f68 <free>
 8081628:	e01d      	b.n	8081666 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808162a:	f04f 0201 	mov.w	r2, #1
 808162e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081630:	f88d 4008 	strb.w	r4, [sp, #8]
 8081634:	e8d0 3f4f 	ldrexb	r3, [r0]
 8081638:	42a3      	cmp	r3, r4
 808163a:	d103      	bne.n	8081644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808163c:	e8c0 2f41 	strexb	r1, r2, [r0]
 8081640:	2900      	cmp	r1, #0
 8081642:	d1f7      	bne.n	8081634 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081644:	d002      	beq.n	808164c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8081646:	f88d 3008 	strb.w	r3, [sp, #8]
 808164a:	e00c      	b.n	8081666 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808164c:	f110 010c 	adds.w	r1, r0, #12
 8081650:	f04f 0301 	mov.w	r3, #1
 8081654:	bf18      	it	ne
 8081656:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081658:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808165c:	3004      	adds	r0, #4
 808165e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8081662:	f7ff ff71 	bl	8081548 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081666:	a801      	add	r0, sp, #4
 8081668:	f7fe febe 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808166c:	b005      	add	sp, #20
 808166e:	bd30      	pop	{r4, r5, pc}

08081670 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8081670:	6800      	ldr	r0, [r0, #0]
 8081672:	f000 b8d9 	b.w	8081828 <_ZN7TwoWire4lockEv>

08081676 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8081676:	b510      	push	{r4, lr}
 8081678:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808167a:	6001      	str	r1, [r0, #0]
 808167c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808167e:	b10a      	cbz	r2, 8081684 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8081680:	f7ff fff6 	bl	8081670 <_ZN9FuelGauge4lockEv>
    }
}
 8081684:	4620      	mov	r0, r4
 8081686:	bd10      	pop	{r4, pc}

08081688 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8081688:	b538      	push	{r3, r4, r5, lr}
 808168a:	4604      	mov	r4, r0
 808168c:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808168e:	f000 fd95 	bl	80821bc <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8081692:	462a      	mov	r2, r5
 8081694:	4601      	mov	r1, r0
 8081696:	4620      	mov	r0, r4
 8081698:	f7ff ffed 	bl	8081676 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808169c:	4620      	mov	r0, r4
 808169e:	bd38      	pop	{r3, r4, r5, pc}

080816a0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80816a0:	6800      	ldr	r0, [r0, #0]
 80816a2:	f000 b8ca 	b.w	808183a <_ZN7TwoWire6unlockEv>

080816a6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80816a6:	b510      	push	{r4, lr}
{
    if (lock_) {
 80816a8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80816aa:	4604      	mov	r4, r0
{
    if (lock_) {
 80816ac:	b10b      	cbz	r3, 80816b2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80816ae:	f7ff fff7 	bl	80816a0 <_ZN9FuelGauge6unlockEv>
    }
}
 80816b2:	4620      	mov	r0, r4
 80816b4:	bd10      	pop	{r4, pc}

080816b6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80816b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80816b8:	4604      	mov	r4, r0
 80816ba:	460f      	mov	r7, r1
 80816bc:	4616      	mov	r6, r2
 80816be:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80816c0:	f7ff ffd6 	bl	8081670 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80816c4:	6820      	ldr	r0, [r4, #0]
 80816c6:	2136      	movs	r1, #54	; 0x36
 80816c8:	f000 f8a0 	bl	808180c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 80816cc:	6820      	ldr	r0, [r4, #0]
 80816ce:	4639      	mov	r1, r7
 80816d0:	6803      	ldr	r3, [r0, #0]
 80816d2:	689b      	ldr	r3, [r3, #8]
 80816d4:	4798      	blx	r3
    i2c_.endTransmission(true);
 80816d6:	2101      	movs	r1, #1
 80816d8:	6820      	ldr	r0, [r4, #0]
 80816da:	f000 f89a 	bl	8081812 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80816de:	2202      	movs	r2, #2
 80816e0:	2136      	movs	r1, #54	; 0x36
 80816e2:	2301      	movs	r3, #1
 80816e4:	6820      	ldr	r0, [r4, #0]
 80816e6:	f000 f888 	bl	80817fa <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80816ea:	6820      	ldr	r0, [r4, #0]
 80816ec:	6803      	ldr	r3, [r0, #0]
 80816ee:	695b      	ldr	r3, [r3, #20]
 80816f0:	4798      	blx	r3
 80816f2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80816f4:	6820      	ldr	r0, [r4, #0]
 80816f6:	6803      	ldr	r3, [r0, #0]
 80816f8:	695b      	ldr	r3, [r3, #20]
 80816fa:	4798      	blx	r3
 80816fc:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80816fe:	4620      	mov	r0, r4
}
 8081700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8081704:	f7ff bfcc 	b.w	80816a0 <_ZN9FuelGauge6unlockEv>

08081708 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8081708:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808170a:	2200      	movs	r2, #0
	byte LSB = 0;
 808170c:	ab02      	add	r3, sp, #8
 808170e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8081712:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8081716:	2104      	movs	r1, #4
 8081718:	f10d 0206 	add.w	r2, sp, #6
 808171c:	f7ff ffcb 	bl	80816b6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8081720:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8081724:	f001 f852 	bl	80827cc <__aeabi_i2d>
 8081728:	2200      	movs	r2, #0
 808172a:	4b08      	ldr	r3, [pc, #32]	; (808174c <_ZN9FuelGauge6getSoCEv+0x44>)
 808172c:	f001 f8b4 	bl	8082898 <__aeabi_dmul>
 8081730:	f001 faec 	bl	8082d0c <__aeabi_d2f>
 8081734:	4604      	mov	r4, r0
 8081736:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808173a:	f001 fbf1 	bl	8082f20 <__aeabi_i2f>
 808173e:	4601      	mov	r1, r0
 8081740:	4620      	mov	r0, r4
 8081742:	f001 fb39 	bl	8082db8 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8081746:	b002      	add	sp, #8
 8081748:	bd10      	pop	{r4, pc}
 808174a:	bf00      	nop
 808174c:	3f700000 	.word	0x3f700000

08081750 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8081750:	4770      	bx	lr

08081752 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8081752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081754:	4606      	mov	r6, r0
 8081756:	4615      	mov	r5, r2
 8081758:	460c      	mov	r4, r1
 808175a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808175c:	42bc      	cmp	r4, r7
 808175e:	d006      	beq.n	808176e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081760:	6833      	ldr	r3, [r6, #0]
 8081762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081766:	689b      	ldr	r3, [r3, #8]
 8081768:	4630      	mov	r0, r6
 808176a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808176c:	e7f6      	b.n	808175c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808176e:	4628      	mov	r0, r5
 8081770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081772 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8081772:	2200      	movs	r2, #0
 8081774:	7c00      	ldrb	r0, [r0, #16]
 8081776:	f7ff ba4b 	b.w	8080c10 <HAL_I2C_Write_Data>

0808177a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808177a:	2100      	movs	r1, #0
 808177c:	7c00      	ldrb	r0, [r0, #16]
 808177e:	f7ff ba4f 	b.w	8080c20 <HAL_I2C_Available_Data>

08081782 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8081782:	2100      	movs	r1, #0
 8081784:	7c00      	ldrb	r0, [r0, #16]
 8081786:	f7ff ba53 	b.w	8080c30 <HAL_I2C_Read_Data>

0808178a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808178a:	2100      	movs	r1, #0
 808178c:	7c00      	ldrb	r0, [r0, #16]
 808178e:	f7ff ba57 	b.w	8080c40 <HAL_I2C_Peek_Data>

08081792 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8081792:	2100      	movs	r1, #0
 8081794:	7c00      	ldrb	r0, [r0, #16]
 8081796:	f7ff ba5b 	b.w	8080c50 <HAL_I2C_Flush_Data>

0808179a <_ZN7TwoWireD0Ev>:
 808179a:	b510      	push	{r4, lr}
 808179c:	4604      	mov	r4, r0
 808179e:	f7fe fc7e 	bl	808009e <_ZdlPv>
 80817a2:	4620      	mov	r0, r4
 80817a4:	bd10      	pop	{r4, pc}
	...

080817a8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80817a8:	b510      	push	{r4, lr}
 80817aa:	4604      	mov	r4, r0
 80817ac:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80817ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80817b2:	60a3      	str	r3, [r4, #8]
 80817b4:	4b04      	ldr	r3, [pc, #16]	; (80817c8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80817b6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80817b8:	7420      	strb	r0, [r4, #16]
 80817ba:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80817bc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80817be:	f7ff fa57 	bl	8080c70 <HAL_I2C_Init>

}
 80817c2:	4620      	mov	r0, r4
 80817c4:	bd10      	pop	{r4, pc}
 80817c6:	bf00      	nop
 80817c8:	080836c4 	.word	0x080836c4

080817cc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80817cc:	2300      	movs	r3, #0
 80817ce:	461a      	mov	r2, r3
 80817d0:	4619      	mov	r1, r3
 80817d2:	7c00      	ldrb	r0, [r0, #16]
 80817d4:	f7ff b9fc 	b.w	8080bd0 <HAL_I2C_Begin>

080817d8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80817d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80817da:	2400      	movs	r4, #0
 80817dc:	7c00      	ldrb	r0, [r0, #16]
 80817de:	9400      	str	r4, [sp, #0]
 80817e0:	f7ff f9fe 	bl	8080be0 <HAL_I2C_Request_Data>
  return result;
}
 80817e4:	b2c0      	uxtb	r0, r0
 80817e6:	b002      	add	sp, #8
 80817e8:	bd10      	pop	{r4, pc}

080817ea <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80817ea:	2301      	movs	r3, #1
 80817ec:	f7ff bff4 	b.w	80817d8 <_ZN7TwoWire11requestFromEhhh>

080817f0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80817f0:	2301      	movs	r3, #1
 80817f2:	b2d2      	uxtb	r2, r2
 80817f4:	b2c9      	uxtb	r1, r1
 80817f6:	f7ff bfef 	b.w	80817d8 <_ZN7TwoWire11requestFromEhhh>

080817fa <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80817fa:	b2db      	uxtb	r3, r3
 80817fc:	b2d2      	uxtb	r2, r2
 80817fe:	b2c9      	uxtb	r1, r1
 8081800:	f7ff bfea 	b.w	80817d8 <_ZN7TwoWire11requestFromEhhh>

08081804 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8081804:	2200      	movs	r2, #0
 8081806:	7c00      	ldrb	r0, [r0, #16]
 8081808:	f7ff b9f2 	b.w	8080bf0 <HAL_I2C_Begin_Transmission>

0808180c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808180c:	b2c9      	uxtb	r1, r1
 808180e:	f7ff bff9 	b.w	8081804 <_ZN7TwoWire17beginTransmissionEh>

08081812 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8081812:	2200      	movs	r2, #0
 8081814:	7c00      	ldrb	r0, [r0, #16]
 8081816:	f7ff b9f3 	b.w	8080c00 <HAL_I2C_End_Transmission>

0808181a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808181a:	2101      	movs	r1, #1
 808181c:	f7ff bff9 	b.w	8081812 <_ZN7TwoWire15endTransmissionEh>

08081820 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8081820:	2100      	movs	r1, #0
 8081822:	7c00      	ldrb	r0, [r0, #16]
 8081824:	f7ff ba1c 	b.w	8080c60 <HAL_I2C_Is_Enabled>

08081828 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8081828:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808182a:	2100      	movs	r1, #0
 808182c:	7c00      	ldrb	r0, [r0, #16]
 808182e:	f7ff fa27 	bl	8080c80 <HAL_I2C_Acquire>
}
 8081832:	fab0 f080 	clz	r0, r0
 8081836:	0940      	lsrs	r0, r0, #5
 8081838:	bd08      	pop	{r3, pc}

0808183a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808183a:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808183c:	2100      	movs	r1, #0
 808183e:	7c00      	ldrb	r0, [r0, #16]
 8081840:	f7ff fa26 	bl	8080c90 <HAL_I2C_Release>
}
 8081844:	fab0 f080 	clz	r0, r0
 8081848:	0940      	lsrs	r0, r0, #5
 808184a:	bd08      	pop	{r3, pc}

0808184c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808184c:	4700      	bx	r0
	...

08081850 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081850:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8081852:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8081856:	4605      	mov	r5, r0
 8081858:	460f      	mov	r7, r1
 808185a:	4690      	mov	r8, r2
 808185c:	461e      	mov	r6, r3
 808185e:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081862:	d019      	beq.n	8081898 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 8081864:	f7ff f9a4 	bl	8080bb0 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8081868:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808186a:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808186e:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8081870:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8081874:	bfa2      	ittt	ge
 8081876:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 808187a:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 808187c:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8081880:	4628      	mov	r0, r5
 8081882:	9400      	str	r4, [sp, #0]
 8081884:	4643      	mov	r3, r8
 8081886:	463a      	mov	r2, r7
 8081888:	4905      	ldr	r1, [pc, #20]	; (80818a0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808188a:	bfa8      	it	ge
 808188c:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8081890:	f7ff f986 	bl	8080ba0 <HAL_Interrupts_Attach>
    return true;
 8081894:	2001      	movs	r0, #1
 8081896:	e000      	b.n	808189a <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081898:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 808189a:	b004      	add	sp, #16
 808189c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80818a0:	0808184d 	.word	0x0808184d

080818a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80818a4:	4770      	bx	lr

080818a6 <_ZN9IPAddressD0Ev>:
 80818a6:	b510      	push	{r4, lr}
 80818a8:	4604      	mov	r4, r0
 80818aa:	f7fe fbf8 	bl	808009e <_ZdlPv>
 80818ae:	4620      	mov	r0, r4
 80818b0:	bd10      	pop	{r4, pc}

080818b2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80818b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80818b4:	460f      	mov	r7, r1
 80818b6:	f100 0608 	add.w	r6, r0, #8
 80818ba:	1d05      	adds	r5, r0, #4
 80818bc:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80818be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80818c2:	220a      	movs	r2, #10
 80818c4:	4638      	mov	r0, r7
 80818c6:	f000 f910 	bl	8081aea <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80818ca:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80818cc:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80818ce:	d007      	beq.n	80818e0 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80818d0:	2c00      	cmp	r4, #0
 80818d2:	d0f4      	beq.n	80818be <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80818d4:	212e      	movs	r1, #46	; 0x2e
 80818d6:	4638      	mov	r0, r7
 80818d8:	f000 f8c4 	bl	8081a64 <_ZN5Print5printEc>
 80818dc:	4404      	add	r4, r0
 80818de:	e7ee      	b.n	80818be <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80818e0:	4620      	mov	r0, r4
 80818e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080818e4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80818e4:	4a02      	ldr	r2, [pc, #8]	; (80818f0 <_ZN9IPAddressC1Ev+0xc>)
 80818e6:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80818e8:	2200      	movs	r2, #0
 80818ea:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80818ec:	4770      	bx	lr
 80818ee:	bf00      	nop
 80818f0:	080836ec 	.word	0x080836ec

080818f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80818f4:	4a02      	ldr	r2, [pc, #8]	; (8081900 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80818f6:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80818f8:	680a      	ldr	r2, [r1, #0]
 80818fa:	6042      	str	r2, [r0, #4]
}
 80818fc:	4770      	bx	lr
 80818fe:	bf00      	nop
 8081900:	080836ec 	.word	0x080836ec

08081904 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081904:	4a01      	ldr	r2, [pc, #4]	; (808190c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8081906:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081908:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808190a:	4770      	bx	lr
 808190c:	080836ec 	.word	0x080836ec

08081910 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8081910:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8081912:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081916:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808191a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808191e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8081922:	6041      	str	r1, [r0, #4]
 8081924:	bd10      	pop	{r4, pc}
	...

08081928 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808192a:	4d04      	ldr	r5, [pc, #16]	; (808193c <_ZN9IPAddressC1Ehhhh+0x14>)
 808192c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808192e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8081932:	9500      	str	r5, [sp, #0]
 8081934:	f7ff ffec 	bl	8081910 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081938:	b003      	add	sp, #12
 808193a:	bd30      	pop	{r4, r5, pc}
 808193c:	080836ec 	.word	0x080836ec

08081940 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8081940:	4a01      	ldr	r2, [pc, #4]	; (8081948 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8081942:	4b02      	ldr	r3, [pc, #8]	; (808194c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081944:	601a      	str	r2, [r3, #0]
 8081946:	4770      	bx	lr
 8081948:	080837ae 	.word	0x080837ae
 808194c:	20000500 	.word	0x20000500

08081950 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081950:	2300      	movs	r3, #0
 8081952:	461a      	mov	r2, r3
 8081954:	6840      	ldr	r0, [r0, #4]
 8081956:	f7ff baaf 	b.w	8080eb8 <network_connect>

0808195a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808195a:	2200      	movs	r2, #0
 808195c:	2102      	movs	r1, #2
 808195e:	6840      	ldr	r0, [r0, #4]
 8081960:	f7ff baba 	b.w	8080ed8 <network_disconnect>

08081964 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081964:	2200      	movs	r2, #0
 8081966:	4611      	mov	r1, r2
 8081968:	6840      	ldr	r0, [r0, #4]
 808196a:	f7ff baad 	b.w	8080ec8 <network_connecting>

0808196e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808196e:	2200      	movs	r2, #0
 8081970:	4611      	mov	r1, r2
 8081972:	6840      	ldr	r0, [r0, #4]
 8081974:	f7ff bab8 	b.w	8080ee8 <network_ready>

08081978 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081978:	2300      	movs	r3, #0
 808197a:	461a      	mov	r2, r3
 808197c:	4619      	mov	r1, r3
 808197e:	6840      	ldr	r0, [r0, #4]
 8081980:	f7ff baba 	b.w	8080ef8 <network_on>

08081984 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081984:	2300      	movs	r3, #0
 8081986:	461a      	mov	r2, r3
 8081988:	4619      	mov	r1, r3
 808198a:	6840      	ldr	r0, [r0, #4]
 808198c:	f7ff babc 	b.w	8080f08 <network_off>

08081990 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8081990:	2200      	movs	r2, #0
 8081992:	f081 0101 	eor.w	r1, r1, #1
 8081996:	6840      	ldr	r0, [r0, #4]
 8081998:	f7ff babe 	b.w	8080f18 <network_listen>

0808199c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808199c:	2200      	movs	r2, #0
 808199e:	6840      	ldr	r0, [r0, #4]
 80819a0:	f7ff baca 	b.w	8080f38 <network_set_listen_timeout>

080819a4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80819a4:	2200      	movs	r2, #0
 80819a6:	4611      	mov	r1, r2
 80819a8:	6840      	ldr	r0, [r0, #4]
 80819aa:	f7ff bacd 	b.w	8080f48 <network_get_listen_timeout>

080819ae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80819ae:	2200      	movs	r2, #0
 80819b0:	4611      	mov	r1, r2
 80819b2:	6840      	ldr	r0, [r0, #4]
 80819b4:	f7ff bab8 	b.w	8080f28 <network_listening>

080819b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80819b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80819ba:	4617      	mov	r7, r2
 80819bc:	b087      	sub	sp, #28
 80819be:	4605      	mov	r5, r0
    IPAddress addr;
 80819c0:	a804      	add	r0, sp, #16
 80819c2:	f7ff ff8f 	bl	80818e4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80819c6:	2600      	movs	r6, #0
 80819c8:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80819ca:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80819cc:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80819d0:	f001 fcdf 	bl	8083392 <strlen>
 80819d4:	4b0a      	ldr	r3, [pc, #40]	; (8081a00 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80819d6:	9600      	str	r6, [sp, #0]
 80819d8:	b281      	uxth	r1, r0
 80819da:	685b      	ldr	r3, [r3, #4]
 80819dc:	4622      	mov	r2, r4
 80819de:	4638      	mov	r0, r7
 80819e0:	f7ff f876 	bl	8080ad0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80819e4:	b120      	cbz	r0, 80819f0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80819e6:	4631      	mov	r1, r6
 80819e8:	4628      	mov	r0, r5
 80819ea:	f7ff ff8b 	bl	8081904 <_ZN9IPAddressC1Em>
 80819ee:	e003      	b.n	80819f8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80819f0:	4621      	mov	r1, r4
 80819f2:	4628      	mov	r0, r5
 80819f4:	f7ff ff7e 	bl	80818f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80819f8:	4628      	mov	r0, r5
 80819fa:	b007      	add	sp, #28
 80819fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80819fe:	bf00      	nop
 8081a00:	200004a4 	.word	0x200004a4

08081a04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081a04:	4b02      	ldr	r3, [pc, #8]	; (8081a10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081a06:	4a03      	ldr	r2, [pc, #12]	; (8081a14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081a08:	601a      	str	r2, [r3, #0]
 8081a0a:	2200      	movs	r2, #0
 8081a0c:	605a      	str	r2, [r3, #4]
 8081a0e:	4770      	bx	lr
 8081a10:	20000504 	.word	0x20000504
 8081a14:	080837e0 	.word	0x080837e0

08081a18 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8081a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081a1a:	4606      	mov	r6, r0
 8081a1c:	460d      	mov	r5, r1
 8081a1e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8081a20:	2400      	movs	r4, #0
  while (size--) {
 8081a22:	42bd      	cmp	r5, r7
 8081a24:	d00c      	beq.n	8081a40 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8081a26:	6833      	ldr	r3, [r6, #0]
 8081a28:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081a2c:	689b      	ldr	r3, [r3, #8]
 8081a2e:	4630      	mov	r0, r6
 8081a30:	4798      	blx	r3
     if (chunk>=0)
 8081a32:	2800      	cmp	r0, #0
 8081a34:	db01      	blt.n	8081a3a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8081a36:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8081a38:	e7f3      	b.n	8081a22 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8081a3a:	2c00      	cmp	r4, #0
 8081a3c:	bf08      	it	eq
 8081a3e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8081a40:	4620      	mov	r0, r4
 8081a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081a44 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081a44:	b570      	push	{r4, r5, r6, lr}
 8081a46:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081a48:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081a4a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081a4c:	b149      	cbz	r1, 8081a62 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081a4e:	f001 fca0 	bl	8083392 <strlen>
 8081a52:	682b      	ldr	r3, [r5, #0]
 8081a54:	4602      	mov	r2, r0
 8081a56:	4621      	mov	r1, r4
 8081a58:	4628      	mov	r0, r5
    }
 8081a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081a5e:	68db      	ldr	r3, [r3, #12]
 8081a60:	4718      	bx	r3
    }
 8081a62:	bd70      	pop	{r4, r5, r6, pc}

08081a64 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081a64:	6803      	ldr	r3, [r0, #0]
 8081a66:	689b      	ldr	r3, [r3, #8]
 8081a68:	4718      	bx	r3

08081a6a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081a6a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8081a6c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081a6e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8081a70:	f7ff fff8 	bl	8081a64 <_ZN5Print5printEc>
  n += print('\n');
 8081a74:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8081a76:	4604      	mov	r4, r0
  n += print('\n');
 8081a78:	4628      	mov	r0, r5
 8081a7a:	f7ff fff3 	bl	8081a64 <_ZN5Print5printEc>
  return n;
}
 8081a7e:	4420      	add	r0, r4
 8081a80:	bd38      	pop	{r3, r4, r5, pc}

08081a82 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8081a82:	b538      	push	{r3, r4, r5, lr}
 8081a84:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081a86:	f7ff ffdd 	bl	8081a44 <_ZN5Print5writeEPKc>
 8081a8a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8081a8c:	4628      	mov	r0, r5
 8081a8e:	f7ff ffec 	bl	8081a6a <_ZN5Print7printlnEv>
  return n;
}
 8081a92:	4420      	add	r0, r4
 8081a94:	bd38      	pop	{r3, r4, r5, pc}

08081a96 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081a96:	2a01      	cmp	r2, #1
 8081a98:	bf98      	it	ls
 8081a9a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081a9c:	b530      	push	{r4, r5, lr}
 8081a9e:	460b      	mov	r3, r1
 8081aa0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8081aa2:	2100      	movs	r1, #0
 8081aa4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8081aa8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8081aac:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8081ab0:	fb05 3312 	mls	r3, r5, r2, r3
 8081ab4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081ab6:	2b09      	cmp	r3, #9
 8081ab8:	bf94      	ite	ls
 8081aba:	3330      	addls	r3, #48	; 0x30
 8081abc:	3337      	addhi	r3, #55	; 0x37
 8081abe:	b2db      	uxtb	r3, r3
 8081ac0:	4621      	mov	r1, r4
 8081ac2:	f804 3901 	strb.w	r3, [r4], #-1
 8081ac6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8081ac8:	2d00      	cmp	r5, #0
 8081aca:	d1ef      	bne.n	8081aac <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8081acc:	f7ff ffba 	bl	8081a44 <_ZN5Print5writeEPKc>
}
 8081ad0:	b00b      	add	sp, #44	; 0x2c
 8081ad2:	bd30      	pop	{r4, r5, pc}

08081ad4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8081ad4:	b410      	push	{r4}
  if (base == 0) return write(n);
 8081ad6:	b922      	cbnz	r2, 8081ae2 <_ZN5Print5printEmi+0xe>
 8081ad8:	6803      	ldr	r3, [r0, #0]
 8081ada:	b2c9      	uxtb	r1, r1
 8081adc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8081ade:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8081ae0:	4718      	bx	r3
  else return printNumber(n, base);
 8081ae2:	b2d2      	uxtb	r2, r2
}
 8081ae4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081ae6:	f7ff bfd6 	b.w	8081a96 <_ZN5Print11printNumberEmh>

08081aea <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8081aea:	f7ff bff3 	b.w	8081ad4 <_ZN5Print5printEmi>

08081aee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081aee:	b510      	push	{r4, lr}
 8081af0:	4604      	mov	r4, r0
 8081af2:	f7ff fafb 	bl	80810ec <_ZNSt14_Function_baseD1Ev>
 8081af6:	4620      	mov	r0, r4
 8081af8:	bd10      	pop	{r4, pc}
	...

08081afc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081afc:	4803      	ldr	r0, [pc, #12]	; (8081b0c <_GLOBAL__sub_I_RGB+0x10>)
 8081afe:	2300      	movs	r3, #0
 8081b00:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081b02:	4a03      	ldr	r2, [pc, #12]	; (8081b10 <_GLOBAL__sub_I_RGB+0x14>)
 8081b04:	4903      	ldr	r1, [pc, #12]	; (8081b14 <_GLOBAL__sub_I_RGB+0x18>)
 8081b06:	f000 bbbf 	b.w	8082288 <__aeabi_atexit>
 8081b0a:	bf00      	nop
 8081b0c:	2000050c 	.word	0x2000050c
 8081b10:	2000046c 	.word	0x2000046c
 8081b14:	08081aef 	.word	0x08081aef

08081b18 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081b18:	4770      	bx	lr

08081b1a <_ZN8SPIClassD0Ev>:
 8081b1a:	b510      	push	{r4, lr}
 8081b1c:	4604      	mov	r4, r0
 8081b1e:	f7fe fabe 	bl	808009e <_ZdlPv>
 8081b22:	4620      	mov	r0, r4
 8081b24:	bd10      	pop	{r4, pc}
	...

08081b28 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081b28:	b570      	push	{r4, r5, r6, lr}
 8081b2a:	4604      	mov	r4, r0
 8081b2c:	460e      	mov	r6, r1
 8081b2e:	4b07      	ldr	r3, [pc, #28]	; (8081b4c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8081b30:	2500      	movs	r5, #0
 8081b32:	6003      	str	r3, [r0, #0]
 8081b34:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081b38:	f7fe ffd2 	bl	8080ae0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081b3c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8081b3e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8081b40:	f7ff f8ae 	bl	8080ca0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081b44:	60a5      	str	r5, [r4, #8]
}
 8081b46:	4620      	mov	r0, r4
 8081b48:	bd70      	pop	{r4, r5, r6, pc}
 8081b4a:	bf00      	nop
 8081b4c:	08083814 	.word	0x08083814

08081b50 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8081b50:	7900      	ldrb	r0, [r0, #4]
 8081b52:	f7ff b8ad 	b.w	8080cb0 <HAL_SPI_Is_Enabled>

08081b56 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8081b56:	b510      	push	{r4, lr}
 8081b58:	4604      	mov	r4, r0
{
	free(buffer);
 8081b5a:	6800      	ldr	r0, [r0, #0]
 8081b5c:	f7ff fa04 	bl	8080f68 <free>
}
 8081b60:	4620      	mov	r0, r4
 8081b62:	bd10      	pop	{r4, pc}

08081b64 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8081b64:	b510      	push	{r4, lr}
 8081b66:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8081b68:	6800      	ldr	r0, [r0, #0]
 8081b6a:	b108      	cbz	r0, 8081b70 <_ZN6String10invalidateEv+0xc>
 8081b6c:	f7ff f9fc 	bl	8080f68 <free>
	buffer = NULL;
 8081b70:	2300      	movs	r3, #0
 8081b72:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8081b74:	60a3      	str	r3, [r4, #8]
 8081b76:	6063      	str	r3, [r4, #4]
 8081b78:	bd10      	pop	{r4, pc}

08081b7a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8081b7a:	b538      	push	{r3, r4, r5, lr}
 8081b7c:	4604      	mov	r4, r0
 8081b7e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8081b80:	6800      	ldr	r0, [r0, #0]
 8081b82:	3101      	adds	r1, #1
 8081b84:	f7ff f9f8 	bl	8080f78 <realloc>
	if (newbuffer) {
 8081b88:	b110      	cbz	r0, 8081b90 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8081b8a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8081b8e:	2001      	movs	r0, #1
	}
	return 0;
}
 8081b90:	bd38      	pop	{r3, r4, r5, pc}

08081b92 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081b92:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8081b94:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081b96:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8081b98:	b113      	cbz	r3, 8081ba0 <_ZN6String7reserveEj+0xe>
 8081b9a:	6843      	ldr	r3, [r0, #4]
 8081b9c:	428b      	cmp	r3, r1
 8081b9e:	d207      	bcs.n	8081bb0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8081ba0:	4620      	mov	r0, r4
 8081ba2:	f7ff ffea 	bl	8081b7a <_ZN6String12changeBufferEj>
 8081ba6:	b120      	cbz	r0, 8081bb2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8081ba8:	68a3      	ldr	r3, [r4, #8]
 8081baa:	b90b      	cbnz	r3, 8081bb0 <_ZN6String7reserveEj+0x1e>
 8081bac:	6822      	ldr	r2, [r4, #0]
 8081bae:	7013      	strb	r3, [r2, #0]
 8081bb0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8081bb2:	bd10      	pop	{r4, pc}

08081bb4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081bb4:	b570      	push	{r4, r5, r6, lr}
 8081bb6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8081bb8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081bba:	4604      	mov	r4, r0
 8081bbc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8081bbe:	f7ff ffe8 	bl	8081b92 <_ZN6String7reserveEj>
 8081bc2:	b918      	cbnz	r0, 8081bcc <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8081bc4:	4620      	mov	r0, r4
 8081bc6:	f7ff ffcd 	bl	8081b64 <_ZN6String10invalidateEv>
		return *this;
 8081bca:	e009      	b.n	8081be0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8081bcc:	462a      	mov	r2, r5
 8081bce:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8081bd0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8081bd2:	6820      	ldr	r0, [r4, #0]
 8081bd4:	f001 fb7c 	bl	80832d0 <memcpy>
	buffer[len] = 0;
 8081bd8:	6822      	ldr	r2, [r4, #0]
 8081bda:	68a3      	ldr	r3, [r4, #8]
 8081bdc:	2100      	movs	r1, #0
 8081bde:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8081be0:	4620      	mov	r0, r4
 8081be2:	bd70      	pop	{r4, r5, r6, pc}

08081be4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081be4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081be6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081be8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081bea:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081bec:	6043      	str	r3, [r0, #4]
	len = 0;
 8081bee:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081bf0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8081bf2:	460d      	mov	r5, r1
 8081bf4:	b139      	cbz	r1, 8081c06 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081bf6:	4608      	mov	r0, r1
 8081bf8:	f001 fbcb 	bl	8083392 <strlen>
 8081bfc:	4629      	mov	r1, r5
 8081bfe:	4602      	mov	r2, r0
 8081c00:	4620      	mov	r0, r4
 8081c02:	f7ff ffd7 	bl	8081bb4 <_ZN6String4copyEPKcj>
}
 8081c06:	4620      	mov	r0, r4
 8081c08:	bd38      	pop	{r3, r4, r5, pc}

08081c0a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8081c0a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8081c0c:	b510      	push	{r4, lr}
 8081c0e:	460b      	mov	r3, r1
 8081c10:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8081c12:	d007      	beq.n	8081c24 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8081c14:	6809      	ldr	r1, [r1, #0]
 8081c16:	b119      	cbz	r1, 8081c20 <_ZN6StringaSERKS_+0x16>
 8081c18:	689a      	ldr	r2, [r3, #8]
 8081c1a:	f7ff ffcb 	bl	8081bb4 <_ZN6String4copyEPKcj>
 8081c1e:	e001      	b.n	8081c24 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8081c20:	f7ff ffa0 	bl	8081b64 <_ZN6String10invalidateEv>

	return *this;
}
 8081c24:	4620      	mov	r0, r4
 8081c26:	bd10      	pop	{r4, pc}

08081c28 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8081c28:	b510      	push	{r4, lr}
 8081c2a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081c2c:	2300      	movs	r3, #0
 8081c2e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081c30:	6043      	str	r3, [r0, #4]
	len = 0;
 8081c32:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081c34:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8081c36:	f7ff ffe8 	bl	8081c0a <_ZN6StringaSERKS_>
}
 8081c3a:	4620      	mov	r0, r4
 8081c3c:	bd10      	pop	{r4, pc}

08081c3e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8081c3e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8081c40:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8081c42:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8081c44:	b912      	cbnz	r2, 8081c4c <_ZNK6String6equalsEPKc+0xe>
 8081c46:	b919      	cbnz	r1, 8081c50 <_ZNK6String6equalsEPKc+0x12>
 8081c48:	2001      	movs	r0, #1
 8081c4a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8081c4c:	b911      	cbnz	r1, 8081c54 <_ZNK6String6equalsEPKc+0x16>
 8081c4e:	6803      	ldr	r3, [r0, #0]
 8081c50:	7818      	ldrb	r0, [r3, #0]
 8081c52:	e002      	b.n	8081c5a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8081c54:	6800      	ldr	r0, [r0, #0]
 8081c56:	f001 fb77 	bl	8083348 <strcmp>
 8081c5a:	fab0 f080 	clz	r0, r0
 8081c5e:	0940      	lsrs	r0, r0, #5
}
 8081c60:	bd08      	pop	{r3, pc}
	...

08081c64 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081c68:	4b03      	ldr	r3, [pc, #12]	; (8081c78 <_GLOBAL__sub_I_System+0x14>)
 8081c6a:	2000      	movs	r0, #0
 8081c6c:	7018      	strb	r0, [r3, #0]
 8081c6e:	8058      	strh	r0, [r3, #2]
 8081c70:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081c72:	f7ff b89d 	b.w	8080db0 <set_system_mode>
 8081c76:	bf00      	nop
 8081c78:	2000051c 	.word	0x2000051c

08081c7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8081c7c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8081c7e:	2000      	movs	r0, #0
 8081c80:	f7ff f90a 	bl	8080e98 <spark_sync_time_pending>
 8081c84:	b128      	cbz	r0, 8081c92 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081c86:	f7ff f8f7 	bl	8080e78 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8081c8a:	f080 0001 	eor.w	r0, r0, #1
 8081c8e:	b2c0      	uxtb	r0, r0
 8081c90:	bd08      	pop	{r3, pc}
 8081c92:	2001      	movs	r0, #1
    }
 8081c94:	bd08      	pop	{r3, pc}

08081c96 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8081c96:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8081c98:	2000      	movs	r0, #0
 8081c9a:	f7fe ff41 	bl	8080b20 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8081c9e:	4604      	mov	r4, r0
 8081ca0:	b968      	cbnz	r0, 8081cbe <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8081ca2:	f7ff f87d 	bl	8080da0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8081ca6:	2801      	cmp	r0, #1
 8081ca8:	d10b      	bne.n	8081cc2 <_ZN9TimeClass7isValidEv+0x2c>
 8081caa:	4620      	mov	r0, r4
 8081cac:	f7ff f8a8 	bl	8080e00 <system_thread_get_state>
 8081cb0:	b938      	cbnz	r0, 8081cc2 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8081cb2:	f7ff ffe3 	bl	8081c7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8081cb6:	b930      	cbnz	r0, 8081cc6 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8081cb8:	f7ff f8ce 	bl	8080e58 <spark_process>
 8081cbc:	e7f9      	b.n	8081cb2 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8081cbe:	2001      	movs	r0, #1
 8081cc0:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8081cc2:	2000      	movs	r0, #0
 8081cc4:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8081cc6:	f7ff ffd9 	bl	8081c7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8081cca:	2000      	movs	r0, #0
 8081ccc:	f7fe ff28 	bl	8080b20 <HAL_RTC_Time_Is_Valid>
 8081cd0:	3000      	adds	r0, #0
 8081cd2:	bf18      	it	ne
 8081cd4:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8081cd6:	bd10      	pop	{r4, pc}

08081cd8 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8081cd8:	b508      	push	{r3, lr}
    (void)isValid();
 8081cda:	f7ff ffdc 	bl	8081c96 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8081cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8081ce2:	f7fe bf15 	b.w	8080b10 <HAL_RTC_Get_UnixTime>
	...

08081ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081ce8:	4b02      	ldr	r3, [pc, #8]	; (8081cf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081cea:	681a      	ldr	r2, [r3, #0]
 8081cec:	4b02      	ldr	r3, [pc, #8]	; (8081cf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081cee:	601a      	str	r2, [r3, #0]
 8081cf0:	4770      	bx	lr
 8081cf2:	bf00      	nop
 8081cf4:	20000404 	.word	0x20000404
 8081cf8:	20000524 	.word	0x20000524

08081cfc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8081cfc:	4770      	bx	lr

08081cfe <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081cfe:	7441      	strb	r1, [r0, #17]
 8081d00:	4770      	bx	lr

08081d02 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8081d02:	7c00      	ldrb	r0, [r0, #16]
 8081d04:	f7ff b814 	b.w	8080d30 <HAL_USART_Available_Data_For_Write>

08081d08 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8081d08:	7c00      	ldrb	r0, [r0, #16]
 8081d0a:	f7fe bfe9 	b.w	8080ce0 <HAL_USART_Available_Data>

08081d0e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8081d0e:	7c00      	ldrb	r0, [r0, #16]
 8081d10:	f7fe bff6 	b.w	8080d00 <HAL_USART_Peek_Data>

08081d14 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8081d14:	7c00      	ldrb	r0, [r0, #16]
 8081d16:	f7fe bfeb 	b.w	8080cf0 <HAL_USART_Read_Data>

08081d1a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8081d1a:	7c00      	ldrb	r0, [r0, #16]
 8081d1c:	f7fe bff8 	b.w	8080d10 <HAL_USART_Flush_Data>

08081d20 <_ZN11USARTSerialD0Ev>:
 8081d20:	b510      	push	{r4, lr}
 8081d22:	4604      	mov	r4, r0
 8081d24:	f7fe f9bb 	bl	808009e <_ZdlPv>
 8081d28:	4620      	mov	r0, r4
 8081d2a:	bd10      	pop	{r4, pc}

08081d2c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8081d2c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081d2e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8081d30:	4604      	mov	r4, r0
 8081d32:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081d34:	b925      	cbnz	r5, 8081d40 <_ZN11USARTSerial5writeEh+0x14>
 8081d36:	7c00      	ldrb	r0, [r0, #16]
 8081d38:	f7fe fffa 	bl	8080d30 <HAL_USART_Available_Data_For_Write>
 8081d3c:	2800      	cmp	r0, #0
 8081d3e:	dd05      	ble.n	8081d4c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081d40:	4631      	mov	r1, r6
 8081d42:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081d48:	f7fe bfc2 	b.w	8080cd0 <HAL_USART_Write_Data>
  }
  return 0;
}
 8081d4c:	4628      	mov	r0, r5
 8081d4e:	bd70      	pop	{r4, r5, r6, pc}

08081d50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081d50:	b510      	push	{r4, lr}
 8081d52:	4604      	mov	r4, r0
 8081d54:	4608      	mov	r0, r1
 8081d56:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081d58:	2200      	movs	r2, #0
 8081d5a:	6062      	str	r2, [r4, #4]
 8081d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081d60:	60a2      	str	r2, [r4, #8]
 8081d62:	4a05      	ldr	r2, [pc, #20]	; (8081d78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8081d64:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081d66:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8081d68:	2201      	movs	r2, #1
 8081d6a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8081d6c:	461a      	mov	r2, r3
 8081d6e:	f7fe ffa7 	bl	8080cc0 <HAL_USART_Init>
}
 8081d72:	4620      	mov	r0, r4
 8081d74:	bd10      	pop	{r4, pc}
 8081d76:	bf00      	nop
 8081d78:	08083850 	.word	0x08083850

08081d7c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8081d7c:	7c00      	ldrb	r0, [r0, #16]
 8081d7e:	f7fe bfcf 	b.w	8080d20 <HAL_USART_Is_Enabled>
	...

08081d84 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081d84:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8081d86:	4d0c      	ldr	r5, [pc, #48]	; (8081db8 <_Z22__fetch_global_Serial1v+0x34>)
 8081d88:	6829      	ldr	r1, [r5, #0]
 8081d8a:	f011 0401 	ands.w	r4, r1, #1
 8081d8e:	d111      	bne.n	8081db4 <_Z22__fetch_global_Serial1v+0x30>
 8081d90:	4628      	mov	r0, r5
 8081d92:	f7fe f986 	bl	80800a2 <__cxa_guard_acquire>
 8081d96:	b168      	cbz	r0, 8081db4 <_Z22__fetch_global_Serial1v+0x30>
 8081d98:	4a08      	ldr	r2, [pc, #32]	; (8081dbc <_Z22__fetch_global_Serial1v+0x38>)
 8081d9a:	4621      	mov	r1, r4
 8081d9c:	4b08      	ldr	r3, [pc, #32]	; (8081dc0 <_Z22__fetch_global_Serial1v+0x3c>)
 8081d9e:	4809      	ldr	r0, [pc, #36]	; (8081dc4 <_Z22__fetch_global_Serial1v+0x40>)
 8081da0:	f7ff ffd6 	bl	8081d50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8081da4:	4628      	mov	r0, r5
 8081da6:	f7fe f981 	bl	80800ac <__cxa_guard_release>
 8081daa:	4a07      	ldr	r2, [pc, #28]	; (8081dc8 <_Z22__fetch_global_Serial1v+0x44>)
 8081dac:	4907      	ldr	r1, [pc, #28]	; (8081dcc <_Z22__fetch_global_Serial1v+0x48>)
 8081dae:	4805      	ldr	r0, [pc, #20]	; (8081dc4 <_Z22__fetch_global_Serial1v+0x40>)
 8081db0:	f000 fa6a 	bl	8082288 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081db4:	4803      	ldr	r0, [pc, #12]	; (8081dc4 <_Z22__fetch_global_Serial1v+0x40>)
 8081db6:	bd38      	pop	{r3, r4, r5, pc}
 8081db8:	200005c0 	.word	0x200005c0
 8081dbc:	200005c4 	.word	0x200005c4
 8081dc0:	2000053c 	.word	0x2000053c
 8081dc4:	20000528 	.word	0x20000528
 8081dc8:	2000046c 	.word	0x2000046c
 8081dcc:	08081cfd 	.word	0x08081cfd

08081dd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081dd0:	7441      	strb	r1, [r0, #17]
 8081dd2:	4770      	bx	lr

08081dd4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081dd4:	4770      	bx	lr

08081dd6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8081dd6:	2100      	movs	r1, #0
 8081dd8:	7c00      	ldrb	r0, [r0, #16]
 8081dda:	f7fe bfc9 	b.w	8080d70 <HAL_USB_USART_Receive_Data>

08081dde <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8081dde:	2101      	movs	r1, #1
 8081de0:	7c00      	ldrb	r0, [r0, #16]
 8081de2:	f7fe bfc5 	b.w	8080d70 <HAL_USB_USART_Receive_Data>

08081de6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8081de6:	7c00      	ldrb	r0, [r0, #16]
 8081de8:	f7fe bfba 	b.w	8080d60 <HAL_USB_USART_Available_Data_For_Write>

08081dec <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8081dec:	7c00      	ldrb	r0, [r0, #16]
 8081dee:	f7fe bfaf 	b.w	8080d50 <HAL_USB_USART_Available_Data>

08081df2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8081df2:	b538      	push	{r3, r4, r5, lr}
 8081df4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081df6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8081df8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081dfa:	f7fe ffb1 	bl	8080d60 <HAL_USB_USART_Available_Data_For_Write>
 8081dfe:	2800      	cmp	r0, #0
 8081e00:	dc01      	bgt.n	8081e06 <_ZN9USBSerial5writeEh+0x14>
 8081e02:	7c60      	ldrb	r0, [r4, #17]
 8081e04:	b120      	cbz	r0, 8081e10 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8081e06:	4629      	mov	r1, r5
 8081e08:	7c20      	ldrb	r0, [r4, #16]
 8081e0a:	f7fe ffb9 	bl	8080d80 <HAL_USB_USART_Send_Data>
    return 1;
 8081e0e:	2001      	movs	r0, #1
  }
  return 0;
}
 8081e10:	bd38      	pop	{r3, r4, r5, pc}

08081e12 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081e12:	7c00      	ldrb	r0, [r0, #16]
 8081e14:	f7fe bfbc 	b.w	8080d90 <HAL_USB_USART_Flush_Data>

08081e18 <_ZN9USBSerialD0Ev>:
 8081e18:	b510      	push	{r4, lr}
 8081e1a:	4604      	mov	r4, r0
 8081e1c:	f7fe f93f 	bl	808009e <_ZdlPv>
 8081e20:	4620      	mov	r0, r4
 8081e22:	bd10      	pop	{r4, pc}

08081e24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081e24:	b510      	push	{r4, lr}
 8081e26:	4604      	mov	r4, r0
 8081e28:	2300      	movs	r3, #0
 8081e2a:	6063      	str	r3, [r4, #4]
 8081e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081e30:	60a3      	str	r3, [r4, #8]
 8081e32:	4b05      	ldr	r3, [pc, #20]	; (8081e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081e34:	4608      	mov	r0, r1
 8081e36:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8081e38:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8081e3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081e3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081e3e:	4611      	mov	r1, r2
 8081e40:	f7fe ff7e 	bl	8080d40 <HAL_USB_USART_Init>
}
 8081e44:	4620      	mov	r0, r4
 8081e46:	bd10      	pop	{r4, pc}
 8081e48:	08083880 	.word	0x08083880

08081e4c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081e4c:	b510      	push	{r4, lr}
 8081e4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081e50:	2214      	movs	r2, #20
 8081e52:	2100      	movs	r1, #0
 8081e54:	f001 fa47 	bl	80832e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081e58:	4b05      	ldr	r3, [pc, #20]	; (8081e70 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081e5a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081e5c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081e5e:	4b05      	ldr	r3, [pc, #20]	; (8081e74 <_Z19acquireSerialBufferv+0x28>)
 8081e60:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081e62:	f240 1301 	movw	r3, #257	; 0x101
 8081e66:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081e68:	2381      	movs	r3, #129	; 0x81
 8081e6a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081e6c:	bd10      	pop	{r4, pc}
 8081e6e:	bf00      	nop
 8081e70:	200006cd 	.word	0x200006cd
 8081e74:	2000064c 	.word	0x2000064c

08081e78 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081e78:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081e7a:	4d0e      	ldr	r5, [pc, #56]	; (8081eb4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081e7c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081e7e:	a801      	add	r0, sp, #4
 8081e80:	f7ff ffe4 	bl	8081e4c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081e84:	6829      	ldr	r1, [r5, #0]
 8081e86:	f011 0401 	ands.w	r4, r1, #1
 8081e8a:	d110      	bne.n	8081eae <_Z16_fetch_usbserialv+0x36>
 8081e8c:	4628      	mov	r0, r5
 8081e8e:	f7fe f908 	bl	80800a2 <__cxa_guard_acquire>
 8081e92:	b160      	cbz	r0, 8081eae <_Z16_fetch_usbserialv+0x36>
 8081e94:	aa01      	add	r2, sp, #4
 8081e96:	4621      	mov	r1, r4
 8081e98:	4807      	ldr	r0, [pc, #28]	; (8081eb8 <_Z16_fetch_usbserialv+0x40>)
 8081e9a:	f7ff ffc3 	bl	8081e24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081e9e:	4628      	mov	r0, r5
 8081ea0:	f7fe f904 	bl	80800ac <__cxa_guard_release>
 8081ea4:	4a05      	ldr	r2, [pc, #20]	; (8081ebc <_Z16_fetch_usbserialv+0x44>)
 8081ea6:	4906      	ldr	r1, [pc, #24]	; (8081ec0 <_Z16_fetch_usbserialv+0x48>)
 8081ea8:	4803      	ldr	r0, [pc, #12]	; (8081eb8 <_Z16_fetch_usbserialv+0x40>)
 8081eaa:	f000 f9ed 	bl	8082288 <__aeabi_atexit>
	return _usbserial;
}
 8081eae:	4802      	ldr	r0, [pc, #8]	; (8081eb8 <_Z16_fetch_usbserialv+0x40>)
 8081eb0:	b007      	add	sp, #28
 8081eb2:	bd30      	pop	{r4, r5, pc}
 8081eb4:	20000648 	.word	0x20000648
 8081eb8:	200007d0 	.word	0x200007d0
 8081ebc:	2000046c 	.word	0x2000046c
 8081ec0:	08081dd5 	.word	0x08081dd5

08081ec4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081ec4:	b510      	push	{r4, lr}
 8081ec6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081ec8:	2214      	movs	r2, #20
 8081eca:	2100      	movs	r1, #0
 8081ecc:	f001 fa0b 	bl	80832e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081ed0:	4b05      	ldr	r3, [pc, #20]	; (8081ee8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081ed2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081ed4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081ed6:	4b05      	ldr	r3, [pc, #20]	; (8081eec <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081ed8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081eda:	f240 1301 	movw	r3, #257	; 0x101
 8081ede:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081ee0:	2381      	movs	r3, #129	; 0x81
 8081ee2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081ee4:	bd10      	pop	{r4, pc}
 8081ee6:	bf00      	nop
 8081ee8:	20000880 	.word	0x20000880
 8081eec:	200007e8 	.word	0x200007e8

08081ef0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081ef0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081ef2:	4c0e      	ldr	r4, [pc, #56]	; (8081f2c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081ef4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081ef6:	a801      	add	r0, sp, #4
 8081ef8:	f7ff ffe4 	bl	8081ec4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081efc:	6823      	ldr	r3, [r4, #0]
 8081efe:	07db      	lsls	r3, r3, #31
 8081f00:	d410      	bmi.n	8081f24 <_Z17_fetch_usbserial1v+0x34>
 8081f02:	4620      	mov	r0, r4
 8081f04:	f7fe f8cd 	bl	80800a2 <__cxa_guard_acquire>
 8081f08:	b160      	cbz	r0, 8081f24 <_Z17_fetch_usbserial1v+0x34>
 8081f0a:	aa01      	add	r2, sp, #4
 8081f0c:	2101      	movs	r1, #1
 8081f0e:	4808      	ldr	r0, [pc, #32]	; (8081f30 <_Z17_fetch_usbserial1v+0x40>)
 8081f10:	f7ff ff88 	bl	8081e24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081f14:	4620      	mov	r0, r4
 8081f16:	f7fe f8c9 	bl	80800ac <__cxa_guard_release>
 8081f1a:	4a06      	ldr	r2, [pc, #24]	; (8081f34 <_Z17_fetch_usbserial1v+0x44>)
 8081f1c:	4906      	ldr	r1, [pc, #24]	; (8081f38 <_Z17_fetch_usbserial1v+0x48>)
 8081f1e:	4804      	ldr	r0, [pc, #16]	; (8081f30 <_Z17_fetch_usbserial1v+0x40>)
 8081f20:	f000 f9b2 	bl	8082288 <__aeabi_atexit>
  return _usbserial1;
}
 8081f24:	4802      	ldr	r0, [pc, #8]	; (8081f30 <_Z17_fetch_usbserial1v+0x40>)
 8081f26:	b006      	add	sp, #24
 8081f28:	bd10      	pop	{r4, pc}
 8081f2a:	bf00      	nop
 8081f2c:	200007e4 	.word	0x200007e4
 8081f30:	2000086c 	.word	0x2000086c
 8081f34:	2000046c 	.word	0x2000046c
 8081f38:	08081dd5 	.word	0x08081dd5

08081f3c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081f3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081f3e:	4b18      	ldr	r3, [pc, #96]	; (8081fa0 <serialEventRun+0x64>)
 8081f40:	b133      	cbz	r3, 8081f50 <serialEventRun+0x14>
 8081f42:	f7ff ff99 	bl	8081e78 <_Z16_fetch_usbserialv>
 8081f46:	6803      	ldr	r3, [r0, #0]
 8081f48:	691b      	ldr	r3, [r3, #16]
 8081f4a:	4798      	blx	r3
 8081f4c:	2800      	cmp	r0, #0
 8081f4e:	dc1e      	bgt.n	8081f8e <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081f50:	4b14      	ldr	r3, [pc, #80]	; (8081fa4 <serialEventRun+0x68>)
 8081f52:	b133      	cbz	r3, 8081f62 <serialEventRun+0x26>
 8081f54:	f7ff ff16 	bl	8081d84 <_Z22__fetch_global_Serial1v>
 8081f58:	6803      	ldr	r3, [r0, #0]
 8081f5a:	691b      	ldr	r3, [r3, #16]
 8081f5c:	4798      	blx	r3
 8081f5e:	2800      	cmp	r0, #0
 8081f60:	dc18      	bgt.n	8081f94 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8081f62:	4b11      	ldr	r3, [pc, #68]	; (8081fa8 <serialEventRun+0x6c>)
 8081f64:	b10b      	cbz	r3, 8081f6a <serialEventRun+0x2e>
 8081f66:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8081f6a:	4b10      	ldr	r3, [pc, #64]	; (8081fac <serialEventRun+0x70>)
 8081f6c:	b10b      	cbz	r3, 8081f72 <serialEventRun+0x36>
 8081f6e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8081f72:	4b0f      	ldr	r3, [pc, #60]	; (8081fb0 <serialEventRun+0x74>)
 8081f74:	b10b      	cbz	r3, 8081f7a <serialEventRun+0x3e>
 8081f76:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081f7a:	4b0e      	ldr	r3, [pc, #56]	; (8081fb4 <serialEventRun+0x78>)
 8081f7c:	b17b      	cbz	r3, 8081f9e <serialEventRun+0x62>
 8081f7e:	f7ff ffb7 	bl	8081ef0 <_Z17_fetch_usbserial1v>
 8081f82:	6803      	ldr	r3, [r0, #0]
 8081f84:	691b      	ldr	r3, [r3, #16]
 8081f86:	4798      	blx	r3
 8081f88:	2800      	cmp	r0, #0
 8081f8a:	dc06      	bgt.n	8081f9a <serialEventRun+0x5e>
 8081f8c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081f8e:	f3af 8000 	nop.w
 8081f92:	e7dd      	b.n	8081f50 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8081f94:	f3af 8000 	nop.w
 8081f98:	e7e3      	b.n	8081f62 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8081f9a:	f3af 8000 	nop.w
 8081f9e:	bd08      	pop	{r3, pc}
	...

08081fb8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081fb8:	b508      	push	{r3, lr}
	serialEventRun();
 8081fba:	f7ff ffbf 	bl	8081f3c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081fbe:	f7fe fd9f 	bl	8080b00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081fc2:	4b01      	ldr	r3, [pc, #4]	; (8081fc8 <_post_loop+0x10>)
 8081fc4:	6018      	str	r0, [r3, #0]
 8081fc6:	bd08      	pop	{r3, pc}
 8081fc8:	2000098c 	.word	0x2000098c

08081fcc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081fcc:	4802      	ldr	r0, [pc, #8]	; (8081fd8 <_Z33system_initialize_user_backup_ramv+0xc>)
 8081fce:	4a03      	ldr	r2, [pc, #12]	; (8081fdc <_Z33system_initialize_user_backup_ramv+0x10>)
 8081fd0:	4903      	ldr	r1, [pc, #12]	; (8081fe0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8081fd2:	1a12      	subs	r2, r2, r0
 8081fd4:	f001 b97c 	b.w	80832d0 <memcpy>
 8081fd8:	40024000 	.word	0x40024000
 8081fdc:	40024004 	.word	0x40024004
 8081fe0:	08083950 	.word	0x08083950

08081fe4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081fe4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081fe6:	2300      	movs	r3, #0
 8081fe8:	9300      	str	r3, [sp, #0]
 8081fea:	461a      	mov	r2, r3
 8081fec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081ff0:	f7fe ff18 	bl	8080e24 <system_ctrl_set_result>
}
 8081ff4:	b003      	add	sp, #12
 8081ff6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081ffc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081ffc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081ffe:	8843      	ldrh	r3, [r0, #2]
 8082000:	2b0a      	cmp	r3, #10
 8082002:	d008      	beq.n	8082016 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082004:	2b50      	cmp	r3, #80	; 0x50
 8082006:	d109      	bne.n	808201c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082008:	4b09      	ldr	r3, [pc, #36]	; (8082030 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808200a:	681b      	ldr	r3, [r3, #0]
 808200c:	b13b      	cbz	r3, 808201e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808200e:	b003      	add	sp, #12
 8082010:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082014:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8082016:	f7ff ffe5 	bl	8081fe4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808201a:	e006      	b.n	808202a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808201c:	2300      	movs	r3, #0
 808201e:	9300      	str	r3, [sp, #0]
 8082020:	461a      	mov	r2, r3
 8082022:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082026:	f7fe fefd 	bl	8080e24 <system_ctrl_set_result>
        break;
    }
}
 808202a:	b003      	add	sp, #12
 808202c:	f85d fb04 	ldr.w	pc, [sp], #4
 8082030:	20000984 	.word	0x20000984

08082034 <module_user_init_hook>:

void module_user_init_hook()
{
 8082034:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082036:	4c10      	ldr	r4, [pc, #64]	; (8082078 <module_user_init_hook+0x44>)
 8082038:	4d10      	ldr	r5, [pc, #64]	; (808207c <module_user_init_hook+0x48>)
 808203a:	6823      	ldr	r3, [r4, #0]
 808203c:	42ab      	cmp	r3, r5
 808203e:	4b10      	ldr	r3, [pc, #64]	; (8082080 <module_user_init_hook+0x4c>)
 8082040:	bf0c      	ite	eq
 8082042:	2201      	moveq	r2, #1
 8082044:	2200      	movne	r2, #0
 8082046:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082048:	d002      	beq.n	8082050 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808204a:	f7ff ffbf 	bl	8081fcc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808204e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082050:	f7fe fd4e 	bl	8080af0 <HAL_RNG_GetRandomNumber>
 8082054:	4604      	mov	r4, r0
    srand(seed);
 8082056:	f001 f94f 	bl	80832f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808205a:	4b0a      	ldr	r3, [pc, #40]	; (8082084 <module_user_init_hook+0x50>)
 808205c:	b113      	cbz	r3, 8082064 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808205e:	4620      	mov	r0, r4
 8082060:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082064:	2100      	movs	r1, #0
 8082066:	4807      	ldr	r0, [pc, #28]	; (8082084 <module_user_init_hook+0x50>)
 8082068:	f7fe ff1e 	bl	8080ea8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808206c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082070:	2100      	movs	r1, #0
 8082072:	4805      	ldr	r0, [pc, #20]	; (8082088 <module_user_init_hook+0x54>)
 8082074:	f7fe becc 	b.w	8080e10 <system_ctrl_set_app_request_handler>
 8082078:	40024000 	.word	0x40024000
 808207c:	9a271c1e 	.word	0x9a271c1e
 8082080:	20000988 	.word	0x20000988
 8082084:	00000000 	.word	0x00000000
 8082088:	08081ffd 	.word	0x08081ffd

0808208c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808208c:	b510      	push	{r4, lr}
 808208e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082090:	480f      	ldr	r0, [pc, #60]	; (80820d0 <pinAvailable+0x44>)
 8082092:	f7ff fd5d 	bl	8081b50 <_ZN8SPIClass9isEnabledEv>
 8082096:	b128      	cbz	r0, 80820a4 <pinAvailable+0x18>
 8082098:	f1a4 030d 	sub.w	r3, r4, #13
 808209c:	2b02      	cmp	r3, #2
 808209e:	d801      	bhi.n	80820a4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80820a0:	2000      	movs	r0, #0
 80820a2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80820a4:	f000 f86a 	bl	808217c <_Z19__fetch_global_Wirev>
 80820a8:	f7ff fbba 	bl	8081820 <_ZN7TwoWire9isEnabledEv>
 80820ac:	b108      	cbz	r0, 80820b2 <pinAvailable+0x26>
 80820ae:	2c01      	cmp	r4, #1
 80820b0:	d9f6      	bls.n	80820a0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80820b2:	f7ff fe67 	bl	8081d84 <_Z22__fetch_global_Serial1v>
 80820b6:	f7ff fe61 	bl	8081d7c <_ZN11USARTSerial9isEnabledEv>
 80820ba:	b118      	cbz	r0, 80820c4 <pinAvailable+0x38>
 80820bc:	f1a4 0312 	sub.w	r3, r4, #18
 80820c0:	2b01      	cmp	r3, #1
 80820c2:	d9ed      	bls.n	80820a0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80820c4:	2c2e      	cmp	r4, #46	; 0x2e
 80820c6:	bf8c      	ite	hi
 80820c8:	2000      	movhi	r0, #0
 80820ca:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80820cc:	bd10      	pop	{r4, pc}
 80820ce:	bf00      	nop
 80820d0:	200009c8 	.word	0x200009c8

080820d4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80820d4:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80820d6:	b538      	push	{r3, r4, r5, lr}
 80820d8:	4604      	mov	r4, r0
 80820da:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80820dc:	d80a      	bhi.n	80820f4 <pinMode+0x20>
 80820de:	29ff      	cmp	r1, #255	; 0xff
 80820e0:	d008      	beq.n	80820f4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80820e2:	f7ff ffd3 	bl	808208c <pinAvailable>
 80820e6:	b128      	cbz	r0, 80820f4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80820e8:	4629      	mov	r1, r5
 80820ea:	4620      	mov	r0, r4
}
 80820ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80820f0:	f7fe bd36 	b.w	8080b60 <HAL_Pin_Mode>
 80820f4:	bd38      	pop	{r3, r4, r5, pc}

080820f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80820f6:	b538      	push	{r3, r4, r5, lr}
 80820f8:	4604      	mov	r4, r0
 80820fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80820fc:	f7fe fd38 	bl	8080b70 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082100:	28ff      	cmp	r0, #255	; 0xff
 8082102:	d010      	beq.n	8082126 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082104:	2806      	cmp	r0, #6
 8082106:	d804      	bhi.n	8082112 <digitalWrite+0x1c>
 8082108:	234d      	movs	r3, #77	; 0x4d
 808210a:	fa23 f000 	lsr.w	r0, r3, r0
 808210e:	07c3      	lsls	r3, r0, #31
 8082110:	d409      	bmi.n	8082126 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082112:	4620      	mov	r0, r4
 8082114:	f7ff ffba 	bl	808208c <pinAvailable>
 8082118:	b128      	cbz	r0, 8082126 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808211a:	4629      	mov	r1, r5
 808211c:	4620      	mov	r0, r4
}
 808211e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082122:	f7fe bd2d 	b.w	8080b80 <HAL_GPIO_Write>
 8082126:	bd38      	pop	{r3, r4, r5, pc}

08082128 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8082128:	b510      	push	{r4, lr}
 808212a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808212c:	f7fe fd20 	bl	8080b70 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8082130:	3804      	subs	r0, #4
 8082132:	b2c0      	uxtb	r0, r0
 8082134:	2801      	cmp	r0, #1
 8082136:	d908      	bls.n	808214a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8082138:	4620      	mov	r0, r4
 808213a:	f7ff ffa7 	bl	808208c <pinAvailable>
 808213e:	b120      	cbz	r0, 808214a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082140:	4620      	mov	r0, r4
}
 8082142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8082146:	f7fe bd23 	b.w	8080b90 <HAL_GPIO_Read>
}
 808214a:	2000      	movs	r0, #0
 808214c:	bd10      	pop	{r4, pc}

0808214e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808214e:	b510      	push	{r4, lr}
 8082150:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8082152:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8082154:	bf9c      	itt	ls
 8082156:	340a      	addls	r4, #10
 8082158:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808215a:	4620      	mov	r0, r4
 808215c:	f7ff ff96 	bl	808208c <pinAvailable>
 8082160:	b150      	cbz	r0, 8082178 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8082162:	2103      	movs	r1, #3
 8082164:	4620      	mov	r0, r4
 8082166:	f7fe fcf3 	bl	8080b50 <HAL_Validate_Pin_Function>
 808216a:	2803      	cmp	r0, #3
 808216c:	d104      	bne.n	8082178 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808216e:	4620      	mov	r0, r4
}
 8082170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8082174:	f7fe bd24 	b.w	8080bc0 <HAL_ADC_Read>
}
 8082178:	2000      	movs	r0, #0
 808217a:	bd10      	pop	{r4, pc}

0808217c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808217c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808217e:	4d0b      	ldr	r5, [pc, #44]	; (80821ac <_Z19__fetch_global_Wirev+0x30>)
 8082180:	6829      	ldr	r1, [r5, #0]
 8082182:	f011 0401 	ands.w	r4, r1, #1
 8082186:	d10f      	bne.n	80821a8 <_Z19__fetch_global_Wirev+0x2c>
 8082188:	4628      	mov	r0, r5
 808218a:	f7fd ff8a 	bl	80800a2 <__cxa_guard_acquire>
 808218e:	b158      	cbz	r0, 80821a8 <_Z19__fetch_global_Wirev+0x2c>
 8082190:	4621      	mov	r1, r4
 8082192:	4807      	ldr	r0, [pc, #28]	; (80821b0 <_Z19__fetch_global_Wirev+0x34>)
 8082194:	f7ff fb08 	bl	80817a8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082198:	4628      	mov	r0, r5
 808219a:	f7fd ff87 	bl	80800ac <__cxa_guard_release>
 808219e:	4a05      	ldr	r2, [pc, #20]	; (80821b4 <_Z19__fetch_global_Wirev+0x38>)
 80821a0:	4905      	ldr	r1, [pc, #20]	; (80821b8 <_Z19__fetch_global_Wirev+0x3c>)
 80821a2:	4803      	ldr	r0, [pc, #12]	; (80821b0 <_Z19__fetch_global_Wirev+0x34>)
 80821a4:	f000 f870 	bl	8082288 <__aeabi_atexit>
	return wire;
}
 80821a8:	4801      	ldr	r0, [pc, #4]	; (80821b0 <_Z19__fetch_global_Wirev+0x34>)
 80821aa:	bd38      	pop	{r3, r4, r5, pc}
 80821ac:	20000990 	.word	0x20000990
 80821b0:	200009a8 	.word	0x200009a8
 80821b4:	2000046c 	.word	0x2000046c
 80821b8:	08081751 	.word	0x08081751

080821bc <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80821bc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 80821be:	4c0b      	ldr	r4, [pc, #44]	; (80821ec <_Z20__fetch_global_Wire3v+0x30>)
 80821c0:	6823      	ldr	r3, [r4, #0]
 80821c2:	07db      	lsls	r3, r3, #31
 80821c4:	d40f      	bmi.n	80821e6 <_Z20__fetch_global_Wire3v+0x2a>
 80821c6:	4620      	mov	r0, r4
 80821c8:	f7fd ff6b 	bl	80800a2 <__cxa_guard_acquire>
 80821cc:	b158      	cbz	r0, 80821e6 <_Z20__fetch_global_Wire3v+0x2a>
 80821ce:	2102      	movs	r1, #2
 80821d0:	4807      	ldr	r0, [pc, #28]	; (80821f0 <_Z20__fetch_global_Wire3v+0x34>)
 80821d2:	f7ff fae9 	bl	80817a8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80821d6:	4620      	mov	r0, r4
 80821d8:	f7fd ff68 	bl	80800ac <__cxa_guard_release>
 80821dc:	4a05      	ldr	r2, [pc, #20]	; (80821f4 <_Z20__fetch_global_Wire3v+0x38>)
 80821de:	4906      	ldr	r1, [pc, #24]	; (80821f8 <_Z20__fetch_global_Wire3v+0x3c>)
 80821e0:	4803      	ldr	r0, [pc, #12]	; (80821f0 <_Z20__fetch_global_Wire3v+0x34>)
 80821e2:	f000 f851 	bl	8082288 <__aeabi_atexit>
	return wire;
}
 80821e6:	4802      	ldr	r0, [pc, #8]	; (80821f0 <_Z20__fetch_global_Wire3v+0x34>)
 80821e8:	bd10      	pop	{r4, pc}
 80821ea:	bf00      	nop
 80821ec:	200009bc 	.word	0x200009bc
 80821f0:	20000994 	.word	0x20000994
 80821f4:	2000046c 	.word	0x2000046c
 80821f8:	08081751 	.word	0x08081751

080821fc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80821fc:	b513      	push	{r0, r1, r4, lr}
 80821fe:	4c08      	ldr	r4, [pc, #32]	; (8082220 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082200:	2300      	movs	r3, #0
 8082202:	461a      	mov	r2, r3
 8082204:	4619      	mov	r1, r3
 8082206:	9300      	str	r3, [sp, #0]
 8082208:	4620      	mov	r0, r4
 808220a:	f7ff fb8d 	bl	8081928 <_ZN9IPAddressC1Ehhhh>
 808220e:	4620      	mov	r0, r4
 8082210:	4a04      	ldr	r2, [pc, #16]	; (8082224 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082212:	4905      	ldr	r1, [pc, #20]	; (8082228 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082214:	b002      	add	sp, #8
 8082216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808221a:	f000 b835 	b.w	8082288 <__aeabi_atexit>
 808221e:	bf00      	nop
 8082220:	200009c0 	.word	0x200009c0
 8082224:	2000046c 	.word	0x2000046c
 8082228:	080818a5 	.word	0x080818a5

0808222c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808222c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808222e:	4e11      	ldr	r6, [pc, #68]	; (8082274 <_GLOBAL__sub_I_SPI+0x48>)
 8082230:	4d11      	ldr	r5, [pc, #68]	; (8082278 <_GLOBAL__sub_I_SPI+0x4c>)
 8082232:	4c12      	ldr	r4, [pc, #72]	; (808227c <_GLOBAL__sub_I_SPI+0x50>)
 8082234:	2100      	movs	r1, #0
 8082236:	4630      	mov	r0, r6
 8082238:	f7ff fc76 	bl	8081b28 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808223c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808223e:	4e10      	ldr	r6, [pc, #64]	; (8082280 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082240:	462a      	mov	r2, r5
 8082242:	4621      	mov	r1, r4
 8082244:	f000 f820 	bl	8082288 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082248:	2101      	movs	r1, #1
 808224a:	4630      	mov	r0, r6
 808224c:	f7ff fc6c 	bl	8081b28 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082250:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082252:	4e0c      	ldr	r6, [pc, #48]	; (8082284 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082254:	462a      	mov	r2, r5
 8082256:	4621      	mov	r1, r4
 8082258:	f000 f816 	bl	8082288 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808225c:	2102      	movs	r1, #2
 808225e:	4630      	mov	r0, r6
 8082260:	f7ff fc62 	bl	8081b28 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082264:	462a      	mov	r2, r5
 8082266:	4621      	mov	r1, r4
 8082268:	4630      	mov	r0, r6
 808226a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808226e:	f000 b80b 	b.w	8082288 <__aeabi_atexit>
 8082272:	bf00      	nop
 8082274:	200009c8 	.word	0x200009c8
 8082278:	2000046c 	.word	0x2000046c
 808227c:	08081b19 	.word	0x08081b19
 8082280:	200009d8 	.word	0x200009d8
 8082284:	200009e8 	.word	0x200009e8

08082288 <__aeabi_atexit>:
 8082288:	460b      	mov	r3, r1
 808228a:	4601      	mov	r1, r0
 808228c:	4618      	mov	r0, r3
 808228e:	f001 b811 	b.w	80832b4 <__cxa_atexit>

08082292 <_ZSt25__throw_bad_function_callv>:
 8082292:	b508      	push	{r3, lr}
 8082294:	f7fe fe80 	bl	8080f98 <abort>

08082298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8082298:	4b24      	ldr	r3, [pc, #144]	; (808232c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808229a:	681a      	ldr	r2, [r3, #0]
 808229c:	07d0      	lsls	r0, r2, #31
 808229e:	bf5c      	itt	pl
 80822a0:	2201      	movpl	r2, #1
 80822a2:	601a      	strpl	r2, [r3, #0]
 80822a4:	4b22      	ldr	r3, [pc, #136]	; (8082330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80822a6:	681a      	ldr	r2, [r3, #0]
 80822a8:	07d1      	lsls	r1, r2, #31
 80822aa:	bf5c      	itt	pl
 80822ac:	2201      	movpl	r2, #1
 80822ae:	601a      	strpl	r2, [r3, #0]
 80822b0:	4b20      	ldr	r3, [pc, #128]	; (8082334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80822b2:	681a      	ldr	r2, [r3, #0]
 80822b4:	07d2      	lsls	r2, r2, #31
 80822b6:	bf5c      	itt	pl
 80822b8:	2201      	movpl	r2, #1
 80822ba:	601a      	strpl	r2, [r3, #0]
 80822bc:	4b1e      	ldr	r3, [pc, #120]	; (8082338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80822be:	681a      	ldr	r2, [r3, #0]
 80822c0:	07d0      	lsls	r0, r2, #31
 80822c2:	bf5c      	itt	pl
 80822c4:	2201      	movpl	r2, #1
 80822c6:	601a      	strpl	r2, [r3, #0]
 80822c8:	4b1c      	ldr	r3, [pc, #112]	; (808233c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80822ca:	681a      	ldr	r2, [r3, #0]
 80822cc:	07d1      	lsls	r1, r2, #31
 80822ce:	bf5c      	itt	pl
 80822d0:	2201      	movpl	r2, #1
 80822d2:	601a      	strpl	r2, [r3, #0]
 80822d4:	4b1a      	ldr	r3, [pc, #104]	; (8082340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80822d6:	681a      	ldr	r2, [r3, #0]
 80822d8:	07d2      	lsls	r2, r2, #31
 80822da:	bf5c      	itt	pl
 80822dc:	2201      	movpl	r2, #1
 80822de:	601a      	strpl	r2, [r3, #0]
 80822e0:	4b18      	ldr	r3, [pc, #96]	; (8082344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80822e2:	681a      	ldr	r2, [r3, #0]
 80822e4:	07d0      	lsls	r0, r2, #31
 80822e6:	bf5c      	itt	pl
 80822e8:	2201      	movpl	r2, #1
 80822ea:	601a      	strpl	r2, [r3, #0]
 80822ec:	4b16      	ldr	r3, [pc, #88]	; (8082348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80822ee:	681a      	ldr	r2, [r3, #0]
 80822f0:	07d1      	lsls	r1, r2, #31
 80822f2:	bf5c      	itt	pl
 80822f4:	2201      	movpl	r2, #1
 80822f6:	601a      	strpl	r2, [r3, #0]
 80822f8:	4b14      	ldr	r3, [pc, #80]	; (808234c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80822fa:	681a      	ldr	r2, [r3, #0]
 80822fc:	07d2      	lsls	r2, r2, #31
 80822fe:	bf5c      	itt	pl
 8082300:	2201      	movpl	r2, #1
 8082302:	601a      	strpl	r2, [r3, #0]
 8082304:	4b12      	ldr	r3, [pc, #72]	; (8082350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8082306:	681a      	ldr	r2, [r3, #0]
 8082308:	07d0      	lsls	r0, r2, #31
 808230a:	bf5c      	itt	pl
 808230c:	2201      	movpl	r2, #1
 808230e:	601a      	strpl	r2, [r3, #0]
 8082310:	4b10      	ldr	r3, [pc, #64]	; (8082354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8082312:	681a      	ldr	r2, [r3, #0]
 8082314:	07d1      	lsls	r1, r2, #31
 8082316:	bf5c      	itt	pl
 8082318:	2201      	movpl	r2, #1
 808231a:	601a      	strpl	r2, [r3, #0]
 808231c:	4b0e      	ldr	r3, [pc, #56]	; (8082358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808231e:	681a      	ldr	r2, [r3, #0]
 8082320:	07d2      	lsls	r2, r2, #31
 8082322:	bf5c      	itt	pl
 8082324:	2201      	movpl	r2, #1
 8082326:	601a      	strpl	r2, [r3, #0]
 8082328:	4770      	bx	lr
 808232a:	bf00      	nop
 808232c:	20000a24 	.word	0x20000a24
 8082330:	20000a20 	.word	0x20000a20
 8082334:	20000a1c 	.word	0x20000a1c
 8082338:	20000a18 	.word	0x20000a18
 808233c:	20000a14 	.word	0x20000a14
 8082340:	20000a10 	.word	0x20000a10
 8082344:	20000a0c 	.word	0x20000a0c
 8082348:	20000a08 	.word	0x20000a08
 808234c:	20000a04 	.word	0x20000a04
 8082350:	20000a00 	.word	0x20000a00
 8082354:	200009fc 	.word	0x200009fc
 8082358:	200009f8 	.word	0x200009f8

0808235c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808235c:	4b18      	ldr	r3, [pc, #96]	; (80823c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808235e:	681a      	ldr	r2, [r3, #0]
 8082360:	07d1      	lsls	r1, r2, #31
 8082362:	bf5c      	itt	pl
 8082364:	2201      	movpl	r2, #1
 8082366:	601a      	strpl	r2, [r3, #0]
 8082368:	4b16      	ldr	r3, [pc, #88]	; (80823c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808236a:	681a      	ldr	r2, [r3, #0]
 808236c:	07d2      	lsls	r2, r2, #31
 808236e:	bf5c      	itt	pl
 8082370:	2201      	movpl	r2, #1
 8082372:	601a      	strpl	r2, [r3, #0]
 8082374:	4b14      	ldr	r3, [pc, #80]	; (80823c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082376:	681a      	ldr	r2, [r3, #0]
 8082378:	07d0      	lsls	r0, r2, #31
 808237a:	bf5c      	itt	pl
 808237c:	2201      	movpl	r2, #1
 808237e:	601a      	strpl	r2, [r3, #0]
 8082380:	4b12      	ldr	r3, [pc, #72]	; (80823cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082382:	681a      	ldr	r2, [r3, #0]
 8082384:	07d1      	lsls	r1, r2, #31
 8082386:	bf5c      	itt	pl
 8082388:	2201      	movpl	r2, #1
 808238a:	601a      	strpl	r2, [r3, #0]
 808238c:	4b10      	ldr	r3, [pc, #64]	; (80823d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808238e:	681a      	ldr	r2, [r3, #0]
 8082390:	07d2      	lsls	r2, r2, #31
 8082392:	bf5c      	itt	pl
 8082394:	2201      	movpl	r2, #1
 8082396:	601a      	strpl	r2, [r3, #0]
 8082398:	4b0e      	ldr	r3, [pc, #56]	; (80823d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808239a:	681a      	ldr	r2, [r3, #0]
 808239c:	07d0      	lsls	r0, r2, #31
 808239e:	bf5c      	itt	pl
 80823a0:	2201      	movpl	r2, #1
 80823a2:	601a      	strpl	r2, [r3, #0]
 80823a4:	4b0c      	ldr	r3, [pc, #48]	; (80823d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80823a6:	681a      	ldr	r2, [r3, #0]
 80823a8:	07d1      	lsls	r1, r2, #31
 80823aa:	bf5c      	itt	pl
 80823ac:	2201      	movpl	r2, #1
 80823ae:	601a      	strpl	r2, [r3, #0]
 80823b0:	4b0a      	ldr	r3, [pc, #40]	; (80823dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80823b2:	681a      	ldr	r2, [r3, #0]
 80823b4:	07d2      	lsls	r2, r2, #31
 80823b6:	bf5c      	itt	pl
 80823b8:	2201      	movpl	r2, #1
 80823ba:	601a      	strpl	r2, [r3, #0]
 80823bc:	4770      	bx	lr
 80823be:	bf00      	nop
 80823c0:	20000a44 	.word	0x20000a44
 80823c4:	20000a40 	.word	0x20000a40
 80823c8:	20000a3c 	.word	0x20000a3c
 80823cc:	20000a38 	.word	0x20000a38
 80823d0:	20000a34 	.word	0x20000a34
 80823d4:	20000a30 	.word	0x20000a30
 80823d8:	20000a2c 	.word	0x20000a2c
 80823dc:	20000a28 	.word	0x20000a28

080823e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80823e0:	4b18      	ldr	r3, [pc, #96]	; (8082444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80823e2:	681a      	ldr	r2, [r3, #0]
 80823e4:	07d1      	lsls	r1, r2, #31
 80823e6:	bf5c      	itt	pl
 80823e8:	2201      	movpl	r2, #1
 80823ea:	601a      	strpl	r2, [r3, #0]
 80823ec:	4b16      	ldr	r3, [pc, #88]	; (8082448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80823ee:	681a      	ldr	r2, [r3, #0]
 80823f0:	07d2      	lsls	r2, r2, #31
 80823f2:	bf5c      	itt	pl
 80823f4:	2201      	movpl	r2, #1
 80823f6:	601a      	strpl	r2, [r3, #0]
 80823f8:	4b14      	ldr	r3, [pc, #80]	; (808244c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80823fa:	681a      	ldr	r2, [r3, #0]
 80823fc:	07d0      	lsls	r0, r2, #31
 80823fe:	bf5c      	itt	pl
 8082400:	2201      	movpl	r2, #1
 8082402:	601a      	strpl	r2, [r3, #0]
 8082404:	4b12      	ldr	r3, [pc, #72]	; (8082450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082406:	681a      	ldr	r2, [r3, #0]
 8082408:	07d1      	lsls	r1, r2, #31
 808240a:	bf5c      	itt	pl
 808240c:	2201      	movpl	r2, #1
 808240e:	601a      	strpl	r2, [r3, #0]
 8082410:	4b10      	ldr	r3, [pc, #64]	; (8082454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082412:	681a      	ldr	r2, [r3, #0]
 8082414:	07d2      	lsls	r2, r2, #31
 8082416:	bf5c      	itt	pl
 8082418:	2201      	movpl	r2, #1
 808241a:	601a      	strpl	r2, [r3, #0]
 808241c:	4b0e      	ldr	r3, [pc, #56]	; (8082458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808241e:	681a      	ldr	r2, [r3, #0]
 8082420:	07d0      	lsls	r0, r2, #31
 8082422:	bf5c      	itt	pl
 8082424:	2201      	movpl	r2, #1
 8082426:	601a      	strpl	r2, [r3, #0]
 8082428:	4b0c      	ldr	r3, [pc, #48]	; (808245c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808242a:	681a      	ldr	r2, [r3, #0]
 808242c:	07d1      	lsls	r1, r2, #31
 808242e:	bf5c      	itt	pl
 8082430:	2201      	movpl	r2, #1
 8082432:	601a      	strpl	r2, [r3, #0]
 8082434:	4b0a      	ldr	r3, [pc, #40]	; (8082460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082436:	681a      	ldr	r2, [r3, #0]
 8082438:	07d2      	lsls	r2, r2, #31
 808243a:	bf5c      	itt	pl
 808243c:	2201      	movpl	r2, #1
 808243e:	601a      	strpl	r2, [r3, #0]
 8082440:	4770      	bx	lr
 8082442:	bf00      	nop
 8082444:	20000a64 	.word	0x20000a64
 8082448:	20000a60 	.word	0x20000a60
 808244c:	20000a5c 	.word	0x20000a5c
 8082450:	20000a58 	.word	0x20000a58
 8082454:	20000a54 	.word	0x20000a54
 8082458:	20000a50 	.word	0x20000a50
 808245c:	20000a4c 	.word	0x20000a4c
 8082460:	20000a48 	.word	0x20000a48

08082464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082464:	4b24      	ldr	r3, [pc, #144]	; (80824f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082466:	681a      	ldr	r2, [r3, #0]
 8082468:	07d0      	lsls	r0, r2, #31
 808246a:	bf5c      	itt	pl
 808246c:	2201      	movpl	r2, #1
 808246e:	601a      	strpl	r2, [r3, #0]
 8082470:	4b22      	ldr	r3, [pc, #136]	; (80824fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8082472:	681a      	ldr	r2, [r3, #0]
 8082474:	07d1      	lsls	r1, r2, #31
 8082476:	bf5c      	itt	pl
 8082478:	2201      	movpl	r2, #1
 808247a:	601a      	strpl	r2, [r3, #0]
 808247c:	4b20      	ldr	r3, [pc, #128]	; (8082500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808247e:	681a      	ldr	r2, [r3, #0]
 8082480:	07d2      	lsls	r2, r2, #31
 8082482:	bf5c      	itt	pl
 8082484:	2201      	movpl	r2, #1
 8082486:	601a      	strpl	r2, [r3, #0]
 8082488:	4b1e      	ldr	r3, [pc, #120]	; (8082504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808248a:	681a      	ldr	r2, [r3, #0]
 808248c:	07d0      	lsls	r0, r2, #31
 808248e:	bf5c      	itt	pl
 8082490:	2201      	movpl	r2, #1
 8082492:	601a      	strpl	r2, [r3, #0]
 8082494:	4b1c      	ldr	r3, [pc, #112]	; (8082508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8082496:	681a      	ldr	r2, [r3, #0]
 8082498:	07d1      	lsls	r1, r2, #31
 808249a:	bf5c      	itt	pl
 808249c:	2201      	movpl	r2, #1
 808249e:	601a      	strpl	r2, [r3, #0]
 80824a0:	4b1a      	ldr	r3, [pc, #104]	; (808250c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80824a2:	681a      	ldr	r2, [r3, #0]
 80824a4:	07d2      	lsls	r2, r2, #31
 80824a6:	bf5c      	itt	pl
 80824a8:	2201      	movpl	r2, #1
 80824aa:	601a      	strpl	r2, [r3, #0]
 80824ac:	4b18      	ldr	r3, [pc, #96]	; (8082510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80824ae:	681a      	ldr	r2, [r3, #0]
 80824b0:	07d0      	lsls	r0, r2, #31
 80824b2:	bf5c      	itt	pl
 80824b4:	2201      	movpl	r2, #1
 80824b6:	601a      	strpl	r2, [r3, #0]
 80824b8:	4b16      	ldr	r3, [pc, #88]	; (8082514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80824ba:	681a      	ldr	r2, [r3, #0]
 80824bc:	07d1      	lsls	r1, r2, #31
 80824be:	bf5c      	itt	pl
 80824c0:	2201      	movpl	r2, #1
 80824c2:	601a      	strpl	r2, [r3, #0]
 80824c4:	4b14      	ldr	r3, [pc, #80]	; (8082518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80824c6:	681a      	ldr	r2, [r3, #0]
 80824c8:	07d2      	lsls	r2, r2, #31
 80824ca:	bf5c      	itt	pl
 80824cc:	2201      	movpl	r2, #1
 80824ce:	601a      	strpl	r2, [r3, #0]
 80824d0:	4b12      	ldr	r3, [pc, #72]	; (808251c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80824d2:	681a      	ldr	r2, [r3, #0]
 80824d4:	07d0      	lsls	r0, r2, #31
 80824d6:	bf5c      	itt	pl
 80824d8:	2201      	movpl	r2, #1
 80824da:	601a      	strpl	r2, [r3, #0]
 80824dc:	4b10      	ldr	r3, [pc, #64]	; (8082520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80824de:	681a      	ldr	r2, [r3, #0]
 80824e0:	07d1      	lsls	r1, r2, #31
 80824e2:	bf5c      	itt	pl
 80824e4:	2201      	movpl	r2, #1
 80824e6:	601a      	strpl	r2, [r3, #0]
 80824e8:	4b0e      	ldr	r3, [pc, #56]	; (8082524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80824ea:	681a      	ldr	r2, [r3, #0]
 80824ec:	07d2      	lsls	r2, r2, #31
 80824ee:	bf5c      	itt	pl
 80824f0:	2201      	movpl	r2, #1
 80824f2:	601a      	strpl	r2, [r3, #0]
 80824f4:	4770      	bx	lr
 80824f6:	bf00      	nop
 80824f8:	20000a94 	.word	0x20000a94
 80824fc:	20000a90 	.word	0x20000a90
 8082500:	20000a8c 	.word	0x20000a8c
 8082504:	20000a88 	.word	0x20000a88
 8082508:	20000a84 	.word	0x20000a84
 808250c:	20000a80 	.word	0x20000a80
 8082510:	20000a7c 	.word	0x20000a7c
 8082514:	20000a78 	.word	0x20000a78
 8082518:	20000a74 	.word	0x20000a74
 808251c:	20000a70 	.word	0x20000a70
 8082520:	20000a6c 	.word	0x20000a6c
 8082524:	20000a68 	.word	0x20000a68

08082528 <__aeabi_drsub>:
 8082528:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808252c:	e002      	b.n	8082534 <__adddf3>
 808252e:	bf00      	nop

08082530 <__aeabi_dsub>:
 8082530:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082534 <__adddf3>:
 8082534:	b530      	push	{r4, r5, lr}
 8082536:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808253a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808253e:	ea94 0f05 	teq	r4, r5
 8082542:	bf08      	it	eq
 8082544:	ea90 0f02 	teqeq	r0, r2
 8082548:	bf1f      	itttt	ne
 808254a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808254e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8082552:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082556:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808255a:	f000 80e2 	beq.w	8082722 <__adddf3+0x1ee>
 808255e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8082562:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082566:	bfb8      	it	lt
 8082568:	426d      	neglt	r5, r5
 808256a:	dd0c      	ble.n	8082586 <__adddf3+0x52>
 808256c:	442c      	add	r4, r5
 808256e:	ea80 0202 	eor.w	r2, r0, r2
 8082572:	ea81 0303 	eor.w	r3, r1, r3
 8082576:	ea82 0000 	eor.w	r0, r2, r0
 808257a:	ea83 0101 	eor.w	r1, r3, r1
 808257e:	ea80 0202 	eor.w	r2, r0, r2
 8082582:	ea81 0303 	eor.w	r3, r1, r3
 8082586:	2d36      	cmp	r5, #54	; 0x36
 8082588:	bf88      	it	hi
 808258a:	bd30      	pophi	{r4, r5, pc}
 808258c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082590:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082594:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8082598:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808259c:	d002      	beq.n	80825a4 <__adddf3+0x70>
 808259e:	4240      	negs	r0, r0
 80825a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80825a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80825a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80825ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80825b0:	d002      	beq.n	80825b8 <__adddf3+0x84>
 80825b2:	4252      	negs	r2, r2
 80825b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80825b8:	ea94 0f05 	teq	r4, r5
 80825bc:	f000 80a7 	beq.w	808270e <__adddf3+0x1da>
 80825c0:	f1a4 0401 	sub.w	r4, r4, #1
 80825c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80825c8:	db0d      	blt.n	80825e6 <__adddf3+0xb2>
 80825ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80825ce:	fa22 f205 	lsr.w	r2, r2, r5
 80825d2:	1880      	adds	r0, r0, r2
 80825d4:	f141 0100 	adc.w	r1, r1, #0
 80825d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80825dc:	1880      	adds	r0, r0, r2
 80825de:	fa43 f305 	asr.w	r3, r3, r5
 80825e2:	4159      	adcs	r1, r3
 80825e4:	e00e      	b.n	8082604 <__adddf3+0xd0>
 80825e6:	f1a5 0520 	sub.w	r5, r5, #32
 80825ea:	f10e 0e20 	add.w	lr, lr, #32
 80825ee:	2a01      	cmp	r2, #1
 80825f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80825f4:	bf28      	it	cs
 80825f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80825fa:	fa43 f305 	asr.w	r3, r3, r5
 80825fe:	18c0      	adds	r0, r0, r3
 8082600:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8082604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082608:	d507      	bpl.n	808261a <__adddf3+0xe6>
 808260a:	f04f 0e00 	mov.w	lr, #0
 808260e:	f1dc 0c00 	rsbs	ip, ip, #0
 8082612:	eb7e 0000 	sbcs.w	r0, lr, r0
 8082616:	eb6e 0101 	sbc.w	r1, lr, r1
 808261a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808261e:	d31b      	bcc.n	8082658 <__adddf3+0x124>
 8082620:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082624:	d30c      	bcc.n	8082640 <__adddf3+0x10c>
 8082626:	0849      	lsrs	r1, r1, #1
 8082628:	ea5f 0030 	movs.w	r0, r0, rrx
 808262c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8082630:	f104 0401 	add.w	r4, r4, #1
 8082634:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082638:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808263c:	f080 809a 	bcs.w	8082774 <__adddf3+0x240>
 8082640:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082644:	bf08      	it	eq
 8082646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808264a:	f150 0000 	adcs.w	r0, r0, #0
 808264e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082652:	ea41 0105 	orr.w	r1, r1, r5
 8082656:	bd30      	pop	{r4, r5, pc}
 8082658:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808265c:	4140      	adcs	r0, r0
 808265e:	eb41 0101 	adc.w	r1, r1, r1
 8082662:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082666:	f1a4 0401 	sub.w	r4, r4, #1
 808266a:	d1e9      	bne.n	8082640 <__adddf3+0x10c>
 808266c:	f091 0f00 	teq	r1, #0
 8082670:	bf04      	itt	eq
 8082672:	4601      	moveq	r1, r0
 8082674:	2000      	moveq	r0, #0
 8082676:	fab1 f381 	clz	r3, r1
 808267a:	bf08      	it	eq
 808267c:	3320      	addeq	r3, #32
 808267e:	f1a3 030b 	sub.w	r3, r3, #11
 8082682:	f1b3 0220 	subs.w	r2, r3, #32
 8082686:	da0c      	bge.n	80826a2 <__adddf3+0x16e>
 8082688:	320c      	adds	r2, #12
 808268a:	dd08      	ble.n	808269e <__adddf3+0x16a>
 808268c:	f102 0c14 	add.w	ip, r2, #20
 8082690:	f1c2 020c 	rsb	r2, r2, #12
 8082694:	fa01 f00c 	lsl.w	r0, r1, ip
 8082698:	fa21 f102 	lsr.w	r1, r1, r2
 808269c:	e00c      	b.n	80826b8 <__adddf3+0x184>
 808269e:	f102 0214 	add.w	r2, r2, #20
 80826a2:	bfd8      	it	le
 80826a4:	f1c2 0c20 	rsble	ip, r2, #32
 80826a8:	fa01 f102 	lsl.w	r1, r1, r2
 80826ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80826b0:	bfdc      	itt	le
 80826b2:	ea41 010c 	orrle.w	r1, r1, ip
 80826b6:	4090      	lslle	r0, r2
 80826b8:	1ae4      	subs	r4, r4, r3
 80826ba:	bfa2      	ittt	ge
 80826bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80826c0:	4329      	orrge	r1, r5
 80826c2:	bd30      	popge	{r4, r5, pc}
 80826c4:	ea6f 0404 	mvn.w	r4, r4
 80826c8:	3c1f      	subs	r4, #31
 80826ca:	da1c      	bge.n	8082706 <__adddf3+0x1d2>
 80826cc:	340c      	adds	r4, #12
 80826ce:	dc0e      	bgt.n	80826ee <__adddf3+0x1ba>
 80826d0:	f104 0414 	add.w	r4, r4, #20
 80826d4:	f1c4 0220 	rsb	r2, r4, #32
 80826d8:	fa20 f004 	lsr.w	r0, r0, r4
 80826dc:	fa01 f302 	lsl.w	r3, r1, r2
 80826e0:	ea40 0003 	orr.w	r0, r0, r3
 80826e4:	fa21 f304 	lsr.w	r3, r1, r4
 80826e8:	ea45 0103 	orr.w	r1, r5, r3
 80826ec:	bd30      	pop	{r4, r5, pc}
 80826ee:	f1c4 040c 	rsb	r4, r4, #12
 80826f2:	f1c4 0220 	rsb	r2, r4, #32
 80826f6:	fa20 f002 	lsr.w	r0, r0, r2
 80826fa:	fa01 f304 	lsl.w	r3, r1, r4
 80826fe:	ea40 0003 	orr.w	r0, r0, r3
 8082702:	4629      	mov	r1, r5
 8082704:	bd30      	pop	{r4, r5, pc}
 8082706:	fa21 f004 	lsr.w	r0, r1, r4
 808270a:	4629      	mov	r1, r5
 808270c:	bd30      	pop	{r4, r5, pc}
 808270e:	f094 0f00 	teq	r4, #0
 8082712:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8082716:	bf06      	itte	eq
 8082718:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808271c:	3401      	addeq	r4, #1
 808271e:	3d01      	subne	r5, #1
 8082720:	e74e      	b.n	80825c0 <__adddf3+0x8c>
 8082722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082726:	bf18      	it	ne
 8082728:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808272c:	d029      	beq.n	8082782 <__adddf3+0x24e>
 808272e:	ea94 0f05 	teq	r4, r5
 8082732:	bf08      	it	eq
 8082734:	ea90 0f02 	teqeq	r0, r2
 8082738:	d005      	beq.n	8082746 <__adddf3+0x212>
 808273a:	ea54 0c00 	orrs.w	ip, r4, r0
 808273e:	bf04      	itt	eq
 8082740:	4619      	moveq	r1, r3
 8082742:	4610      	moveq	r0, r2
 8082744:	bd30      	pop	{r4, r5, pc}
 8082746:	ea91 0f03 	teq	r1, r3
 808274a:	bf1e      	ittt	ne
 808274c:	2100      	movne	r1, #0
 808274e:	2000      	movne	r0, #0
 8082750:	bd30      	popne	{r4, r5, pc}
 8082752:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082756:	d105      	bne.n	8082764 <__adddf3+0x230>
 8082758:	0040      	lsls	r0, r0, #1
 808275a:	4149      	adcs	r1, r1
 808275c:	bf28      	it	cs
 808275e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8082762:	bd30      	pop	{r4, r5, pc}
 8082764:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082768:	bf3c      	itt	cc
 808276a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808276e:	bd30      	popcc	{r4, r5, pc}
 8082770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082774:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8082778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808277c:	f04f 0000 	mov.w	r0, #0
 8082780:	bd30      	pop	{r4, r5, pc}
 8082782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082786:	bf1a      	itte	ne
 8082788:	4619      	movne	r1, r3
 808278a:	4610      	movne	r0, r2
 808278c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8082790:	bf1c      	itt	ne
 8082792:	460b      	movne	r3, r1
 8082794:	4602      	movne	r2, r0
 8082796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808279a:	bf06      	itte	eq
 808279c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80827a0:	ea91 0f03 	teqeq	r1, r3
 80827a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80827a8:	bd30      	pop	{r4, r5, pc}
 80827aa:	bf00      	nop

080827ac <__aeabi_ui2d>:
 80827ac:	f090 0f00 	teq	r0, #0
 80827b0:	bf04      	itt	eq
 80827b2:	2100      	moveq	r1, #0
 80827b4:	4770      	bxeq	lr
 80827b6:	b530      	push	{r4, r5, lr}
 80827b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80827bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80827c0:	f04f 0500 	mov.w	r5, #0
 80827c4:	f04f 0100 	mov.w	r1, #0
 80827c8:	e750      	b.n	808266c <__adddf3+0x138>
 80827ca:	bf00      	nop

080827cc <__aeabi_i2d>:
 80827cc:	f090 0f00 	teq	r0, #0
 80827d0:	bf04      	itt	eq
 80827d2:	2100      	moveq	r1, #0
 80827d4:	4770      	bxeq	lr
 80827d6:	b530      	push	{r4, r5, lr}
 80827d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80827dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80827e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80827e4:	bf48      	it	mi
 80827e6:	4240      	negmi	r0, r0
 80827e8:	f04f 0100 	mov.w	r1, #0
 80827ec:	e73e      	b.n	808266c <__adddf3+0x138>
 80827ee:	bf00      	nop

080827f0 <__aeabi_f2d>:
 80827f0:	0042      	lsls	r2, r0, #1
 80827f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80827f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80827fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80827fe:	bf1f      	itttt	ne
 8082800:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8082804:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082808:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808280c:	4770      	bxne	lr
 808280e:	f092 0f00 	teq	r2, #0
 8082812:	bf14      	ite	ne
 8082814:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082818:	4770      	bxeq	lr
 808281a:	b530      	push	{r4, r5, lr}
 808281c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8082820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082828:	e720      	b.n	808266c <__adddf3+0x138>
 808282a:	bf00      	nop

0808282c <__aeabi_ul2d>:
 808282c:	ea50 0201 	orrs.w	r2, r0, r1
 8082830:	bf08      	it	eq
 8082832:	4770      	bxeq	lr
 8082834:	b530      	push	{r4, r5, lr}
 8082836:	f04f 0500 	mov.w	r5, #0
 808283a:	e00a      	b.n	8082852 <__aeabi_l2d+0x16>

0808283c <__aeabi_l2d>:
 808283c:	ea50 0201 	orrs.w	r2, r0, r1
 8082840:	bf08      	it	eq
 8082842:	4770      	bxeq	lr
 8082844:	b530      	push	{r4, r5, lr}
 8082846:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808284a:	d502      	bpl.n	8082852 <__aeabi_l2d+0x16>
 808284c:	4240      	negs	r0, r0
 808284e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082852:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082856:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808285a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808285e:	f43f aedc 	beq.w	808261a <__adddf3+0xe6>
 8082862:	f04f 0203 	mov.w	r2, #3
 8082866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808286a:	bf18      	it	ne
 808286c:	3203      	addne	r2, #3
 808286e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082872:	bf18      	it	ne
 8082874:	3203      	addne	r2, #3
 8082876:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808287a:	f1c2 0320 	rsb	r3, r2, #32
 808287e:	fa00 fc03 	lsl.w	ip, r0, r3
 8082882:	fa20 f002 	lsr.w	r0, r0, r2
 8082886:	fa01 fe03 	lsl.w	lr, r1, r3
 808288a:	ea40 000e 	orr.w	r0, r0, lr
 808288e:	fa21 f102 	lsr.w	r1, r1, r2
 8082892:	4414      	add	r4, r2
 8082894:	e6c1      	b.n	808261a <__adddf3+0xe6>
 8082896:	bf00      	nop

08082898 <__aeabi_dmul>:
 8082898:	b570      	push	{r4, r5, r6, lr}
 808289a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808289e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80828a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80828a6:	bf1d      	ittte	ne
 80828a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80828ac:	ea94 0f0c 	teqne	r4, ip
 80828b0:	ea95 0f0c 	teqne	r5, ip
 80828b4:	f000 f8de 	bleq	8082a74 <__aeabi_dmul+0x1dc>
 80828b8:	442c      	add	r4, r5
 80828ba:	ea81 0603 	eor.w	r6, r1, r3
 80828be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80828c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80828c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80828ca:	bf18      	it	ne
 80828cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80828d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80828d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80828d8:	d038      	beq.n	808294c <__aeabi_dmul+0xb4>
 80828da:	fba0 ce02 	umull	ip, lr, r0, r2
 80828de:	f04f 0500 	mov.w	r5, #0
 80828e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80828e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80828ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80828ee:	f04f 0600 	mov.w	r6, #0
 80828f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80828f6:	f09c 0f00 	teq	ip, #0
 80828fa:	bf18      	it	ne
 80828fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8082900:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8082904:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082908:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808290c:	d204      	bcs.n	8082918 <__aeabi_dmul+0x80>
 808290e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8082912:	416d      	adcs	r5, r5
 8082914:	eb46 0606 	adc.w	r6, r6, r6
 8082918:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808291c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8082920:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082924:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082928:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808292c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082930:	bf88      	it	hi
 8082932:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082936:	d81e      	bhi.n	8082976 <__aeabi_dmul+0xde>
 8082938:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808293c:	bf08      	it	eq
 808293e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8082942:	f150 0000 	adcs.w	r0, r0, #0
 8082946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808294a:	bd70      	pop	{r4, r5, r6, pc}
 808294c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8082950:	ea46 0101 	orr.w	r1, r6, r1
 8082954:	ea40 0002 	orr.w	r0, r0, r2
 8082958:	ea81 0103 	eor.w	r1, r1, r3
 808295c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8082960:	bfc2      	ittt	gt
 8082962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808296a:	bd70      	popgt	{r4, r5, r6, pc}
 808296c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082970:	f04f 0e00 	mov.w	lr, #0
 8082974:	3c01      	subs	r4, #1
 8082976:	f300 80ab 	bgt.w	8082ad0 <__aeabi_dmul+0x238>
 808297a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808297e:	bfde      	ittt	le
 8082980:	2000      	movle	r0, #0
 8082982:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8082986:	bd70      	pople	{r4, r5, r6, pc}
 8082988:	f1c4 0400 	rsb	r4, r4, #0
 808298c:	3c20      	subs	r4, #32
 808298e:	da35      	bge.n	80829fc <__aeabi_dmul+0x164>
 8082990:	340c      	adds	r4, #12
 8082992:	dc1b      	bgt.n	80829cc <__aeabi_dmul+0x134>
 8082994:	f104 0414 	add.w	r4, r4, #20
 8082998:	f1c4 0520 	rsb	r5, r4, #32
 808299c:	fa00 f305 	lsl.w	r3, r0, r5
 80829a0:	fa20 f004 	lsr.w	r0, r0, r4
 80829a4:	fa01 f205 	lsl.w	r2, r1, r5
 80829a8:	ea40 0002 	orr.w	r0, r0, r2
 80829ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80829b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80829b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80829b8:	fa21 f604 	lsr.w	r6, r1, r4
 80829bc:	eb42 0106 	adc.w	r1, r2, r6
 80829c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80829c4:	bf08      	it	eq
 80829c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80829ca:	bd70      	pop	{r4, r5, r6, pc}
 80829cc:	f1c4 040c 	rsb	r4, r4, #12
 80829d0:	f1c4 0520 	rsb	r5, r4, #32
 80829d4:	fa00 f304 	lsl.w	r3, r0, r4
 80829d8:	fa20 f005 	lsr.w	r0, r0, r5
 80829dc:	fa01 f204 	lsl.w	r2, r1, r4
 80829e0:	ea40 0002 	orr.w	r0, r0, r2
 80829e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80829e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80829ec:	f141 0100 	adc.w	r1, r1, #0
 80829f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80829f4:	bf08      	it	eq
 80829f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80829fa:	bd70      	pop	{r4, r5, r6, pc}
 80829fc:	f1c4 0520 	rsb	r5, r4, #32
 8082a00:	fa00 f205 	lsl.w	r2, r0, r5
 8082a04:	ea4e 0e02 	orr.w	lr, lr, r2
 8082a08:	fa20 f304 	lsr.w	r3, r0, r4
 8082a0c:	fa01 f205 	lsl.w	r2, r1, r5
 8082a10:	ea43 0302 	orr.w	r3, r3, r2
 8082a14:	fa21 f004 	lsr.w	r0, r1, r4
 8082a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082a1c:	fa21 f204 	lsr.w	r2, r1, r4
 8082a20:	ea20 0002 	bic.w	r0, r0, r2
 8082a24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8082a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082a2c:	bf08      	it	eq
 8082a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082a32:	bd70      	pop	{r4, r5, r6, pc}
 8082a34:	f094 0f00 	teq	r4, #0
 8082a38:	d10f      	bne.n	8082a5a <__aeabi_dmul+0x1c2>
 8082a3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8082a3e:	0040      	lsls	r0, r0, #1
 8082a40:	eb41 0101 	adc.w	r1, r1, r1
 8082a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082a48:	bf08      	it	eq
 8082a4a:	3c01      	subeq	r4, #1
 8082a4c:	d0f7      	beq.n	8082a3e <__aeabi_dmul+0x1a6>
 8082a4e:	ea41 0106 	orr.w	r1, r1, r6
 8082a52:	f095 0f00 	teq	r5, #0
 8082a56:	bf18      	it	ne
 8082a58:	4770      	bxne	lr
 8082a5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8082a5e:	0052      	lsls	r2, r2, #1
 8082a60:	eb43 0303 	adc.w	r3, r3, r3
 8082a64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8082a68:	bf08      	it	eq
 8082a6a:	3d01      	subeq	r5, #1
 8082a6c:	d0f7      	beq.n	8082a5e <__aeabi_dmul+0x1c6>
 8082a6e:	ea43 0306 	orr.w	r3, r3, r6
 8082a72:	4770      	bx	lr
 8082a74:	ea94 0f0c 	teq	r4, ip
 8082a78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082a7c:	bf18      	it	ne
 8082a7e:	ea95 0f0c 	teqne	r5, ip
 8082a82:	d00c      	beq.n	8082a9e <__aeabi_dmul+0x206>
 8082a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082a88:	bf18      	it	ne
 8082a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082a8e:	d1d1      	bne.n	8082a34 <__aeabi_dmul+0x19c>
 8082a90:	ea81 0103 	eor.w	r1, r1, r3
 8082a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082a98:	f04f 0000 	mov.w	r0, #0
 8082a9c:	bd70      	pop	{r4, r5, r6, pc}
 8082a9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082aa2:	bf06      	itte	eq
 8082aa4:	4610      	moveq	r0, r2
 8082aa6:	4619      	moveq	r1, r3
 8082aa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082aac:	d019      	beq.n	8082ae2 <__aeabi_dmul+0x24a>
 8082aae:	ea94 0f0c 	teq	r4, ip
 8082ab2:	d102      	bne.n	8082aba <__aeabi_dmul+0x222>
 8082ab4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8082ab8:	d113      	bne.n	8082ae2 <__aeabi_dmul+0x24a>
 8082aba:	ea95 0f0c 	teq	r5, ip
 8082abe:	d105      	bne.n	8082acc <__aeabi_dmul+0x234>
 8082ac0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8082ac4:	bf1c      	itt	ne
 8082ac6:	4610      	movne	r0, r2
 8082ac8:	4619      	movne	r1, r3
 8082aca:	d10a      	bne.n	8082ae2 <__aeabi_dmul+0x24a>
 8082acc:	ea81 0103 	eor.w	r1, r1, r3
 8082ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082ad4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082ad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082adc:	f04f 0000 	mov.w	r0, #0
 8082ae0:	bd70      	pop	{r4, r5, r6, pc}
 8082ae2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082ae6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8082aea:	bd70      	pop	{r4, r5, r6, pc}

08082aec <__aeabi_ddiv>:
 8082aec:	b570      	push	{r4, r5, r6, lr}
 8082aee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082af2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082af6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8082afa:	bf1d      	ittte	ne
 8082afc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082b00:	ea94 0f0c 	teqne	r4, ip
 8082b04:	ea95 0f0c 	teqne	r5, ip
 8082b08:	f000 f8a7 	bleq	8082c5a <__aeabi_ddiv+0x16e>
 8082b0c:	eba4 0405 	sub.w	r4, r4, r5
 8082b10:	ea81 0e03 	eor.w	lr, r1, r3
 8082b14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082b1c:	f000 8088 	beq.w	8082c30 <__aeabi_ddiv+0x144>
 8082b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082b24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8082b28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8082b2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8082b30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8082b34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8082b38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8082b3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8082b40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8082b44:	429d      	cmp	r5, r3
 8082b46:	bf08      	it	eq
 8082b48:	4296      	cmpeq	r6, r2
 8082b4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8082b4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8082b52:	d202      	bcs.n	8082b5a <__aeabi_ddiv+0x6e>
 8082b54:	085b      	lsrs	r3, r3, #1
 8082b56:	ea4f 0232 	mov.w	r2, r2, rrx
 8082b5a:	1ab6      	subs	r6, r6, r2
 8082b5c:	eb65 0503 	sbc.w	r5, r5, r3
 8082b60:	085b      	lsrs	r3, r3, #1
 8082b62:	ea4f 0232 	mov.w	r2, r2, rrx
 8082b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8082b6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8082b6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8082b72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082b76:	bf22      	ittt	cs
 8082b78:	1ab6      	subcs	r6, r6, r2
 8082b7a:	4675      	movcs	r5, lr
 8082b7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8082b80:	085b      	lsrs	r3, r3, #1
 8082b82:	ea4f 0232 	mov.w	r2, r2, rrx
 8082b86:	ebb6 0e02 	subs.w	lr, r6, r2
 8082b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082b8e:	bf22      	ittt	cs
 8082b90:	1ab6      	subcs	r6, r6, r2
 8082b92:	4675      	movcs	r5, lr
 8082b94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082b98:	085b      	lsrs	r3, r3, #1
 8082b9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8082b9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8082ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082ba6:	bf22      	ittt	cs
 8082ba8:	1ab6      	subcs	r6, r6, r2
 8082baa:	4675      	movcs	r5, lr
 8082bac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082bb0:	085b      	lsrs	r3, r3, #1
 8082bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8082bb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8082bba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082bbe:	bf22      	ittt	cs
 8082bc0:	1ab6      	subcs	r6, r6, r2
 8082bc2:	4675      	movcs	r5, lr
 8082bc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8082bc8:	ea55 0e06 	orrs.w	lr, r5, r6
 8082bcc:	d018      	beq.n	8082c00 <__aeabi_ddiv+0x114>
 8082bce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8082bd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8082bd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8082bda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8082bde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8082be2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8082be6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8082bea:	d1c0      	bne.n	8082b6e <__aeabi_ddiv+0x82>
 8082bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082bf0:	d10b      	bne.n	8082c0a <__aeabi_ddiv+0x11e>
 8082bf2:	ea41 0100 	orr.w	r1, r1, r0
 8082bf6:	f04f 0000 	mov.w	r0, #0
 8082bfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8082bfe:	e7b6      	b.n	8082b6e <__aeabi_ddiv+0x82>
 8082c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082c04:	bf04      	itt	eq
 8082c06:	4301      	orreq	r1, r0
 8082c08:	2000      	moveq	r0, #0
 8082c0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082c0e:	bf88      	it	hi
 8082c10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082c14:	f63f aeaf 	bhi.w	8082976 <__aeabi_dmul+0xde>
 8082c18:	ebb5 0c03 	subs.w	ip, r5, r3
 8082c1c:	bf04      	itt	eq
 8082c1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8082c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082c26:	f150 0000 	adcs.w	r0, r0, #0
 8082c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082c2e:	bd70      	pop	{r4, r5, r6, pc}
 8082c30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8082c34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8082c38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8082c3c:	bfc2      	ittt	gt
 8082c3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082c42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082c46:	bd70      	popgt	{r4, r5, r6, pc}
 8082c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082c4c:	f04f 0e00 	mov.w	lr, #0
 8082c50:	3c01      	subs	r4, #1
 8082c52:	e690      	b.n	8082976 <__aeabi_dmul+0xde>
 8082c54:	ea45 0e06 	orr.w	lr, r5, r6
 8082c58:	e68d      	b.n	8082976 <__aeabi_dmul+0xde>
 8082c5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082c5e:	ea94 0f0c 	teq	r4, ip
 8082c62:	bf08      	it	eq
 8082c64:	ea95 0f0c 	teqeq	r5, ip
 8082c68:	f43f af3b 	beq.w	8082ae2 <__aeabi_dmul+0x24a>
 8082c6c:	ea94 0f0c 	teq	r4, ip
 8082c70:	d10a      	bne.n	8082c88 <__aeabi_ddiv+0x19c>
 8082c72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082c76:	f47f af34 	bne.w	8082ae2 <__aeabi_dmul+0x24a>
 8082c7a:	ea95 0f0c 	teq	r5, ip
 8082c7e:	f47f af25 	bne.w	8082acc <__aeabi_dmul+0x234>
 8082c82:	4610      	mov	r0, r2
 8082c84:	4619      	mov	r1, r3
 8082c86:	e72c      	b.n	8082ae2 <__aeabi_dmul+0x24a>
 8082c88:	ea95 0f0c 	teq	r5, ip
 8082c8c:	d106      	bne.n	8082c9c <__aeabi_ddiv+0x1b0>
 8082c8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082c92:	f43f aefd 	beq.w	8082a90 <__aeabi_dmul+0x1f8>
 8082c96:	4610      	mov	r0, r2
 8082c98:	4619      	mov	r1, r3
 8082c9a:	e722      	b.n	8082ae2 <__aeabi_dmul+0x24a>
 8082c9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082ca0:	bf18      	it	ne
 8082ca2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082ca6:	f47f aec5 	bne.w	8082a34 <__aeabi_dmul+0x19c>
 8082caa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8082cae:	f47f af0d 	bne.w	8082acc <__aeabi_dmul+0x234>
 8082cb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8082cb6:	f47f aeeb 	bne.w	8082a90 <__aeabi_dmul+0x1f8>
 8082cba:	e712      	b.n	8082ae2 <__aeabi_dmul+0x24a>

08082cbc <__aeabi_d2iz>:
 8082cbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8082cc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082cc4:	d215      	bcs.n	8082cf2 <__aeabi_d2iz+0x36>
 8082cc6:	d511      	bpl.n	8082cec <__aeabi_d2iz+0x30>
 8082cc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8082ccc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082cd0:	d912      	bls.n	8082cf8 <__aeabi_d2iz+0x3c>
 8082cd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082cda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8082cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082ce2:	fa23 f002 	lsr.w	r0, r3, r2
 8082ce6:	bf18      	it	ne
 8082ce8:	4240      	negne	r0, r0
 8082cea:	4770      	bx	lr
 8082cec:	f04f 0000 	mov.w	r0, #0
 8082cf0:	4770      	bx	lr
 8082cf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8082cf6:	d105      	bne.n	8082d04 <__aeabi_d2iz+0x48>
 8082cf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8082cfc:	bf08      	it	eq
 8082cfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8082d02:	4770      	bx	lr
 8082d04:	f04f 0000 	mov.w	r0, #0
 8082d08:	4770      	bx	lr
 8082d0a:	bf00      	nop

08082d0c <__aeabi_d2f>:
 8082d0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8082d10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8082d14:	bf24      	itt	cs
 8082d16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8082d1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8082d1e:	d90d      	bls.n	8082d3c <__aeabi_d2f+0x30>
 8082d20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082d24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8082d28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8082d2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8082d30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8082d34:	bf08      	it	eq
 8082d36:	f020 0001 	biceq.w	r0, r0, #1
 8082d3a:	4770      	bx	lr
 8082d3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8082d40:	d121      	bne.n	8082d86 <__aeabi_d2f+0x7a>
 8082d42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8082d46:	bfbc      	itt	lt
 8082d48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8082d4c:	4770      	bxlt	lr
 8082d4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082d52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8082d56:	f1c2 0218 	rsb	r2, r2, #24
 8082d5a:	f1c2 0c20 	rsb	ip, r2, #32
 8082d5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8082d62:	fa20 f002 	lsr.w	r0, r0, r2
 8082d66:	bf18      	it	ne
 8082d68:	f040 0001 	orrne.w	r0, r0, #1
 8082d6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082d70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8082d74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8082d78:	ea40 000c 	orr.w	r0, r0, ip
 8082d7c:	fa23 f302 	lsr.w	r3, r3, r2
 8082d80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8082d84:	e7cc      	b.n	8082d20 <__aeabi_d2f+0x14>
 8082d86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8082d8a:	d107      	bne.n	8082d9c <__aeabi_d2f+0x90>
 8082d8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8082d90:	bf1e      	ittt	ne
 8082d92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8082d96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8082d9a:	4770      	bxne	lr
 8082d9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8082da0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082da8:	4770      	bx	lr
 8082daa:	bf00      	nop

08082dac <__aeabi_frsub>:
 8082dac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8082db0:	e002      	b.n	8082db8 <__addsf3>
 8082db2:	bf00      	nop

08082db4 <__aeabi_fsub>:
 8082db4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08082db8 <__addsf3>:
 8082db8:	0042      	lsls	r2, r0, #1
 8082dba:	bf1f      	itttt	ne
 8082dbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8082dc0:	ea92 0f03 	teqne	r2, r3
 8082dc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8082dc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082dcc:	d06a      	beq.n	8082ea4 <__addsf3+0xec>
 8082dce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8082dd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8082dd6:	bfc1      	itttt	gt
 8082dd8:	18d2      	addgt	r2, r2, r3
 8082dda:	4041      	eorgt	r1, r0
 8082ddc:	4048      	eorgt	r0, r1
 8082dde:	4041      	eorgt	r1, r0
 8082de0:	bfb8      	it	lt
 8082de2:	425b      	neglt	r3, r3
 8082de4:	2b19      	cmp	r3, #25
 8082de6:	bf88      	it	hi
 8082de8:	4770      	bxhi	lr
 8082dea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8082dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082df2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8082df6:	bf18      	it	ne
 8082df8:	4240      	negne	r0, r0
 8082dfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082dfe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8082e02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8082e06:	bf18      	it	ne
 8082e08:	4249      	negne	r1, r1
 8082e0a:	ea92 0f03 	teq	r2, r3
 8082e0e:	d03f      	beq.n	8082e90 <__addsf3+0xd8>
 8082e10:	f1a2 0201 	sub.w	r2, r2, #1
 8082e14:	fa41 fc03 	asr.w	ip, r1, r3
 8082e18:	eb10 000c 	adds.w	r0, r0, ip
 8082e1c:	f1c3 0320 	rsb	r3, r3, #32
 8082e20:	fa01 f103 	lsl.w	r1, r1, r3
 8082e24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082e28:	d502      	bpl.n	8082e30 <__addsf3+0x78>
 8082e2a:	4249      	negs	r1, r1
 8082e2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8082e30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8082e34:	d313      	bcc.n	8082e5e <__addsf3+0xa6>
 8082e36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8082e3a:	d306      	bcc.n	8082e4a <__addsf3+0x92>
 8082e3c:	0840      	lsrs	r0, r0, #1
 8082e3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8082e42:	f102 0201 	add.w	r2, r2, #1
 8082e46:	2afe      	cmp	r2, #254	; 0xfe
 8082e48:	d251      	bcs.n	8082eee <__addsf3+0x136>
 8082e4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8082e4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082e52:	bf08      	it	eq
 8082e54:	f020 0001 	biceq.w	r0, r0, #1
 8082e58:	ea40 0003 	orr.w	r0, r0, r3
 8082e5c:	4770      	bx	lr
 8082e5e:	0049      	lsls	r1, r1, #1
 8082e60:	eb40 0000 	adc.w	r0, r0, r0
 8082e64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8082e68:	f1a2 0201 	sub.w	r2, r2, #1
 8082e6c:	d1ed      	bne.n	8082e4a <__addsf3+0x92>
 8082e6e:	fab0 fc80 	clz	ip, r0
 8082e72:	f1ac 0c08 	sub.w	ip, ip, #8
 8082e76:	ebb2 020c 	subs.w	r2, r2, ip
 8082e7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8082e7e:	bfaa      	itet	ge
 8082e80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8082e84:	4252      	neglt	r2, r2
 8082e86:	4318      	orrge	r0, r3
 8082e88:	bfbc      	itt	lt
 8082e8a:	40d0      	lsrlt	r0, r2
 8082e8c:	4318      	orrlt	r0, r3
 8082e8e:	4770      	bx	lr
 8082e90:	f092 0f00 	teq	r2, #0
 8082e94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8082e98:	bf06      	itte	eq
 8082e9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8082e9e:	3201      	addeq	r2, #1
 8082ea0:	3b01      	subne	r3, #1
 8082ea2:	e7b5      	b.n	8082e10 <__addsf3+0x58>
 8082ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082eac:	bf18      	it	ne
 8082eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082eb2:	d021      	beq.n	8082ef8 <__addsf3+0x140>
 8082eb4:	ea92 0f03 	teq	r2, r3
 8082eb8:	d004      	beq.n	8082ec4 <__addsf3+0x10c>
 8082eba:	f092 0f00 	teq	r2, #0
 8082ebe:	bf08      	it	eq
 8082ec0:	4608      	moveq	r0, r1
 8082ec2:	4770      	bx	lr
 8082ec4:	ea90 0f01 	teq	r0, r1
 8082ec8:	bf1c      	itt	ne
 8082eca:	2000      	movne	r0, #0
 8082ecc:	4770      	bxne	lr
 8082ece:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082ed2:	d104      	bne.n	8082ede <__addsf3+0x126>
 8082ed4:	0040      	lsls	r0, r0, #1
 8082ed6:	bf28      	it	cs
 8082ed8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8082edc:	4770      	bx	lr
 8082ede:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082ee2:	bf3c      	itt	cc
 8082ee4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8082ee8:	4770      	bxcc	lr
 8082eea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082eee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082ef2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082ef6:	4770      	bx	lr
 8082ef8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8082efc:	bf16      	itet	ne
 8082efe:	4608      	movne	r0, r1
 8082f00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082f04:	4601      	movne	r1, r0
 8082f06:	0242      	lsls	r2, r0, #9
 8082f08:	bf06      	itte	eq
 8082f0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8082f0e:	ea90 0f01 	teqeq	r0, r1
 8082f12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8082f16:	4770      	bx	lr

08082f18 <__aeabi_ui2f>:
 8082f18:	f04f 0300 	mov.w	r3, #0
 8082f1c:	e004      	b.n	8082f28 <__aeabi_i2f+0x8>
 8082f1e:	bf00      	nop

08082f20 <__aeabi_i2f>:
 8082f20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8082f24:	bf48      	it	mi
 8082f26:	4240      	negmi	r0, r0
 8082f28:	ea5f 0c00 	movs.w	ip, r0
 8082f2c:	bf08      	it	eq
 8082f2e:	4770      	bxeq	lr
 8082f30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8082f34:	4601      	mov	r1, r0
 8082f36:	f04f 0000 	mov.w	r0, #0
 8082f3a:	e01c      	b.n	8082f76 <__aeabi_l2f+0x2a>

08082f3c <__aeabi_ul2f>:
 8082f3c:	ea50 0201 	orrs.w	r2, r0, r1
 8082f40:	bf08      	it	eq
 8082f42:	4770      	bxeq	lr
 8082f44:	f04f 0300 	mov.w	r3, #0
 8082f48:	e00a      	b.n	8082f60 <__aeabi_l2f+0x14>
 8082f4a:	bf00      	nop

08082f4c <__aeabi_l2f>:
 8082f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8082f50:	bf08      	it	eq
 8082f52:	4770      	bxeq	lr
 8082f54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8082f58:	d502      	bpl.n	8082f60 <__aeabi_l2f+0x14>
 8082f5a:	4240      	negs	r0, r0
 8082f5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082f60:	ea5f 0c01 	movs.w	ip, r1
 8082f64:	bf02      	ittt	eq
 8082f66:	4684      	moveq	ip, r0
 8082f68:	4601      	moveq	r1, r0
 8082f6a:	2000      	moveq	r0, #0
 8082f6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082f70:	bf08      	it	eq
 8082f72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082f76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8082f7a:	fabc f28c 	clz	r2, ip
 8082f7e:	3a08      	subs	r2, #8
 8082f80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082f84:	db10      	blt.n	8082fa8 <__aeabi_l2f+0x5c>
 8082f86:	fa01 fc02 	lsl.w	ip, r1, r2
 8082f8a:	4463      	add	r3, ip
 8082f8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8082f90:	f1c2 0220 	rsb	r2, r2, #32
 8082f94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082f98:	fa20 f202 	lsr.w	r2, r0, r2
 8082f9c:	eb43 0002 	adc.w	r0, r3, r2
 8082fa0:	bf08      	it	eq
 8082fa2:	f020 0001 	biceq.w	r0, r0, #1
 8082fa6:	4770      	bx	lr
 8082fa8:	f102 0220 	add.w	r2, r2, #32
 8082fac:	fa01 fc02 	lsl.w	ip, r1, r2
 8082fb0:	f1c2 0220 	rsb	r2, r2, #32
 8082fb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082fb8:	fa21 f202 	lsr.w	r2, r1, r2
 8082fbc:	eb43 0002 	adc.w	r0, r3, r2
 8082fc0:	bf08      	it	eq
 8082fc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082fc6:	4770      	bx	lr

08082fc8 <__aeabi_fmul>:
 8082fc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082fcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082fd0:	bf1e      	ittt	ne
 8082fd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082fd6:	ea92 0f0c 	teqne	r2, ip
 8082fda:	ea93 0f0c 	teqne	r3, ip
 8082fde:	d06f      	beq.n	80830c0 <__aeabi_fmul+0xf8>
 8082fe0:	441a      	add	r2, r3
 8082fe2:	ea80 0c01 	eor.w	ip, r0, r1
 8082fe6:	0240      	lsls	r0, r0, #9
 8082fe8:	bf18      	it	ne
 8082fea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8082fee:	d01e      	beq.n	808302e <__aeabi_fmul+0x66>
 8082ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8082ff4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8082ff8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8082ffc:	fba0 3101 	umull	r3, r1, r0, r1
 8083000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083004:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083008:	bf3e      	ittt	cc
 808300a:	0049      	lslcc	r1, r1, #1
 808300c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083010:	005b      	lslcc	r3, r3, #1
 8083012:	ea40 0001 	orr.w	r0, r0, r1
 8083016:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808301a:	2afd      	cmp	r2, #253	; 0xfd
 808301c:	d81d      	bhi.n	808305a <__aeabi_fmul+0x92>
 808301e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083022:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083026:	bf08      	it	eq
 8083028:	f020 0001 	biceq.w	r0, r0, #1
 808302c:	4770      	bx	lr
 808302e:	f090 0f00 	teq	r0, #0
 8083032:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083036:	bf08      	it	eq
 8083038:	0249      	lsleq	r1, r1, #9
 808303a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808303e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083042:	3a7f      	subs	r2, #127	; 0x7f
 8083044:	bfc2      	ittt	gt
 8083046:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808304a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808304e:	4770      	bxgt	lr
 8083050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083054:	f04f 0300 	mov.w	r3, #0
 8083058:	3a01      	subs	r2, #1
 808305a:	dc5d      	bgt.n	8083118 <__aeabi_fmul+0x150>
 808305c:	f112 0f19 	cmn.w	r2, #25
 8083060:	bfdc      	itt	le
 8083062:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083066:	4770      	bxle	lr
 8083068:	f1c2 0200 	rsb	r2, r2, #0
 808306c:	0041      	lsls	r1, r0, #1
 808306e:	fa21 f102 	lsr.w	r1, r1, r2
 8083072:	f1c2 0220 	rsb	r2, r2, #32
 8083076:	fa00 fc02 	lsl.w	ip, r0, r2
 808307a:	ea5f 0031 	movs.w	r0, r1, rrx
 808307e:	f140 0000 	adc.w	r0, r0, #0
 8083082:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083086:	bf08      	it	eq
 8083088:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808308c:	4770      	bx	lr
 808308e:	f092 0f00 	teq	r2, #0
 8083092:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083096:	bf02      	ittt	eq
 8083098:	0040      	lsleq	r0, r0, #1
 808309a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808309e:	3a01      	subeq	r2, #1
 80830a0:	d0f9      	beq.n	8083096 <__aeabi_fmul+0xce>
 80830a2:	ea40 000c 	orr.w	r0, r0, ip
 80830a6:	f093 0f00 	teq	r3, #0
 80830aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80830ae:	bf02      	ittt	eq
 80830b0:	0049      	lsleq	r1, r1, #1
 80830b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80830b6:	3b01      	subeq	r3, #1
 80830b8:	d0f9      	beq.n	80830ae <__aeabi_fmul+0xe6>
 80830ba:	ea41 010c 	orr.w	r1, r1, ip
 80830be:	e78f      	b.n	8082fe0 <__aeabi_fmul+0x18>
 80830c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80830c4:	ea92 0f0c 	teq	r2, ip
 80830c8:	bf18      	it	ne
 80830ca:	ea93 0f0c 	teqne	r3, ip
 80830ce:	d00a      	beq.n	80830e6 <__aeabi_fmul+0x11e>
 80830d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80830d4:	bf18      	it	ne
 80830d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80830da:	d1d8      	bne.n	808308e <__aeabi_fmul+0xc6>
 80830dc:	ea80 0001 	eor.w	r0, r0, r1
 80830e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80830e4:	4770      	bx	lr
 80830e6:	f090 0f00 	teq	r0, #0
 80830ea:	bf17      	itett	ne
 80830ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80830f0:	4608      	moveq	r0, r1
 80830f2:	f091 0f00 	teqne	r1, #0
 80830f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80830fa:	d014      	beq.n	8083126 <__aeabi_fmul+0x15e>
 80830fc:	ea92 0f0c 	teq	r2, ip
 8083100:	d101      	bne.n	8083106 <__aeabi_fmul+0x13e>
 8083102:	0242      	lsls	r2, r0, #9
 8083104:	d10f      	bne.n	8083126 <__aeabi_fmul+0x15e>
 8083106:	ea93 0f0c 	teq	r3, ip
 808310a:	d103      	bne.n	8083114 <__aeabi_fmul+0x14c>
 808310c:	024b      	lsls	r3, r1, #9
 808310e:	bf18      	it	ne
 8083110:	4608      	movne	r0, r1
 8083112:	d108      	bne.n	8083126 <__aeabi_fmul+0x15e>
 8083114:	ea80 0001 	eor.w	r0, r0, r1
 8083118:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808311c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083120:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083124:	4770      	bx	lr
 8083126:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808312a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808312e:	4770      	bx	lr

08083130 <__aeabi_fdiv>:
 8083130:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083134:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083138:	bf1e      	ittt	ne
 808313a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808313e:	ea92 0f0c 	teqne	r2, ip
 8083142:	ea93 0f0c 	teqne	r3, ip
 8083146:	d069      	beq.n	808321c <__aeabi_fdiv+0xec>
 8083148:	eba2 0203 	sub.w	r2, r2, r3
 808314c:	ea80 0c01 	eor.w	ip, r0, r1
 8083150:	0249      	lsls	r1, r1, #9
 8083152:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8083156:	d037      	beq.n	80831c8 <__aeabi_fdiv+0x98>
 8083158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808315c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083160:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083164:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083168:	428b      	cmp	r3, r1
 808316a:	bf38      	it	cc
 808316c:	005b      	lslcc	r3, r3, #1
 808316e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083172:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8083176:	428b      	cmp	r3, r1
 8083178:	bf24      	itt	cs
 808317a:	1a5b      	subcs	r3, r3, r1
 808317c:	ea40 000c 	orrcs.w	r0, r0, ip
 8083180:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083184:	bf24      	itt	cs
 8083186:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808318a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808318e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8083192:	bf24      	itt	cs
 8083194:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8083198:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808319c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80831a0:	bf24      	itt	cs
 80831a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80831a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80831aa:	011b      	lsls	r3, r3, #4
 80831ac:	bf18      	it	ne
 80831ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80831b2:	d1e0      	bne.n	8083176 <__aeabi_fdiv+0x46>
 80831b4:	2afd      	cmp	r2, #253	; 0xfd
 80831b6:	f63f af50 	bhi.w	808305a <__aeabi_fmul+0x92>
 80831ba:	428b      	cmp	r3, r1
 80831bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80831c0:	bf08      	it	eq
 80831c2:	f020 0001 	biceq.w	r0, r0, #1
 80831c6:	4770      	bx	lr
 80831c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80831cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80831d0:	327f      	adds	r2, #127	; 0x7f
 80831d2:	bfc2      	ittt	gt
 80831d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80831d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80831dc:	4770      	bxgt	lr
 80831de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80831e2:	f04f 0300 	mov.w	r3, #0
 80831e6:	3a01      	subs	r2, #1
 80831e8:	e737      	b.n	808305a <__aeabi_fmul+0x92>
 80831ea:	f092 0f00 	teq	r2, #0
 80831ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80831f2:	bf02      	ittt	eq
 80831f4:	0040      	lsleq	r0, r0, #1
 80831f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80831fa:	3a01      	subeq	r2, #1
 80831fc:	d0f9      	beq.n	80831f2 <__aeabi_fdiv+0xc2>
 80831fe:	ea40 000c 	orr.w	r0, r0, ip
 8083202:	f093 0f00 	teq	r3, #0
 8083206:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808320a:	bf02      	ittt	eq
 808320c:	0049      	lsleq	r1, r1, #1
 808320e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083212:	3b01      	subeq	r3, #1
 8083214:	d0f9      	beq.n	808320a <__aeabi_fdiv+0xda>
 8083216:	ea41 010c 	orr.w	r1, r1, ip
 808321a:	e795      	b.n	8083148 <__aeabi_fdiv+0x18>
 808321c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083220:	ea92 0f0c 	teq	r2, ip
 8083224:	d108      	bne.n	8083238 <__aeabi_fdiv+0x108>
 8083226:	0242      	lsls	r2, r0, #9
 8083228:	f47f af7d 	bne.w	8083126 <__aeabi_fmul+0x15e>
 808322c:	ea93 0f0c 	teq	r3, ip
 8083230:	f47f af70 	bne.w	8083114 <__aeabi_fmul+0x14c>
 8083234:	4608      	mov	r0, r1
 8083236:	e776      	b.n	8083126 <__aeabi_fmul+0x15e>
 8083238:	ea93 0f0c 	teq	r3, ip
 808323c:	d104      	bne.n	8083248 <__aeabi_fdiv+0x118>
 808323e:	024b      	lsls	r3, r1, #9
 8083240:	f43f af4c 	beq.w	80830dc <__aeabi_fmul+0x114>
 8083244:	4608      	mov	r0, r1
 8083246:	e76e      	b.n	8083126 <__aeabi_fmul+0x15e>
 8083248:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808324c:	bf18      	it	ne
 808324e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083252:	d1ca      	bne.n	80831ea <__aeabi_fdiv+0xba>
 8083254:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083258:	f47f af5c 	bne.w	8083114 <__aeabi_fmul+0x14c>
 808325c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083260:	f47f af3c 	bne.w	80830dc <__aeabi_fmul+0x114>
 8083264:	e75f      	b.n	8083126 <__aeabi_fmul+0x15e>
 8083266:	bf00      	nop

08083268 <__aeabi_f2iz>:
 8083268:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808326c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8083270:	d30f      	bcc.n	8083292 <__aeabi_f2iz+0x2a>
 8083272:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8083276:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808327a:	d90d      	bls.n	8083298 <__aeabi_f2iz+0x30>
 808327c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8083280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083284:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083288:	fa23 f002 	lsr.w	r0, r3, r2
 808328c:	bf18      	it	ne
 808328e:	4240      	negne	r0, r0
 8083290:	4770      	bx	lr
 8083292:	f04f 0000 	mov.w	r0, #0
 8083296:	4770      	bx	lr
 8083298:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808329c:	d101      	bne.n	80832a2 <__aeabi_f2iz+0x3a>
 808329e:	0242      	lsls	r2, r0, #9
 80832a0:	d105      	bne.n	80832ae <__aeabi_f2iz+0x46>
 80832a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80832a6:	bf08      	it	eq
 80832a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80832ac:	4770      	bx	lr
 80832ae:	f04f 0000 	mov.w	r0, #0
 80832b2:	4770      	bx	lr

080832b4 <__cxa_atexit>:
 80832b4:	b510      	push	{r4, lr}
 80832b6:	4c05      	ldr	r4, [pc, #20]	; (80832cc <__cxa_atexit+0x18>)
 80832b8:	4613      	mov	r3, r2
 80832ba:	b12c      	cbz	r4, 80832c8 <__cxa_atexit+0x14>
 80832bc:	460a      	mov	r2, r1
 80832be:	4601      	mov	r1, r0
 80832c0:	2002      	movs	r0, #2
 80832c2:	f3af 8000 	nop.w
 80832c6:	bd10      	pop	{r4, pc}
 80832c8:	4620      	mov	r0, r4
 80832ca:	bd10      	pop	{r4, pc}
 80832cc:	00000000 	.word	0x00000000

080832d0 <memcpy>:
 80832d0:	b510      	push	{r4, lr}
 80832d2:	1e43      	subs	r3, r0, #1
 80832d4:	440a      	add	r2, r1
 80832d6:	4291      	cmp	r1, r2
 80832d8:	d004      	beq.n	80832e4 <memcpy+0x14>
 80832da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80832de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80832e2:	e7f8      	b.n	80832d6 <memcpy+0x6>
 80832e4:	bd10      	pop	{r4, pc}

080832e6 <memset>:
 80832e6:	4603      	mov	r3, r0
 80832e8:	4402      	add	r2, r0
 80832ea:	4293      	cmp	r3, r2
 80832ec:	d002      	beq.n	80832f4 <memset+0xe>
 80832ee:	f803 1b01 	strb.w	r1, [r3], #1
 80832f2:	e7fa      	b.n	80832ea <memset+0x4>
 80832f4:	4770      	bx	lr
	...

080832f8 <srand>:
 80832f8:	b538      	push	{r3, r4, r5, lr}
 80832fa:	4b12      	ldr	r3, [pc, #72]	; (8083344 <srand+0x4c>)
 80832fc:	4605      	mov	r5, r0
 80832fe:	681c      	ldr	r4, [r3, #0]
 8083300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083302:	b9d3      	cbnz	r3, 808333a <srand+0x42>
 8083304:	2018      	movs	r0, #24
 8083306:	f7fd fe27 	bl	8080f58 <malloc>
 808330a:	f243 330e 	movw	r3, #13070	; 0x330e
 808330e:	63a0      	str	r0, [r4, #56]	; 0x38
 8083310:	8003      	strh	r3, [r0, #0]
 8083312:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8083316:	8043      	strh	r3, [r0, #2]
 8083318:	f241 2334 	movw	r3, #4660	; 0x1234
 808331c:	8083      	strh	r3, [r0, #4]
 808331e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8083322:	80c3      	strh	r3, [r0, #6]
 8083324:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083328:	8103      	strh	r3, [r0, #8]
 808332a:	2305      	movs	r3, #5
 808332c:	8143      	strh	r3, [r0, #10]
 808332e:	230b      	movs	r3, #11
 8083330:	8183      	strh	r3, [r0, #12]
 8083332:	2201      	movs	r2, #1
 8083334:	2300      	movs	r3, #0
 8083336:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808333a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808333c:	2200      	movs	r2, #0
 808333e:	611d      	str	r5, [r3, #16]
 8083340:	615a      	str	r2, [r3, #20]
 8083342:	bd38      	pop	{r3, r4, r5, pc}
 8083344:	20000468 	.word	0x20000468

08083348 <strcmp>:
 8083348:	f810 2b01 	ldrb.w	r2, [r0], #1
 808334c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8083350:	2a01      	cmp	r2, #1
 8083352:	bf28      	it	cs
 8083354:	429a      	cmpcs	r2, r3
 8083356:	d0f7      	beq.n	8083348 <strcmp>
 8083358:	1ad0      	subs	r0, r2, r3
 808335a:	4770      	bx	lr

0808335c <strdup>:
 808335c:	4b02      	ldr	r3, [pc, #8]	; (8083368 <strdup+0xc>)
 808335e:	4601      	mov	r1, r0
 8083360:	6818      	ldr	r0, [r3, #0]
 8083362:	f000 b803 	b.w	808336c <_strdup_r>
 8083366:	bf00      	nop
 8083368:	20000468 	.word	0x20000468

0808336c <_strdup_r>:
 808336c:	b570      	push	{r4, r5, r6, lr}
 808336e:	4606      	mov	r6, r0
 8083370:	4608      	mov	r0, r1
 8083372:	460c      	mov	r4, r1
 8083374:	f000 f80d 	bl	8083392 <strlen>
 8083378:	1c45      	adds	r5, r0, #1
 808337a:	4629      	mov	r1, r5
 808337c:	4630      	mov	r0, r6
 808337e:	f7fd fe13 	bl	8080fa8 <_malloc_r>
 8083382:	4606      	mov	r6, r0
 8083384:	b118      	cbz	r0, 808338e <_strdup_r+0x22>
 8083386:	462a      	mov	r2, r5
 8083388:	4621      	mov	r1, r4
 808338a:	f7ff ffa1 	bl	80832d0 <memcpy>
 808338e:	4630      	mov	r0, r6
 8083390:	bd70      	pop	{r4, r5, r6, pc}

08083392 <strlen>:
 8083392:	4603      	mov	r3, r0
 8083394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083398:	2a00      	cmp	r2, #0
 808339a:	d1fb      	bne.n	8083394 <strlen+0x2>
 808339c:	1a18      	subs	r0, r3, r0
 808339e:	3801      	subs	r0, #1
 80833a0:	4770      	bx	lr

080833a2 <link_code_end>:
	...

080833a4 <dynalib_user>:
 80833a4:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 80833b4:	0000 0000                                   ....

080833b8 <_ZL13releaseNumber>:
 80833b8:	2e30 3132 0000 6552 6573 7474 6e69 2067     0.21..Resetting 
 80833c8:	654d 6f6d 7972 3200 2535 6420 6e6f 0065     Memory.25% done.
 80833d8:	3035 2025 6f64 656e 3700 2535 6420 6e6f     50% done.75% don
 80833e8:	0065 6f44 656e 5200 6c65 6165 6573 7300     e.Done.Release.s
 80833f8:	6174 6574 664f 6843 0067 6148 6472 6552     tateOfChg.HardRe
 8083408:	6573 0074 6554 7473 4620 6961 656c 5264     set.Test FailedR
 8083418:	7365 7465 4420 7665 6369 2065 6f74 4320     eset Device to C
 8083428:	6e6f 6974 756e 0065 6542 6967 6e6e 6e69     ontinue.Beginnin
 8083438:	2067 6554 7473 5220 6e75 5400 7365 2074     g Test Run.Test 
 8083448:	7453 7261 0074 6146 6c69 6465 2d20 4d20     Start.Failed - M
 8083458:	7369 6973 676e 4620 4152 004d 6554 7473     issing FRAM.Test
 8083468:	2320 0031 6e49 7020 6f72 6563 7373 2d20      #1.In process -
 8083478:	4520 6172 6973 676e 4620 4152 004d 6146      Erasing FRAM.Fa
 8083488:	6c69 6465 2d20 4620 4152 204d 6552 6461     iled - FRAM Read
 8083498:	4520 7272 726f 4600 4152 204d 6554 7473      Error.FRAM Test
 80834a8:	5020 7361 6573 0064 6554 706d 7265 7461      Passed.Temperat
 80834b8:	7275 2065 7369 2520 4669 5400 7365 2074     ure is %iF.Test 
 80834c8:	3223 5000 6572 7373 5520 6573 2072 7753     #2.Press User Sw
 80834d8:	7469 6863 5400 7365 2074 3323 5500 6573     itch.Test #3.Use
 80834e8:	2072 7753 7469 6863 5020 6572 7373 4420     r Switch Press D
 80834f8:	7465 6365 6574 0064 7453 7261 6574 2064     etected.Started 
 8083508:	6574 7473 6e69 2067 6341 6563 656c 6f72     testing Accelero
 8083518:	656d 6574 2072 202d 6c70 2073 6177 7469     meter - pls wait
 8083528:	5400 7365 2074 3423 4100 6363 6c65 7265     .Test #4.Acceler
 8083538:	7461 6f69 206e 6144 6174 6920 2073 3a58     ation Data is X:
 8083548:	2520 2e32 6631 202c 3a59 2520 2e32 6631      %2.1f, Y: %2.1f
 8083558:	202c 3a5a 2520 2e32 6631 4200 7461 6574     , Z: %2.1f.Batte
 8083568:	7972 6320 6168 6772 2065 656c 6576 206c     ry charge level 
 8083578:	203d 6925 5400 7365 2074 3523 4200 7461     = %i.Test #5.Bat
 8083588:	6574 7972 6320 6168 6772 2065 6574 7473     tery charge test
 8083598:	7020 7361 6573 0064 6554 7473 2320 0036      passed.Test #6.
 80835a8:	7845 6570 7463 7420 6968 2073 6574 7473     Expect this test
 80835b8:	7420 206f 6174 656b 7e20 3036 6d20 6e69      to take ~60 min
 80835c8:	7475 7365 5400 7365 2074 3723 5320 6174     utes.Test #7 Sta
 80835d8:	7472 6465 4500 616c 7370 6465 7420 6d69     rted.Elapsed tim
 80835e8:	2065 6e69 6d20 6e69 7475 7365 6920 2073     e in minutes is 
 80835f8:	6925 5400 7365 2074 3723 4620 6e69 7369     %i.Test #7 Finis
 8083608:	6568 0064 6946 616e 206c 6554 7473 2d20     hed.Final Test -
 8083618:	4820 7261 2064 6552 6573 2074 6e69 3120      Hard Reset in 1
 8083628:	7320 6365 6e6f 0064 6554 7473 2320 0037      second.Test #7.
 8083638:	6649 7920 756f 7320 6565 7420 6968 2073     If you see this 
 8083648:	656d 7373 6761 2065 202d 6168 6472 7220     message - hard r
 8083658:	7365 7465 7420 7365 2074 6166 6c69 6465     eset test failed
 8083668:	0000 0000                                   ....

0808366c <_ZTVN5spark13CellularClassE>:
	...
 8083674:	1087 0808 107d 0808 1073 0808 0fe5 0808     ....}...s.......
 8083684:	1067 0808 105b 0808 104f 0808 1047 0808     g...[...O...G...
 8083694:	103d 0808 1033 0808 0fef 0808               =...3.......

080836a0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80836a8:	10d1 0808 10d7 0808 10ff 0808 10e3 0808     ................
 80836b8:	10d3 0808                                   ....

080836bc <_ZTV7TwoWire>:
	...
 80836c4:	1751 0808 179b 0808 1773 0808 1753 0808     Q.......s...S...
 80836d4:	177b 0808 1783 0808 178b 0808 1793 0808     {...............

080836e4 <_ZTV9IPAddress>:
	...
 80836ec:	18b3 0808 18a5 0808 18a7 0808 6e6c 6600     ............ln.f
 80836fc:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 808370c:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 808371c:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 808372c:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
 808373c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 808374c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 808375c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 808376c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 808377c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 808378c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 808379c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80837ac:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
 80837bc:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80837cc:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080837d8 <_ZTVN5spark12NetworkClassE>:
	...
 80837e0:	1951 0808 195b 0808 1965 0808 196f 0808     Q...[...e...o...
 80837f0:	1979 0808 1985 0808 1991 0808 199d 0808     y...............
 8083800:	19a5 0808 19af 0808 19b9 0808               ............

0808380c <_ZTV8SPIClass>:
	...
 8083814:	1b19 0808 1b1b 0808 005a 2b25 3330 3a64     ........Z.%+03d:
 8083824:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8083834:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8083844:	0000 0000                                   ....

08083848 <_ZTV11USARTSerial>:
	...
 8083850:	1cfd 0808 1d21 0808 1d2d 0808 1a19 0808     ....!...-.......
 8083860:	1d09 0808 1d15 0808 1d0f 0808 1d1b 0808     ................
 8083870:	1cff 0808 1d03 0808                         ........

08083878 <_ZTV9USBSerial>:
	...
 8083880:	1dd5 0808 1e19 0808 1df3 0808 1a19 0808     ................
 8083890:	1ded 0808 1dd7 0808 1ddf 0808 1e13 0808     ................
 80838a0:	1de7 0808 1dd1 0808                         ........

080838a8 <__sf_fake_stdin>:
	...

080838c8 <__sf_fake_stdout>:
	...

080838e8 <__sf_fake_stderr>:
	...
 8083908:	0043                                        C.

0808390a <link_const_variable_data_end>:
	...

0808390c <link_constructors_location>:
 808390c:	08080155 	.word	0x08080155
 8083910:	080807f1 	.word	0x080807f1
 8083914:	08080acb 	.word	0x08080acb
 8083918:	08081091 	.word	0x08081091
 808391c:	08081941 	.word	0x08081941
 8083920:	08081a05 	.word	0x08081a05
 8083924:	08081afd 	.word	0x08081afd
 8083928:	08081c65 	.word	0x08081c65
 808392c:	08081ce9 	.word	0x08081ce9
 8083930:	080821fd 	.word	0x080821fd
 8083934:	0808222d 	.word	0x0808222d
 8083938:	08082299 	.word	0x08082299
 808393c:	0808235d 	.word	0x0808235d
 8083940:	080823e1 	.word	0x080823e1
 8083944:	08082465 	.word	0x08082465

08083948 <link_constructors_end>:
	...
