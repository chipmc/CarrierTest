
/Users/chipmc/Documents/Maker/Particle/Projects/CarrierTest/target/CarrierTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003508  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08083520  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000400  08083524  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000614  2000046c  2000046c  0003046c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08083590  08083590  00023590  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080835b8  080835b8  000235b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a93fc  00000000  00000000  000235bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010440  00000000  00000000  000cc9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014185  00000000  00000000  000dcdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001f80  00000000  00000000  000f0f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003240  00000000  00000000  000f2efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026942  00000000  00000000  000f613d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025fd2  00000000  00000000  0011ca7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a49b5  00000000  00000000  00142a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ba48  00000000  00000000  001e7408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	d0 2f 08 08                                         ./..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 ff65 	bl	8082efc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f002 ff6a 	bl	8082f12 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08083524 	.word	0x08083524
 808004c:	2000046c 	.word	0x2000046c
 8080050:	2000046c 	.word	0x2000046c
 8080054:	20000a80 	.word	0x20000a80
 8080058:	20000a80 	.word	0x20000a80

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 fdff 	bl	8081c60 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	080834d8 	.word	0x080834d8
 8080084:	08083514 	.word	0x08083514

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b8da 	b.w	8080240 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f9dd 	bl	808044c <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 bda5 	b.w	8081be4 <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 bda3 	b.w	8080be4 <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 bda9 	b.w	8080bf4 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800b2:	6803      	ldr	r3, [r0, #0]
 80800b4:	b2c9      	uxtb	r1, r1
 80800b6:	689b      	ldr	r3, [r3, #8]
 80800b8:	4718      	bx	r3

080800ba <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800ba:	2200      	movs	r2, #0
 80800bc:	7042      	strb	r2, [r0, #1]
}
 80800be:	4770      	bx	lr

080800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
 80800c0:	b508      	push	{r3, lr}
  i2c_addr = addr;
 80800c2:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80800c4:	f001 fe70 	bl	8081da8 <_Z19__fetch_global_Wirev>
 80800c8:	f001 f9c6 	bl	8081458 <_ZN7TwoWire5beginEv>

  // Everything seems to be properly initialised and connected 
  _framInitialised = true;
*/
  return true;
}
 80800cc:	2001      	movs	r0, #1
 80800ce:	bd08      	pop	{r3, pc}

080800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800d0:	b570      	push	{r4, r5, r6, lr}
 80800d2:	4606      	mov	r6, r0
 80800d4:	460c      	mov	r4, r1
 80800d6:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800d8:	f001 fe66 	bl	8081da8 <_Z19__fetch_global_Wirev>
 80800dc:	7831      	ldrb	r1, [r6, #0]
 80800de:	f001 f9d2 	bl	8081486 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800e2:	f001 fe61 	bl	8081da8 <_Z19__fetch_global_Wirev>
 80800e6:	0a21      	lsrs	r1, r4, #8
 80800e8:	f7ff ffe3 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800ec:	f001 fe5c 	bl	8081da8 <_Z19__fetch_global_Wirev>
 80800f0:	b2e1      	uxtb	r1, r4
 80800f2:	f7ff ffde 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800f6:	f001 fe57 	bl	8081da8 <_Z19__fetch_global_Wirev>
 80800fa:	6803      	ldr	r3, [r0, #0]
 80800fc:	4629      	mov	r1, r5
 80800fe:	689b      	ldr	r3, [r3, #8]
 8080100:	4798      	blx	r3
  Wire.endTransmission();
 8080102:	f001 fe51 	bl	8081da8 <_Z19__fetch_global_Wirev>
}
 8080106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
 808010a:	f001 b9c7 	b.w	808149c <_ZN7TwoWire15endTransmissionEv>

0808010e <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 808010e:	b538      	push	{r3, r4, r5, lr}
 8080110:	4604      	mov	r4, r0
 8080112:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080114:	f001 fe48 	bl	8081da8 <_Z19__fetch_global_Wirev>
 8080118:	7821      	ldrb	r1, [r4, #0]
 808011a:	f001 f9b4 	bl	8081486 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 808011e:	f001 fe43 	bl	8081da8 <_Z19__fetch_global_Wirev>
 8080122:	0a29      	lsrs	r1, r5, #8
 8080124:	f7ff ffc5 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 8080128:	f001 fe3e 	bl	8081da8 <_Z19__fetch_global_Wirev>
 808012c:	b2e9      	uxtb	r1, r5
 808012e:	f7ff ffc0 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080132:	f001 fe39 	bl	8081da8 <_Z19__fetch_global_Wirev>
 8080136:	f001 f9b1 	bl	808149c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808013a:	f001 fe35 	bl	8081da8 <_Z19__fetch_global_Wirev>
 808013e:	2201      	movs	r2, #1
 8080140:	7821      	ldrb	r1, [r4, #0]
 8080142:	f001 f998 	bl	8081476 <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
 8080146:	f001 fe2f 	bl	8081da8 <_Z19__fetch_global_Wirev>
 808014a:	6803      	ldr	r3, [r0, #0]
 808014c:	695b      	ldr	r3, [r3, #20]
 808014e:	4798      	blx	r3
}
 8080150:	b2c0      	uxtb	r0, r0
 8080152:	bd38      	pop	{r3, r4, r5, pc}

08080154 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080154:	f000 bb4a 	b.w	80807ec <HAL_Pin_Map>

08080158 <_Z12hardResetNow6String>:
  }
}


int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
 8080158:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808015a:	4905      	ldr	r1, [pc, #20]	; (8080170 <_Z12hardResetNow6String+0x18>)
 808015c:	f001 fb85 	bl	808186a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080160:	b120      	cbz	r0, 808016c <_Z12hardResetNow6String+0x14>
  {
    digitalWrite(WIRING_hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
 8080162:	2004      	movs	r0, #4
 8080164:	2101      	movs	r1, #1
 8080166:	f001 fddc 	bl	8081d22 <digitalWrite>
 808016a:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 808016c:	bd08      	pop	{r3, pc}
 808016e:	bf00      	nop
 8080170:	08083096 	.word	0x08083096

08080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080176:	4605      	mov	r5, r0
 8080178:	f89d 4018 	ldrb.w	r4, [sp, #24]
 808017c:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808017e:	f88d 3000 	strb.w	r3, [sp]
 8080182:	233c      	movs	r3, #60	; 0x3c
 8080184:	f000 ff56 	bl	8081034 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 8080188:	4628      	mov	r0, r5
 808018a:	b003      	add	sp, #12
 808018c:	bd30      	pop	{r4, r5, pc}
	...

08080190 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 8080190:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080192:	f000 fb0b 	bl	80807ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080196:	4b03      	ldr	r3, [pc, #12]	; (80801a4 <_ZN10CloudClass7processEv+0x14>)
 8080198:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 808019a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 808019e:	f000 bca1 	b.w	8080ae4 <spark_process>
 80801a2:	bf00      	nop
 80801a4:	20000974 	.word	0x20000974

080801a8 <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 80801a8:	b281      	uxth	r1, r0
 80801aa:	4801      	ldr	r0, [pc, #4]	; (80801b0 <_Z9FRAMread8j+0x8>)
 80801ac:	f7ff bfaf 	b.w	808010e <_ZN17Adafruit_FRAM_I2C5read8Et>
 80801b0:	20000475 	.word	0x20000475

080801b4 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
 80801b4:	460a      	mov	r2, r1
 80801b6:	b281      	uxth	r1, r0
 80801b8:	4801      	ldr	r0, [pc, #4]	; (80801c0 <_Z10FRAMwrite8jh+0xc>)
 80801ba:	f7ff bf89 	b.w	80800d0 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80801be:	bf00      	nop
 80801c0:	20000475 	.word	0x20000475

080801c4 <_Z9ResetFRAMv>:
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 80801c4:	b510      	push	{r4, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    Serial.println("Resetting Memory");
 80801c6:	f001 fc6d 	bl	8081aa4 <_Z16_fetch_usbserialv>
 80801ca:	4918      	ldr	r1, [pc, #96]	; (808022c <_Z9ResetFRAMv+0x68>)
 80801cc:	f001 fa6f 	bl	80816ae <_ZN5Print7printlnEPKc>
    for (unsigned long i=4; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
 80801d0:	2404      	movs	r4, #4
        FRAMwrite8(i,0x0);
 80801d2:	2100      	movs	r1, #0
 80801d4:	4620      	mov	r0, r4
 80801d6:	f7ff ffed 	bl	80801b4 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 80801da:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80801de:	d103      	bne.n	80801e8 <_Z9ResetFRAMv+0x24>
 80801e0:	f001 fc60 	bl	8081aa4 <_Z16_fetch_usbserialv>
 80801e4:	4912      	ldr	r1, [pc, #72]	; (8080230 <_Z9ResetFRAMv+0x6c>)
 80801e6:	e014      	b.n	8080212 <_Z9ResetFRAMv+0x4e>
        if (i==16384) Serial.println(F("50% done"));
 80801e8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80801ec:	d103      	bne.n	80801f6 <_Z9ResetFRAMv+0x32>
 80801ee:	f001 fc59 	bl	8081aa4 <_Z16_fetch_usbserialv>
 80801f2:	4910      	ldr	r1, [pc, #64]	; (8080234 <_Z9ResetFRAMv+0x70>)
 80801f4:	e00d      	b.n	8080212 <_Z9ResetFRAMv+0x4e>
        if (i==(24576)) Serial.println(F("75% done"));
 80801f6:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 80801fa:	d103      	bne.n	8080204 <_Z9ResetFRAMv+0x40>
 80801fc:	f001 fc52 	bl	8081aa4 <_Z16_fetch_usbserialv>
 8080200:	490d      	ldr	r1, [pc, #52]	; (8080238 <_Z9ResetFRAMv+0x74>)
 8080202:	e006      	b.n	8080212 <_Z9ResetFRAMv+0x4e>
        if (i==32767) Serial.println(F("Done"));
 8080204:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8080208:	429c      	cmp	r4, r3
 808020a:	d104      	bne.n	8080216 <_Z9ResetFRAMv+0x52>
 808020c:	f001 fc4a 	bl	8081aa4 <_Z16_fetch_usbserialv>
 8080210:	490a      	ldr	r1, [pc, #40]	; (808023c <_Z9ResetFRAMv+0x78>)
 8080212:	f001 fa4c 	bl	80816ae <_ZN5Print7printlnEPKc>

void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    Serial.println("Resetting Memory");
    for (unsigned long i=4; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
 8080216:	3401      	adds	r4, #1
 8080218:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 808021c:	d1d9      	bne.n	80801d2 <_Z9ResetFRAMv+0xe>
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 808021e:	2107      	movs	r1, #7
 8080220:	2000      	movs	r0, #0
}
 8080222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 8080226:	f7ff bfc5 	b.w	80801b4 <_Z10FRAMwrite8jh>
 808022a:	bf00      	nop
 808022c:	08082fea 	.word	0x08082fea
 8080230:	08082ffb 	.word	0x08082ffb
 8080234:	08083004 	.word	0x08083004
 8080238:	0808300d 	.word	0x0808300d
 808023c:	08083016 	.word	0x08083016

08080240 <setup>:
int stateOfCharge = 0;            // stores battery charge level value



// setup() runs once, when the device is first turned on.
void setup() {
 8080240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pinMode(WIRING_int2Pin,INPUT);                                          // PIR Sensor Interrupt pin
 8080242:	2100      	movs	r1, #0
 8080244:	2002      	movs	r0, #2
 8080246:	f001 fd5b 	bl	8081d00 <pinMode>
  pinMode(WIRING_userSwitch,INPUT);                                      // Button for user input
 808024a:	2100      	movs	r1, #0
 808024c:	2005      	movs	r0, #5
 808024e:	f001 fd57 	bl	8081d00 <pinMode>
  pinMode(WIRING_wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080252:	2100      	movs	r1, #0
 8080254:	2011      	movs	r0, #17
 8080256:	f001 fd53 	bl	8081d00 <pinMode>
  pinMode(WIRING_blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 808025a:	2101      	movs	r1, #1
 808025c:	2007      	movs	r0, #7
 808025e:	f001 fd4f 	bl	8081d00 <pinMode>
  pinMode(WIRING_tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 8080262:	2101      	movs	r1, #1
 8080264:	201d      	movs	r0, #29
 8080266:	f001 fd4b 	bl	8081d00 <pinMode>
  digitalWrite(WIRING_tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 808026a:	2101      	movs	r1, #1
 808026c:	201d      	movs	r0, #29
 808026e:	f001 fd58 	bl	8081d22 <digitalWrite>
  pinMode(WIRING_donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8080272:	2101      	movs	r1, #1
 8080274:	2006      	movs	r0, #6
 8080276:	f001 fd43 	bl	8081d00 <pinMode>
  digitalWrite(WIRING_donePin,HIGH);
 808027a:	2101      	movs	r1, #1
 808027c:	2006      	movs	r0, #6
 808027e:	f001 fd50 	bl	8081d22 <digitalWrite>
  digitalWrite(WIRING_donePin,LOW);                                      // Pet the watchdog
 8080282:	2100      	movs	r1, #0
 8080284:	2006      	movs	r0, #6
 8080286:	f001 fd4c 	bl	8081d22 <digitalWrite>
  pinMode(WIRING_hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 808028a:	2101      	movs	r1, #1
 808028c:	2004      	movs	r0, #4
 808028e:	f001 fd37 	bl	8081d00 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080292:	2300      	movs	r3, #0
 8080294:	2204      	movs	r2, #4
 8080296:	491c      	ldr	r1, [pc, #112]	; (8080308 <setup+0xc8>)
 8080298:	481c      	ldr	r0, [pc, #112]	; (808030c <setup+0xcc>)
 808029a:	f000 fc13 	bl	8080ac4 <spark_variable>
 808029e:	2300      	movs	r3, #0
 80802a0:	2202      	movs	r2, #2
 80802a2:	491b      	ldr	r1, [pc, #108]	; (8080310 <setup+0xd0>)
 80802a4:	481b      	ldr	r0, [pc, #108]	; (8080314 <setup+0xd4>)
 80802a6:	f000 fc0d 	bl	8080ac4 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80802aa:	4a1b      	ldr	r2, [pc, #108]	; (8080318 <setup+0xd8>)
 80802ac:	491b      	ldr	r1, [pc, #108]	; (808031c <setup+0xdc>)
 80802ae:	481c      	ldr	r0, [pc, #112]	; (8080320 <setup+0xe0>)
 80802b0:	f000 fda0 	bl	8080df4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802b4:	f000 fc26 	bl	8080b04 <spark_cloud_flag_connected>

  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", stateOfCharge);
  Particle.function("HardReset",hardResetNow);

  if (!Particle.connected()) {                                     // Only going to connect if we are in connectionMode
 80802b8:	4604      	mov	r4, r0
 80802ba:	b9e0      	cbnz	r0, 80802f6 <setup+0xb6>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80802bc:	f000 fc1a 	bl	8080af4 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802c0:	4620      	mov	r0, r4
 80802c2:	f000 fa8b 	bl	80807dc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802c6:	4604      	mov	r4, r0
 80802c8:	4e16      	ldr	r6, [pc, #88]	; (8080324 <setup+0xe4>)
 80802ca:	2500      	movs	r5, #0
 80802cc:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802ce:	2000      	movs	r0, #0
 80802d0:	f000 fa84 	bl	80807dc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802d4:	1b00      	subs	r0, r0, r4
 80802d6:	eb61 0105 	sbc.w	r1, r1, r5
 80802da:	428f      	cmp	r7, r1
 80802dc:	bf08      	it	eq
 80802de:	4286      	cmpeq	r6, r0
 80802e0:	d305      	bcc.n	80802ee <setup+0xae>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802e2:	f000 fc0f 	bl	8080b04 <spark_cloud_flag_connected>
 80802e6:	b910      	cbnz	r0, 80802ee <setup+0xae>
            spark_process();
 80802e8:	f000 fbfc 	bl	8080ae4 <spark_process>
 80802ec:	e7ef      	b.n	80802ce <setup+0x8e>
 80802ee:	f000 fc09 	bl	8080b04 <spark_cloud_flag_connected>
    Particle.connect();
    waitFor(Particle.connected,90000);                             // 60 seconds then we timeout  -- *** need to add disconnected option and test
    Particle.process();
 80802f2:	f7ff ff4d 	bl	8080190 <_ZN10CloudClass7processEv>
  }

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 80802f6:	480c      	ldr	r0, [pc, #48]	; (8080328 <setup+0xe8>)
 80802f8:	f001 f84c 	bl	8081394 <_ZN9FuelGauge6getSoCEv>
 80802fc:	f002 fdca 	bl	8082e94 <__aeabi_f2iz>
 8080300:	4b03      	ldr	r3, [pc, #12]	; (8080310 <setup+0xd0>)
 8080302:	6018      	str	r0, [r3, #0]
}
 8080304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080306:	bf00      	nop
 8080308:	08082fe4 	.word	0x08082fe4
 808030c:	0808301b 	.word	0x0808301b
 8080310:	20000488 	.word	0x20000488
 8080314:	08083023 	.word	0x08083023
 8080318:	0808302e 	.word	0x0808302e
 808031c:	08080159 	.word	0x08080159
 8080320:	08080dc9 	.word	0x08080dc9
 8080324:	00015f8f 	.word	0x00015f8f
 8080328:	20000478 	.word	0x20000478
 808032c:	00000000 	.word	0x00000000

08080330 <_Z14getTemperaturev>:
  Particle.publish("Test #7", "If you see this message - hard reset test failed", PRIVATE);
  BlinkForever();
}

int getTemperature()
{
 8080330:	b508      	push	{r3, lr}
  int reading = analogRead(WIRING_tmp36Pin);   //getting the voltage reading from the temperature sensor
 8080332:	200a      	movs	r0, #10
 8080334:	f001 fd21 	bl	8081d7a <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080338:	f002 f85e 	bl	80823f8 <__aeabi_i2d>
 808033c:	a314      	add	r3, pc, #80	; (adr r3, 8080390 <_Z14getTemperaturev+0x60>)
 808033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080342:	f002 f8bf 	bl	80824c4 <__aeabi_dmul>
 8080346:	f002 faf7 	bl	8082938 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 808034a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 808034e:	f002 fc51 	bl	8082bf4 <__aeabi_fmul>
 8080352:	f002 f863 	bl	808241c <__aeabi_f2d>
 8080356:	2200      	movs	r2, #0
 8080358:	4b0f      	ldr	r3, [pc, #60]	; (8080398 <_Z14getTemperaturev+0x68>)
 808035a:	f001 feff 	bl	808215c <__aeabi_dsub>
 808035e:	2200      	movs	r2, #0
 8080360:	4b0e      	ldr	r3, [pc, #56]	; (808039c <_Z14getTemperaturev+0x6c>)
 8080362:	f002 f8af 	bl	80824c4 <__aeabi_dmul>
 8080366:	f002 fabf 	bl	80828e8 <__aeabi_d2iz>
 808036a:	f002 f845 	bl	80823f8 <__aeabi_i2d>
 808036e:	2200      	movs	r2, #0
 8080370:	4b0b      	ldr	r3, [pc, #44]	; (80803a0 <_Z14getTemperaturev+0x70>)
 8080372:	f002 f8a7 	bl	80824c4 <__aeabi_dmul>
 8080376:	2200      	movs	r2, #0
 8080378:	4b0a      	ldr	r3, [pc, #40]	; (80803a4 <_Z14getTemperaturev+0x74>)
 808037a:	f002 f9cd 	bl	8082718 <__aeabi_ddiv>
 808037e:	2200      	movs	r2, #0
 8080380:	4b09      	ldr	r3, [pc, #36]	; (80803a8 <_Z14getTemperaturev+0x78>)
 8080382:	f001 feed 	bl	8082160 <__adddf3>
 8080386:	f002 faaf 	bl	80828e8 <__aeabi_d2iz>
 808038a:	4b08      	ldr	r3, [pc, #32]	; (80803ac <_Z14getTemperaturev+0x7c>)
 808038c:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
 808038e:	bd08      	pop	{r3, pc}
 8080390:	66666666 	.word	0x66666666
 8080394:	400a6666 	.word	0x400a6666
 8080398:	3fe00000 	.word	0x3fe00000
 808039c:	40590000 	.word	0x40590000
 80803a0:	40220000 	.word	0x40220000
 80803a4:	40140000 	.word	0x40140000
 80803a8:	40400000 	.word	0x40400000
 80803ac:	20000470 	.word	0x20000470

080803b0 <_Z11watchdogISRv>:

void watchdogISR()
{
 80803b0:	b508      	push	{r3, lr}
  watchdogInterrupt = true;
 80803b2:	4b06      	ldr	r3, [pc, #24]	; (80803cc <_Z11watchdogISRv+0x1c>)
 80803b4:	2101      	movs	r1, #1
  digitalWrite(WIRING_donePin, HIGH);                              // Pet the watchdog
 80803b6:	2006      	movs	r0, #6
  return temperatureF;
}

void watchdogISR()
{
  watchdogInterrupt = true;
 80803b8:	7019      	strb	r1, [r3, #0]
  digitalWrite(WIRING_donePin, HIGH);                              // Pet the watchdog
 80803ba:	f001 fcb2 	bl	8081d22 <digitalWrite>
  digitalWrite(WIRING_donePin, LOW);
}
 80803be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void watchdogISR()
{
  watchdogInterrupt = true;
  digitalWrite(WIRING_donePin, HIGH);                              // Pet the watchdog
  digitalWrite(WIRING_donePin, LOW);
 80803c2:	2100      	movs	r1, #0
 80803c4:	2006      	movs	r0, #6
 80803c6:	f001 bcac 	b.w	8081d22 <digitalWrite>
 80803ca:	bf00      	nop
 80803cc:	20000480 	.word	0x20000480

080803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80803d0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80803d2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80803d4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80803d6:	b17c      	cbz	r4, 80803f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80803d8:	6863      	ldr	r3, [r4, #4]
 80803da:	3b01      	subs	r3, #1
 80803dc:	6063      	str	r3, [r4, #4]
 80803de:	b95b      	cbnz	r3, 80803f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80803e0:	6823      	ldr	r3, [r4, #0]
 80803e2:	4620      	mov	r0, r4
 80803e4:	689b      	ldr	r3, [r3, #8]
 80803e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80803e8:	68a3      	ldr	r3, [r4, #8]
 80803ea:	3b01      	subs	r3, #1
 80803ec:	60a3      	str	r3, [r4, #8]
 80803ee:	b91b      	cbnz	r3, 80803f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80803f0:	6823      	ldr	r3, [r4, #0]
 80803f2:	4620      	mov	r0, r4
 80803f4:	68db      	ldr	r3, [r3, #12]
 80803f6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80803f8:	4628      	mov	r0, r5
 80803fa:	bd38      	pop	{r3, r4, r5, pc}

080803fc <_Z12BlinkForeverv>:
}

void BlinkForever() {
 80803fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  delay(1000);
 80803fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080402:	f000 fc1f 	bl	8080c44 <delay>
 8080406:	4b0f      	ldr	r3, [pc, #60]	; (8080444 <_Z12BlinkForeverv+0x48>)
 8080408:	2200      	movs	r2, #0
 808040a:	781b      	ldrb	r3, [r3, #0]
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
 808040c:	a802      	add	r0, sp, #8
 808040e:	f88d 2000 	strb.w	r2, [sp]
 8080412:	490d      	ldr	r1, [pc, #52]	; (8080448 <_Z12BlinkForeverv+0x4c>)
 8080414:	f7ff feae 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080418:	a803      	add	r0, sp, #12
 808041a:	f7ff ffd9 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("Test Failed" "Reset Device to Continue", PRIVATE);
  while(1) {
    digitalWrite(WIRING_blueLED,HIGH);
 808041e:	2101      	movs	r1, #1
 8080420:	2007      	movs	r0, #7
 8080422:	f001 fc7e 	bl	8081d22 <digitalWrite>
    delay(2000);
 8080426:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808042a:	f000 fc0b 	bl	8080c44 <delay>
    digitalWrite(WIRING_blueLED,LOW);
 808042e:	2100      	movs	r1, #0
 8080430:	2007      	movs	r0, #7
 8080432:	f001 fc76 	bl	8081d22 <digitalWrite>
    delay(2000);
 8080436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808043a:	f000 fc03 	bl	8080c44 <delay>
    Particle.process();
 808043e:	f7ff fea7 	bl	8080190 <_ZN10CloudClass7processEv>
 8080442:	e7ec      	b.n	808041e <_Z12BlinkForeverv+0x22>
 8080444:	20000474 	.word	0x20000474
 8080448:	08083038 	.word	0x08083038

0808044c <loop>:

  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
}


void loop() {
 808044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808044e:	4c9a      	ldr	r4, [pc, #616]	; (80806b8 <loop+0x26c>)
 8080450:	b095      	sub	sp, #84	; 0x54
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080452:	2500      	movs	r5, #0
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
 8080454:	4999      	ldr	r1, [pc, #612]	; (80806bc <loop+0x270>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080456:	7823      	ldrb	r3, [r4, #0]
 8080458:	4a99      	ldr	r2, [pc, #612]	; (80806c0 <loop+0x274>)
 808045a:	a804      	add	r0, sp, #16
 808045c:	f88d 5000 	strb.w	r5, [sp]
 8080460:	f7ff fe88 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080464:	a805      	add	r0, sp, #20
 8080466:	f7ff ffb3 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808046a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808046e:	f000 fbe9 	bl	8080c44 <delay>
  Particle.process();
 8080472:	f7ff fe8d 	bl	8080190 <_ZN10CloudClass7processEv>

  if (!fram.begin()) {                                                // You can stick the new i2c addr in here, e.g. begin(0x51);
 8080476:	2150      	movs	r1, #80	; 0x50
 8080478:	4892      	ldr	r0, [pc, #584]	; (80806c4 <loop+0x278>)
 808047a:	f7ff fe21 	bl	80800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>
 808047e:	b958      	cbnz	r0, 8080498 <loop+0x4c>
    Particle.publish("Test #1", "Failed - Missing FRAM", PRIVATE);    // Can't communicate with FRAM - failed test
 8080480:	f88d 0000 	strb.w	r0, [sp]
 8080484:	7823      	ldrb	r3, [r4, #0]
 8080486:	a804      	add	r0, sp, #16
 8080488:	4a8f      	ldr	r2, [pc, #572]	; (80806c8 <loop+0x27c>)
 808048a:	4990      	ldr	r1, [pc, #576]	; (80806cc <loop+0x280>)
 808048c:	f7ff fe72 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080490:	a805      	add	r0, sp, #20
 8080492:	f7ff ff9d 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080496:	e011      	b.n	80804bc <loop+0x70>
  }
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                 // Check to see if the memory map in the sketch matches the data on the chip
 8080498:	4628      	mov	r0, r5
 808049a:	f7ff fe85 	bl	80801a8 <_Z9FRAMread8j>
 808049e:	2807      	cmp	r0, #7
 80804a0:	d00c      	beq.n	80804bc <loop+0x70>
 80804a2:	7823      	ldrb	r3, [r4, #0]
    Particle.publish("Test #1", "In process - Erasing FRAM", PRIVATE);
 80804a4:	4a8a      	ldr	r2, [pc, #552]	; (80806d0 <loop+0x284>)
 80804a6:	4989      	ldr	r1, [pc, #548]	; (80806cc <loop+0x280>)
 80804a8:	a804      	add	r0, sp, #16
 80804aa:	f88d 5000 	strb.w	r5, [sp]
 80804ae:	f7ff fe61 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80804b2:	a805      	add	r0, sp, #20
 80804b4:	f7ff ff8c 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    ResetFRAM();                                                      // Reset the FRAM to correct the issue
 80804b8:	f7ff fe84 	bl	80801c4 <_Z9ResetFRAMv>
  }
  delay(1000);
 80804bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80804c0:	f000 fbc0 	bl	8080c44 <delay>
  Particle.process();
 80804c4:	f7ff fe64 	bl	8080190 <_ZN10CloudClass7processEv>

  if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) Particle.publish("Test #1", "Failed - FRAM Read Error", PRIVATE);
 80804c8:	2000      	movs	r0, #0
 80804ca:	f7ff fe6d 	bl	80801a8 <_Z9FRAMread8j>
 80804ce:	2200      	movs	r2, #0
 80804d0:	2807      	cmp	r0, #7
 80804d2:	f88d 2000 	strb.w	r2, [sp]
 80804d6:	7823      	ldrb	r3, [r4, #0]
 80804d8:	bf14      	ite	ne
 80804da:	4a7e      	ldrne	r2, [pc, #504]	; (80806d4 <loop+0x288>)
  else Particle.publish("Test #1", "FRAM Test Passed", PRIVATE);
 80804dc:	4a7e      	ldreq	r2, [pc, #504]	; (80806d8 <loop+0x28c>)
 80804de:	497b      	ldr	r1, [pc, #492]	; (80806cc <loop+0x280>)
 80804e0:	a804      	add	r0, sp, #16
 80804e2:	f7ff fe47 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80804e6:	a805      	add	r0, sp, #20
 80804e8:	f7ff ff72 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 80804ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80804f0:	f000 fba8 	bl	8080c44 <delay>
  Particle.process();
 80804f4:	f7ff fe4c 	bl	8080190 <_ZN10CloudClass7processEv>

  int tempValue = getTemperature();
 80804f8:	f7ff ff1a 	bl	8080330 <_Z14getTemperaturev>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80804fc:	2500      	movs	r5, #0
  char data[64];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "Temperature is %iF", tempValue);
 80804fe:	4603      	mov	r3, r0
 8080500:	4a76      	ldr	r2, [pc, #472]	; (80806dc <loop+0x290>)
 8080502:	2140      	movs	r1, #64	; 0x40
 8080504:	a804      	add	r0, sp, #16
 8080506:	f000 fb85 	bl	8080c14 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808050a:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #2", data, PRIVATE);
 808050c:	aa04      	add	r2, sp, #16
 808050e:	4974      	ldr	r1, [pc, #464]	; (80806e0 <loop+0x294>)
 8080510:	a802      	add	r0, sp, #8
 8080512:	f88d 5000 	strb.w	r5, [sp]
 8080516:	f7ff fe2d 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808051a:	a803      	add	r0, sp, #12
 808051c:	f7ff ff58 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080524:	f000 fb8e 	bl	8080c44 <delay>
  Particle.process();
 8080528:	f7ff fe32 	bl	8080190 <_ZN10CloudClass7processEv>
 808052c:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #3", "Press User Switch",PRIVATE);
 808052e:	4a6d      	ldr	r2, [pc, #436]	; (80806e4 <loop+0x298>)
 8080530:	496d      	ldr	r1, [pc, #436]	; (80806e8 <loop+0x29c>)
 8080532:	a802      	add	r0, sp, #8
 8080534:	f88d 5000 	strb.w	r5, [sp]
 8080538:	f7ff fe1c 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808053c:	a803      	add	r0, sp, #12
 808053e:	f7ff ff47 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080546:	f000 fb7d 	bl	8080c44 <delay>
  while(digitalRead(WIRING_userSwitch)) Particle.process();
 808054a:	2005      	movs	r0, #5
 808054c:	f001 fc02 	bl	8081d54 <digitalRead>
 8080550:	b110      	cbz	r0, 8080558 <loop+0x10c>
 8080552:	f7ff fe1d 	bl	8080190 <_ZN10CloudClass7processEv>
 8080556:	e7f8      	b.n	808054a <loop+0xfe>
 8080558:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #3", "User Switch Press Detected",PRIVATE);
 808055a:	4a64      	ldr	r2, [pc, #400]	; (80806ec <loop+0x2a0>)
 808055c:	4962      	ldr	r1, [pc, #392]	; (80806e8 <loop+0x29c>)
 808055e:	f88d 0000 	strb.w	r0, [sp]
 8080562:	a802      	add	r0, sp, #8
 8080564:	f7ff fe06 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080568:	a803      	add	r0, sp, #12
 808056a:	f7ff ff31 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808056e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080572:	f000 fb67 	bl	8080c44 <delay>
  Particle.process();
 8080576:	f7ff fe0b 	bl	8080190 <_ZN10CloudClass7processEv>

  do {
    if (millis() >= updateInterval + lastUpdate) {
 808057a:	4f5d      	ldr	r7, [pc, #372]	; (80806f0 <loop+0x2a4>)
 808057c:	4e5d      	ldr	r6, [pc, #372]	; (80806f4 <loop+0x2a8>)
 808057e:	4d5e      	ldr	r5, [pc, #376]	; (80806f8 <loop+0x2ac>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080580:	f000 f914 	bl	80807ac <HAL_Timer_Get_Milli_Seconds>
 8080584:	6833      	ldr	r3, [r6, #0]
 8080586:	683a      	ldr	r2, [r7, #0]
 8080588:	4413      	add	r3, r2
 808058a:	4298      	cmp	r0, r3
 808058c:	d31c      	bcc.n	80805c8 <loop+0x17c>
      stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 808058e:	485b      	ldr	r0, [pc, #364]	; (80806fc <loop+0x2b0>)
 8080590:	f000 ff00 	bl	8081394 <_ZN9FuelGauge6getSoCEv>
 8080594:	f002 fc7e 	bl	8082e94 <__aeabi_f2iz>
      snprintf(data, sizeof(data), "Battery charge level = %i", stateOfCharge);
 8080598:	4a59      	ldr	r2, [pc, #356]	; (8080700 <loop+0x2b4>)
  delay(1000);
  Particle.process();

  do {
    if (millis() >= updateInterval + lastUpdate) {
      stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 808059a:	4603      	mov	r3, r0
 808059c:	6028      	str	r0, [r5, #0]
      snprintf(data, sizeof(data), "Battery charge level = %i", stateOfCharge);
 808059e:	2140      	movs	r1, #64	; 0x40
 80805a0:	a804      	add	r0, sp, #16
 80805a2:	f000 fb37 	bl	8080c14 <snprintf>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80805a6:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80805a8:	7823      	ldrb	r3, [r4, #0]
      Particle.publish("Test #4", data, PRIVATE);
 80805aa:	4956      	ldr	r1, [pc, #344]	; (8080704 <loop+0x2b8>)
 80805ac:	f88d 2000 	strb.w	r2, [sp]
 80805b0:	a802      	add	r0, sp, #8
 80805b2:	aa04      	add	r2, sp, #16
 80805b4:	f7ff fdde 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80805b8:	a803      	add	r0, sp, #12
 80805ba:	f7ff ff09 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.process();
 80805be:	f7ff fde7 	bl	8080190 <_ZN10CloudClass7processEv>
 80805c2:	f000 f8f3 	bl	80807ac <HAL_Timer_Get_Milli_Seconds>
      lastUpdate = millis();
 80805c6:	6030      	str	r0, [r6, #0]
    }
  }  while(stateOfCharge <= 65);
 80805c8:	682b      	ldr	r3, [r5, #0]
 80805ca:	2b41      	cmp	r3, #65	; 0x41
 80805cc:	ddd8      	ble.n	8080580 <loop+0x134>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80805ce:	2700      	movs	r7, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80805d0:	7823      	ldrb	r3, [r4, #0]
  Particle.publish("Test #5", "Battery charge test passed", PRIVATE);
 80805d2:	4a4d      	ldr	r2, [pc, #308]	; (8080708 <loop+0x2bc>)
 80805d4:	494d      	ldr	r1, [pc, #308]	; (808070c <loop+0x2c0>)
 80805d6:	a802      	add	r0, sp, #8
 80805d8:	f88d 7000 	strb.w	r7, [sp]
 80805dc:	f7ff fdca 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80805e0:	a803      	add	r0, sp, #12
 80805e2:	f7ff fef5 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>


  time_t beginTime = Time.now();
 80805e6:	f001 f98d 	bl	8081904 <_ZN9TimeClass3nowEv>
  watchdogISR();
  watchdogInterrupt = false;
 80805ea:	4d49      	ldr	r5, [pc, #292]	; (8080710 <loop+0x2c4>)
    }
  }  while(stateOfCharge <= 65);
  Particle.publish("Test #5", "Battery charge test passed", PRIVATE);


  time_t beginTime = Time.now();
 80805ec:	4606      	mov	r6, r0
  watchdogISR();
 80805ee:	f7ff fedf 	bl	80803b0 <_Z11watchdogISRv>
  watchdogInterrupt = false;
 80805f2:	702f      	strb	r7, [r5, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80805f4:	f000 fa86 	bl	8080b04 <spark_cloud_flag_connected>

  if (Particle.connected()) Particle.publish("Test #6 Started","Expect this test to take ~60 minutes",PRIVATE);
 80805f8:	b158      	cbz	r0, 8080612 <loop+0x1c6>
 80805fa:	4b2f      	ldr	r3, [pc, #188]	; (80806b8 <loop+0x26c>)
 80805fc:	a802      	add	r0, sp, #8
 80805fe:	781b      	ldrb	r3, [r3, #0]
 8080600:	4a44      	ldr	r2, [pc, #272]	; (8080714 <loop+0x2c8>)
 8080602:	f88d 7000 	strb.w	r7, [sp]
 8080606:	4944      	ldr	r1, [pc, #272]	; (8080718 <loop+0x2cc>)
 8080608:	f7ff fdb4 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808060c:	a803      	add	r0, sp, #12
 808060e:	f7ff fedf 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080616:	f000 fb15 	bl	8080c44 <delay>
  Particle.process();
 808061a:	f7ff fdb9 	bl	8080190 <_ZN10CloudClass7processEv>

  while(!watchdogInterrupt) {
 808061e:	782b      	ldrb	r3, [r5, #0]
 8080620:	b933      	cbnz	r3, 8080630 <loop+0x1e4>
    Particle.process();
 8080622:	f7ff fdb5 	bl	8080190 <_ZN10CloudClass7processEv>
    delay(1000);
 8080626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808062a:	f000 fb0b 	bl	8080c44 <delay>

  if (Particle.connected()) Particle.publish("Test #6 Started","Expect this test to take ~60 minutes",PRIVATE);
  delay(1000);
  Particle.process();

  while(!watchdogInterrupt) {
 808062e:	e7f6      	b.n	808061e <loop+0x1d2>
    Particle.process();
    delay(1000);
  }

  int elapsedMinutes = (Time.now() - beginTime)/60;
 8080630:	f001 f968 	bl	8081904 <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "Elapsed time in minutes is %i", elapsedMinutes);
 8080634:	233c      	movs	r3, #60	; 0x3c
 8080636:	1b80      	subs	r0, r0, r6
 8080638:	fb90 f3f3 	sdiv	r3, r0, r3
 808063c:	4a37      	ldr	r2, [pc, #220]	; (808071c <loop+0x2d0>)
 808063e:	2140      	movs	r1, #64	; 0x40
 8080640:	a804      	add	r0, sp, #16
 8080642:	f000 fae7 	bl	8080c14 <snprintf>
 8080646:	f000 fa5d 	bl	8080b04 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Test #6 Finished", data ,PRIVATE);
 808064a:	b158      	cbz	r0, 8080664 <loop+0x218>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808064c:	2200      	movs	r2, #0
 808064e:	f88d 2000 	strb.w	r2, [sp]
 8080652:	a802      	add	r0, sp, #8
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080654:	7823      	ldrb	r3, [r4, #0]
 8080656:	aa04      	add	r2, sp, #16
 8080658:	4931      	ldr	r1, [pc, #196]	; (8080720 <loop+0x2d4>)
 808065a:	f7ff fd8b 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 808065e:	a803      	add	r0, sp, #12
 8080660:	f7ff feb6 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080668:	2500      	movs	r5, #0
 808066a:	f000 faeb 	bl	8080c44 <delay>
  Particle.process();
 808066e:	f7ff fd8f 	bl	8080190 <_ZN10CloudClass7processEv>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080672:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #7", "Final Test - Hard Reset in 1 second",PRIVATE);
 8080674:	4a2b      	ldr	r2, [pc, #172]	; (8080724 <loop+0x2d8>)
 8080676:	492c      	ldr	r1, [pc, #176]	; (8080728 <loop+0x2dc>)
 8080678:	a802      	add	r0, sp, #8
 808067a:	f88d 5000 	strb.w	r5, [sp]
 808067e:	f7ff fd79 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 8080682:	a803      	add	r0, sp, #12
 8080684:	f7ff fea4 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808068c:	f000 fada 	bl	8080c44 <delay>
  Particle.process();
 8080690:	f7ff fd7e 	bl	8080190 <_ZN10CloudClass7processEv>

  digitalWrite(WIRING_hardResetPin,HIGH);                    // Zero the count so only every three
 8080694:	2101      	movs	r1, #1
 8080696:	2004      	movs	r0, #4
 8080698:	f001 fb43 	bl	8081d22 <digitalWrite>
 808069c:	7823      	ldrb	r3, [r4, #0]

  Particle.publish("Test #7", "If you see this message - hard reset test failed", PRIVATE);
 808069e:	4a23      	ldr	r2, [pc, #140]	; (808072c <loop+0x2e0>)
 80806a0:	4921      	ldr	r1, [pc, #132]	; (8080728 <loop+0x2dc>)
 80806a2:	a802      	add	r0, sp, #8
 80806a4:	f88d 5000 	strb.w	r5, [sp]
 80806a8:	f7ff fd64 	bl	8080174 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.8.constprop.12>
 80806ac:	a803      	add	r0, sp, #12
 80806ae:	f7ff fe8f 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  BlinkForever();
 80806b2:	f7ff fea3 	bl	80803fc <_Z12BlinkForeverv>
 80806b6:	bf00      	nop
 80806b8:	20000474 	.word	0x20000474
 80806bc:	0808306f 	.word	0x0808306f
 80806c0:	0808305c 	.word	0x0808305c
 80806c4:	20000475 	.word	0x20000475
 80806c8:	0808307a 	.word	0x0808307a
 80806cc:	08083090 	.word	0x08083090
 80806d0:	08083098 	.word	0x08083098
 80806d4:	080830b2 	.word	0x080830b2
 80806d8:	080830cb 	.word	0x080830cb
 80806dc:	080830dc 	.word	0x080830dc
 80806e0:	080830ef 	.word	0x080830ef
 80806e4:	080830f7 	.word	0x080830f7
 80806e8:	08083109 	.word	0x08083109
 80806ec:	08083111 	.word	0x08083111
 80806f0:	20000400 	.word	0x20000400
 80806f4:	20000484 	.word	0x20000484
 80806f8:	20000488 	.word	0x20000488
 80806fc:	20000478 	.word	0x20000478
 8080700:	0808312c 	.word	0x0808312c
 8080704:	08083146 	.word	0x08083146
 8080708:	0808314e 	.word	0x0808314e
 808070c:	08083169 	.word	0x08083169
 8080710:	20000480 	.word	0x20000480
 8080714:	08083171 	.word	0x08083171
 8080718:	08083196 	.word	0x08083196
 808071c:	080831a6 	.word	0x080831a6
 8080720:	080831c4 	.word	0x080831c4
 8080724:	080831d5 	.word	0x080831d5
 8080728:	080831f9 	.word	0x080831f9
 808072c:	08083201 	.word	0x08083201

08080730 <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080730:	4b0c      	ldr	r3, [pc, #48]	; (8080764 <_GLOBAL__sub_I_fram+0x34>)
  {
    digitalWrite(WIRING_hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 8080732:	b510      	push	{r4, lr}
 8080734:	2401      	movs	r4, #1
 8080736:	701c      	strb	r4, [r3, #0]
 8080738:	f000 f858 	bl	80807ec <HAL_Pin_Map>
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 808073c:	480a      	ldr	r0, [pc, #40]	; (8080768 <_GLOBAL__sub_I_fram+0x38>)
 808073e:	f7ff fcbc 	bl	80800ba <_ZN17Adafruit_FRAM_I2CC1Ev>
 #include "FRAM-Library-Extensions.h"                     // Extends the FRAM Library
 #include "electrondoc.h"                                 // Documents pinout
 

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 8080742:	4620      	mov	r0, r4
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 8080744:	4c09      	ldr	r4, [pc, #36]	; (808076c <_GLOBAL__sub_I_fram+0x3c>)
 #include "FRAM-Library-Extensions.h"                     // Extends the FRAM Library
 #include "electrondoc.h"                                 // Documents pinout
 

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 8080746:	2100      	movs	r1, #0
 8080748:	f000 f988 	bl	8080a5c <system_thread_set_state>
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 808074c:	2100      	movs	r1, #0
 808074e:	4620      	mov	r0, r4
 8080750:	f000 fde0 	bl	8081314 <_ZN9FuelGaugeC1Eb>
 8080754:	4620      	mov	r0, r4
  {
    digitalWrite(WIRING_hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
 8080756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 #include "electrondoc.h"                                 // Documents pinout
 

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 808075a:	4a05      	ldr	r2, [pc, #20]	; (8080770 <_GLOBAL__sub_I_fram+0x40>)
 808075c:	4905      	ldr	r1, [pc, #20]	; (8080774 <_GLOBAL__sub_I_fram+0x44>)
 808075e:	f001 bba9 	b.w	8081eb4 <__aeabi_atexit>
 8080762:	bf00      	nop
 8080764:	20000474 	.word	0x20000474
 8080768:	20000475 	.word	0x20000475
 808076c:	20000478 	.word	0x20000478
 8080770:	2000046c 	.word	0x2000046c
 8080774:	08081333 	.word	0x08081333

08080778 <_GLOBAL__sub_I__ZN8MMA8452QC2Eh>:
 8080778:	f000 b838 	b.w	80807ec <HAL_Pin_Map>

0808077c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808077c:	b508      	push	{r3, lr}
 808077e:	4b02      	ldr	r3, [pc, #8]	; (8080788 <inet_gethostbyname+0xc>)
 8080780:	681b      	ldr	r3, [r3, #0]
 8080782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080784:	9301      	str	r3, [sp, #4]
 8080786:	bd08      	pop	{r3, pc}
 8080788:	08060020 	.word	0x08060020

0808078c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808078c:	b508      	push	{r3, lr}
 808078e:	4b02      	ldr	r3, [pc, #8]	; (8080798 <os_mutex_create+0xc>)
 8080790:	681b      	ldr	r3, [r3, #0]
 8080792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080794:	9301      	str	r3, [sp, #4]
 8080796:	bd08      	pop	{r3, pc}
 8080798:	080401d0 	.word	0x080401d0

0808079c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808079c:	b508      	push	{r3, lr}
 808079e:	4b02      	ldr	r3, [pc, #8]	; (80807a8 <HAL_RNG_GetRandomNumber+0xc>)
 80807a0:	681b      	ldr	r3, [r3, #0]
 80807a2:	685b      	ldr	r3, [r3, #4]
 80807a4:	9301      	str	r3, [sp, #4]
 80807a6:	bd08      	pop	{r3, pc}
 80807a8:	0804019c 	.word	0x0804019c

080807ac <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80807ac:	b508      	push	{r3, lr}
 80807ae:	4b02      	ldr	r3, [pc, #8]	; (80807b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80807b0:	681b      	ldr	r3, [r3, #0]
 80807b2:	695b      	ldr	r3, [r3, #20]
 80807b4:	9301      	str	r3, [sp, #4]
 80807b6:	bd08      	pop	{r3, pc}
 80807b8:	0804019c 	.word	0x0804019c

080807bc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80807bc:	b508      	push	{r3, lr}
 80807be:	4b02      	ldr	r3, [pc, #8]	; (80807c8 <HAL_RTC_Get_UnixTime+0xc>)
 80807c0:	681b      	ldr	r3, [r3, #0]
 80807c2:	69db      	ldr	r3, [r3, #28]
 80807c4:	9301      	str	r3, [sp, #4]
 80807c6:	bd08      	pop	{r3, pc}
 80807c8:	0804019c 	.word	0x0804019c

080807cc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80807cc:	b508      	push	{r3, lr}
 80807ce:	4b02      	ldr	r3, [pc, #8]	; (80807d8 <HAL_RTC_Time_Is_Valid+0xc>)
 80807d0:	681b      	ldr	r3, [r3, #0]
 80807d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80807d4:	9301      	str	r3, [sp, #4]
 80807d6:	bd08      	pop	{r3, pc}
 80807d8:	0804019c 	.word	0x0804019c

080807dc <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80807dc:	b508      	push	{r3, lr}
 80807de:	4b02      	ldr	r3, [pc, #8]	; (80807e8 <hal_timer_millis+0xc>)
 80807e0:	681b      	ldr	r3, [r3, #0]
 80807e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80807e4:	9301      	str	r3, [sp, #4]
 80807e6:	bd08      	pop	{r3, pc}
 80807e8:	0804019c 	.word	0x0804019c

080807ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80807ec:	b508      	push	{r3, lr}
 80807ee:	4b02      	ldr	r3, [pc, #8]	; (80807f8 <HAL_Pin_Map+0xc>)
 80807f0:	681b      	ldr	r3, [r3, #0]
 80807f2:	681b      	ldr	r3, [r3, #0]
 80807f4:	9301      	str	r3, [sp, #4]
 80807f6:	bd08      	pop	{r3, pc}
 80807f8:	080401b0 	.word	0x080401b0

080807fc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80807fc:	b508      	push	{r3, lr}
 80807fe:	4b02      	ldr	r3, [pc, #8]	; (8080808 <HAL_Validate_Pin_Function+0xc>)
 8080800:	681b      	ldr	r3, [r3, #0]
 8080802:	685b      	ldr	r3, [r3, #4]
 8080804:	9301      	str	r3, [sp, #4]
 8080806:	bd08      	pop	{r3, pc}
 8080808:	080401b0 	.word	0x080401b0

0808080c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808080c:	b508      	push	{r3, lr}
 808080e:	4b02      	ldr	r3, [pc, #8]	; (8080818 <HAL_Pin_Mode+0xc>)
 8080810:	681b      	ldr	r3, [r3, #0]
 8080812:	689b      	ldr	r3, [r3, #8]
 8080814:	9301      	str	r3, [sp, #4]
 8080816:	bd08      	pop	{r3, pc}
 8080818:	080401b0 	.word	0x080401b0

0808081c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808081c:	b508      	push	{r3, lr}
 808081e:	4b02      	ldr	r3, [pc, #8]	; (8080828 <HAL_Get_Pin_Mode+0xc>)
 8080820:	681b      	ldr	r3, [r3, #0]
 8080822:	68db      	ldr	r3, [r3, #12]
 8080824:	9301      	str	r3, [sp, #4]
 8080826:	bd08      	pop	{r3, pc}
 8080828:	080401b0 	.word	0x080401b0

0808082c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808082c:	b508      	push	{r3, lr}
 808082e:	4b02      	ldr	r3, [pc, #8]	; (8080838 <HAL_GPIO_Write+0xc>)
 8080830:	681b      	ldr	r3, [r3, #0]
 8080832:	691b      	ldr	r3, [r3, #16]
 8080834:	9301      	str	r3, [sp, #4]
 8080836:	bd08      	pop	{r3, pc}
 8080838:	080401b0 	.word	0x080401b0

0808083c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808083c:	b508      	push	{r3, lr}
 808083e:	4b02      	ldr	r3, [pc, #8]	; (8080848 <HAL_GPIO_Read+0xc>)
 8080840:	681b      	ldr	r3, [r3, #0]
 8080842:	695b      	ldr	r3, [r3, #20]
 8080844:	9301      	str	r3, [sp, #4]
 8080846:	bd08      	pop	{r3, pc}
 8080848:	080401b0 	.word	0x080401b0

0808084c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 808084c:	b508      	push	{r3, lr}
 808084e:	4b02      	ldr	r3, [pc, #8]	; (8080858 <HAL_ADC_Read+0xc>)
 8080850:	681b      	ldr	r3, [r3, #0]
 8080852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080854:	9301      	str	r3, [sp, #4]
 8080856:	bd08      	pop	{r3, pc}
 8080858:	080401b0 	.word	0x080401b0

0808085c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 808085c:	b508      	push	{r3, lr}
 808085e:	4b02      	ldr	r3, [pc, #8]	; (8080868 <HAL_I2C_Begin+0xc>)
 8080860:	681b      	ldr	r3, [r3, #0]
 8080862:	68db      	ldr	r3, [r3, #12]
 8080864:	9301      	str	r3, [sp, #4]
 8080866:	bd08      	pop	{r3, pc}
 8080868:	080401ac 	.word	0x080401ac

0808086c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 808086c:	b508      	push	{r3, lr}
 808086e:	4b02      	ldr	r3, [pc, #8]	; (8080878 <HAL_I2C_Request_Data+0xc>)
 8080870:	681b      	ldr	r3, [r3, #0]
 8080872:	695b      	ldr	r3, [r3, #20]
 8080874:	9301      	str	r3, [sp, #4]
 8080876:	bd08      	pop	{r3, pc}
 8080878:	080401ac 	.word	0x080401ac

0808087c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 808087c:	b508      	push	{r3, lr}
 808087e:	4b02      	ldr	r3, [pc, #8]	; (8080888 <HAL_I2C_Begin_Transmission+0xc>)
 8080880:	681b      	ldr	r3, [r3, #0]
 8080882:	699b      	ldr	r3, [r3, #24]
 8080884:	9301      	str	r3, [sp, #4]
 8080886:	bd08      	pop	{r3, pc}
 8080888:	080401ac 	.word	0x080401ac

0808088c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 808088c:	b508      	push	{r3, lr}
 808088e:	4b02      	ldr	r3, [pc, #8]	; (8080898 <HAL_I2C_End_Transmission+0xc>)
 8080890:	681b      	ldr	r3, [r3, #0]
 8080892:	69db      	ldr	r3, [r3, #28]
 8080894:	9301      	str	r3, [sp, #4]
 8080896:	bd08      	pop	{r3, pc}
 8080898:	080401ac 	.word	0x080401ac

0808089c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808089c:	b508      	push	{r3, lr}
 808089e:	4b02      	ldr	r3, [pc, #8]	; (80808a8 <HAL_I2C_Write_Data+0xc>)
 80808a0:	681b      	ldr	r3, [r3, #0]
 80808a2:	6a1b      	ldr	r3, [r3, #32]
 80808a4:	9301      	str	r3, [sp, #4]
 80808a6:	bd08      	pop	{r3, pc}
 80808a8:	080401ac 	.word	0x080401ac

080808ac <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80808ac:	b508      	push	{r3, lr}
 80808ae:	4b02      	ldr	r3, [pc, #8]	; (80808b8 <HAL_I2C_Available_Data+0xc>)
 80808b0:	681b      	ldr	r3, [r3, #0]
 80808b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80808b4:	9301      	str	r3, [sp, #4]
 80808b6:	bd08      	pop	{r3, pc}
 80808b8:	080401ac 	.word	0x080401ac

080808bc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80808bc:	b508      	push	{r3, lr}
 80808be:	4b02      	ldr	r3, [pc, #8]	; (80808c8 <HAL_I2C_Read_Data+0xc>)
 80808c0:	681b      	ldr	r3, [r3, #0]
 80808c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80808c4:	9301      	str	r3, [sp, #4]
 80808c6:	bd08      	pop	{r3, pc}
 80808c8:	080401ac 	.word	0x080401ac

080808cc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80808cc:	b508      	push	{r3, lr}
 80808ce:	4b02      	ldr	r3, [pc, #8]	; (80808d8 <HAL_I2C_Peek_Data+0xc>)
 80808d0:	681b      	ldr	r3, [r3, #0]
 80808d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80808d4:	9301      	str	r3, [sp, #4]
 80808d6:	bd08      	pop	{r3, pc}
 80808d8:	080401ac 	.word	0x080401ac

080808dc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80808dc:	b508      	push	{r3, lr}
 80808de:	4b02      	ldr	r3, [pc, #8]	; (80808e8 <HAL_I2C_Flush_Data+0xc>)
 80808e0:	681b      	ldr	r3, [r3, #0]
 80808e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80808e4:	9301      	str	r3, [sp, #4]
 80808e6:	bd08      	pop	{r3, pc}
 80808e8:	080401ac 	.word	0x080401ac

080808ec <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80808ec:	b508      	push	{r3, lr}
 80808ee:	4b02      	ldr	r3, [pc, #8]	; (80808f8 <HAL_I2C_Is_Enabled+0xc>)
 80808f0:	681b      	ldr	r3, [r3, #0]
 80808f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80808f4:	9301      	str	r3, [sp, #4]
 80808f6:	bd08      	pop	{r3, pc}
 80808f8:	080401ac 	.word	0x080401ac

080808fc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80808fc:	b508      	push	{r3, lr}
 80808fe:	4b02      	ldr	r3, [pc, #8]	; (8080908 <HAL_I2C_Init+0xc>)
 8080900:	681b      	ldr	r3, [r3, #0]
 8080902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080904:	9301      	str	r3, [sp, #4]
 8080906:	bd08      	pop	{r3, pc}
 8080908:	080401ac 	.word	0x080401ac

0808090c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808090c:	b508      	push	{r3, lr}
 808090e:	4b02      	ldr	r3, [pc, #8]	; (8080918 <HAL_I2C_Acquire+0xc>)
 8080910:	681b      	ldr	r3, [r3, #0]
 8080912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080914:	9301      	str	r3, [sp, #4]
 8080916:	bd08      	pop	{r3, pc}
 8080918:	080401ac 	.word	0x080401ac

0808091c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 808091c:	b508      	push	{r3, lr}
 808091e:	4b02      	ldr	r3, [pc, #8]	; (8080928 <HAL_I2C_Release+0xc>)
 8080920:	681b      	ldr	r3, [r3, #0]
 8080922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080924:	9301      	str	r3, [sp, #4]
 8080926:	bd08      	pop	{r3, pc}
 8080928:	080401ac 	.word	0x080401ac

0808092c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808092c:	b508      	push	{r3, lr}
 808092e:	4b02      	ldr	r3, [pc, #8]	; (8080938 <HAL_SPI_Init+0xc>)
 8080930:	681b      	ldr	r3, [r3, #0]
 8080932:	69db      	ldr	r3, [r3, #28]
 8080934:	9301      	str	r3, [sp, #4]
 8080936:	bd08      	pop	{r3, pc}
 8080938:	080401b4 	.word	0x080401b4

0808093c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808093c:	b508      	push	{r3, lr}
 808093e:	4b02      	ldr	r3, [pc, #8]	; (8080948 <HAL_SPI_Is_Enabled+0xc>)
 8080940:	681b      	ldr	r3, [r3, #0]
 8080942:	6a1b      	ldr	r3, [r3, #32]
 8080944:	9301      	str	r3, [sp, #4]
 8080946:	bd08      	pop	{r3, pc}
 8080948:	080401b4 	.word	0x080401b4

0808094c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808094c:	b508      	push	{r3, lr}
 808094e:	4b02      	ldr	r3, [pc, #8]	; (8080958 <HAL_USART_Init+0xc>)
 8080950:	681b      	ldr	r3, [r3, #0]
 8080952:	699b      	ldr	r3, [r3, #24]
 8080954:	9301      	str	r3, [sp, #4]
 8080956:	bd08      	pop	{r3, pc}
 8080958:	080401c4 	.word	0x080401c4

0808095c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808095c:	b508      	push	{r3, lr}
 808095e:	4b02      	ldr	r3, [pc, #8]	; (8080968 <HAL_USART_Write_Data+0xc>)
 8080960:	681b      	ldr	r3, [r3, #0]
 8080962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080964:	9301      	str	r3, [sp, #4]
 8080966:	bd08      	pop	{r3, pc}
 8080968:	080401c4 	.word	0x080401c4

0808096c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808096c:	b508      	push	{r3, lr}
 808096e:	4b02      	ldr	r3, [pc, #8]	; (8080978 <HAL_USART_Available_Data+0xc>)
 8080970:	681b      	ldr	r3, [r3, #0]
 8080972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080974:	9301      	str	r3, [sp, #4]
 8080976:	bd08      	pop	{r3, pc}
 8080978:	080401c4 	.word	0x080401c4

0808097c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808097c:	b508      	push	{r3, lr}
 808097e:	4b02      	ldr	r3, [pc, #8]	; (8080988 <HAL_USART_Read_Data+0xc>)
 8080980:	681b      	ldr	r3, [r3, #0]
 8080982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080984:	9301      	str	r3, [sp, #4]
 8080986:	bd08      	pop	{r3, pc}
 8080988:	080401c4 	.word	0x080401c4

0808098c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 808098c:	b508      	push	{r3, lr}
 808098e:	4b02      	ldr	r3, [pc, #8]	; (8080998 <HAL_USART_Peek_Data+0xc>)
 8080990:	681b      	ldr	r3, [r3, #0]
 8080992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080994:	9301      	str	r3, [sp, #4]
 8080996:	bd08      	pop	{r3, pc}
 8080998:	080401c4 	.word	0x080401c4

0808099c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808099c:	b508      	push	{r3, lr}
 808099e:	4b02      	ldr	r3, [pc, #8]	; (80809a8 <HAL_USART_Flush_Data+0xc>)
 80809a0:	681b      	ldr	r3, [r3, #0]
 80809a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80809a4:	9301      	str	r3, [sp, #4]
 80809a6:	bd08      	pop	{r3, pc}
 80809a8:	080401c4 	.word	0x080401c4

080809ac <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80809ac:	b508      	push	{r3, lr}
 80809ae:	4b02      	ldr	r3, [pc, #8]	; (80809b8 <HAL_USART_Is_Enabled+0xc>)
 80809b0:	681b      	ldr	r3, [r3, #0]
 80809b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80809b4:	9301      	str	r3, [sp, #4]
 80809b6:	bd08      	pop	{r3, pc}
 80809b8:	080401c4 	.word	0x080401c4

080809bc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80809bc:	b508      	push	{r3, lr}
 80809be:	4b02      	ldr	r3, [pc, #8]	; (80809c8 <HAL_USART_Available_Data_For_Write+0xc>)
 80809c0:	681b      	ldr	r3, [r3, #0]
 80809c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80809c4:	9301      	str	r3, [sp, #4]
 80809c6:	bd08      	pop	{r3, pc}
 80809c8:	080401c4 	.word	0x080401c4

080809cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80809cc:	b508      	push	{r3, lr}
 80809ce:	4b02      	ldr	r3, [pc, #8]	; (80809d8 <HAL_USB_USART_Init+0xc>)
 80809d0:	681b      	ldr	r3, [r3, #0]
 80809d2:	681b      	ldr	r3, [r3, #0]
 80809d4:	9301      	str	r3, [sp, #4]
 80809d6:	bd08      	pop	{r3, pc}
 80809d8:	0806001c 	.word	0x0806001c

080809dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80809dc:	b508      	push	{r3, lr}
 80809de:	4b02      	ldr	r3, [pc, #8]	; (80809e8 <HAL_USB_USART_Available_Data+0xc>)
 80809e0:	681b      	ldr	r3, [r3, #0]
 80809e2:	691b      	ldr	r3, [r3, #16]
 80809e4:	9301      	str	r3, [sp, #4]
 80809e6:	bd08      	pop	{r3, pc}
 80809e8:	0806001c 	.word	0x0806001c

080809ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80809ec:	b508      	push	{r3, lr}
 80809ee:	4b02      	ldr	r3, [pc, #8]	; (80809f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80809f0:	681b      	ldr	r3, [r3, #0]
 80809f2:	695b      	ldr	r3, [r3, #20]
 80809f4:	9301      	str	r3, [sp, #4]
 80809f6:	bd08      	pop	{r3, pc}
 80809f8:	0806001c 	.word	0x0806001c

080809fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80809fc:	b508      	push	{r3, lr}
 80809fe:	4b02      	ldr	r3, [pc, #8]	; (8080a08 <HAL_USB_USART_Receive_Data+0xc>)
 8080a00:	681b      	ldr	r3, [r3, #0]
 8080a02:	699b      	ldr	r3, [r3, #24]
 8080a04:	9301      	str	r3, [sp, #4]
 8080a06:	bd08      	pop	{r3, pc}
 8080a08:	0806001c 	.word	0x0806001c

08080a0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080a0c:	b508      	push	{r3, lr}
 8080a0e:	4b02      	ldr	r3, [pc, #8]	; (8080a18 <HAL_USB_USART_Send_Data+0xc>)
 8080a10:	681b      	ldr	r3, [r3, #0]
 8080a12:	69db      	ldr	r3, [r3, #28]
 8080a14:	9301      	str	r3, [sp, #4]
 8080a16:	bd08      	pop	{r3, pc}
 8080a18:	0806001c 	.word	0x0806001c

08080a1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080a1c:	b508      	push	{r3, lr}
 8080a1e:	4b02      	ldr	r3, [pc, #8]	; (8080a28 <HAL_USB_USART_Flush_Data+0xc>)
 8080a20:	681b      	ldr	r3, [r3, #0]
 8080a22:	6a1b      	ldr	r3, [r3, #32]
 8080a24:	9301      	str	r3, [sp, #4]
 8080a26:	bd08      	pop	{r3, pc}
 8080a28:	0806001c 	.word	0x0806001c

08080a2c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8080a2c:	b508      	push	{r3, lr}
 8080a2e:	4b02      	ldr	r3, [pc, #8]	; (8080a38 <system_mode+0xc>)
 8080a30:	681b      	ldr	r3, [r3, #0]
 8080a32:	681b      	ldr	r3, [r3, #0]
 8080a34:	9301      	str	r3, [sp, #4]
 8080a36:	bd08      	pop	{r3, pc}
 8080a38:	080401a4 	.word	0x080401a4

08080a3c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080a3c:	b508      	push	{r3, lr}
 8080a3e:	4b02      	ldr	r3, [pc, #8]	; (8080a48 <set_system_mode+0xc>)
 8080a40:	681b      	ldr	r3, [r3, #0]
 8080a42:	685b      	ldr	r3, [r3, #4]
 8080a44:	9301      	str	r3, [sp, #4]
 8080a46:	bd08      	pop	{r3, pc}
 8080a48:	080401a4 	.word	0x080401a4

08080a4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080a4c:	b508      	push	{r3, lr}
 8080a4e:	4b02      	ldr	r3, [pc, #8]	; (8080a58 <system_delay_ms+0xc>)
 8080a50:	681b      	ldr	r3, [r3, #0]
 8080a52:	695b      	ldr	r3, [r3, #20]
 8080a54:	9301      	str	r3, [sp, #4]
 8080a56:	bd08      	pop	{r3, pc}
 8080a58:	080401a4 	.word	0x080401a4

08080a5c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8080a5c:	b508      	push	{r3, lr}
 8080a5e:	4b02      	ldr	r3, [pc, #8]	; (8080a68 <system_thread_set_state+0xc>)
 8080a60:	681b      	ldr	r3, [r3, #0]
 8080a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080a64:	9301      	str	r3, [sp, #4]
 8080a66:	bd08      	pop	{r3, pc}
 8080a68:	080401a4 	.word	0x080401a4

08080a6c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080a6c:	b508      	push	{r3, lr}
 8080a6e:	4b02      	ldr	r3, [pc, #8]	; (8080a78 <application_thread_current+0xc>)
 8080a70:	681b      	ldr	r3, [r3, #0]
 8080a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080a74:	9301      	str	r3, [sp, #4]
 8080a76:	bd08      	pop	{r3, pc}
 8080a78:	080401a4 	.word	0x080401a4

08080a7c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080a7c:	b508      	push	{r3, lr}
 8080a7e:	4b02      	ldr	r3, [pc, #8]	; (8080a88 <application_thread_invoke+0xc>)
 8080a80:	681b      	ldr	r3, [r3, #0]
 8080a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080a84:	9301      	str	r3, [sp, #4]
 8080a86:	bd08      	pop	{r3, pc}
 8080a88:	080401a4 	.word	0x080401a4

08080a8c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8080a8c:	b508      	push	{r3, lr}
 8080a8e:	4b02      	ldr	r3, [pc, #8]	; (8080a98 <system_thread_get_state+0xc>)
 8080a90:	681b      	ldr	r3, [r3, #0]
 8080a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080a94:	9301      	str	r3, [sp, #4]
 8080a96:	bd08      	pop	{r3, pc}
 8080a98:	080401a4 	.word	0x080401a4

08080a9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080a9c:	b508      	push	{r3, lr}
 8080a9e:	4b03      	ldr	r3, [pc, #12]	; (8080aac <system_ctrl_set_app_request_handler+0x10>)
 8080aa0:	681b      	ldr	r3, [r3, #0]
 8080aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080aa6:	9301      	str	r3, [sp, #4]
 8080aa8:	bd08      	pop	{r3, pc}
 8080aaa:	0000      	.short	0x0000
 8080aac:	080401a4 	.word	0x080401a4

08080ab0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080ab0:	b508      	push	{r3, lr}
 8080ab2:	4b03      	ldr	r3, [pc, #12]	; (8080ac0 <system_ctrl_set_result+0x10>)
 8080ab4:	681b      	ldr	r3, [r3, #0]
 8080ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080aba:	9301      	str	r3, [sp, #4]
 8080abc:	bd08      	pop	{r3, pc}
 8080abe:	0000      	.short	0x0000
 8080ac0:	080401a4 	.word	0x080401a4

08080ac4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8080ac4:	b508      	push	{r3, lr}
 8080ac6:	4b02      	ldr	r3, [pc, #8]	; (8080ad0 <spark_variable+0xc>)
 8080ac8:	681b      	ldr	r3, [r3, #0]
 8080aca:	681b      	ldr	r3, [r3, #0]
 8080acc:	9301      	str	r3, [sp, #4]
 8080ace:	bd08      	pop	{r3, pc}
 8080ad0:	080401cc 	.word	0x080401cc

08080ad4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8080ad4:	b508      	push	{r3, lr}
 8080ad6:	4b02      	ldr	r3, [pc, #8]	; (8080ae0 <spark_function+0xc>)
 8080ad8:	681b      	ldr	r3, [r3, #0]
 8080ada:	685b      	ldr	r3, [r3, #4]
 8080adc:	9301      	str	r3, [sp, #4]
 8080ade:	bd08      	pop	{r3, pc}
 8080ae0:	080401cc 	.word	0x080401cc

08080ae4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080ae4:	b508      	push	{r3, lr}
 8080ae6:	4b02      	ldr	r3, [pc, #8]	; (8080af0 <spark_process+0xc>)
 8080ae8:	681b      	ldr	r3, [r3, #0]
 8080aea:	689b      	ldr	r3, [r3, #8]
 8080aec:	9301      	str	r3, [sp, #4]
 8080aee:	bd08      	pop	{r3, pc}
 8080af0:	080401cc 	.word	0x080401cc

08080af4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080af4:	b508      	push	{r3, lr}
 8080af6:	4b02      	ldr	r3, [pc, #8]	; (8080b00 <spark_cloud_flag_connect+0xc>)
 8080af8:	681b      	ldr	r3, [r3, #0]
 8080afa:	68db      	ldr	r3, [r3, #12]
 8080afc:	9301      	str	r3, [sp, #4]
 8080afe:	bd08      	pop	{r3, pc}
 8080b00:	080401cc 	.word	0x080401cc

08080b04 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080b04:	b508      	push	{r3, lr}
 8080b06:	4b02      	ldr	r3, [pc, #8]	; (8080b10 <spark_cloud_flag_connected+0xc>)
 8080b08:	681b      	ldr	r3, [r3, #0]
 8080b0a:	695b      	ldr	r3, [r3, #20]
 8080b0c:	9301      	str	r3, [sp, #4]
 8080b0e:	bd08      	pop	{r3, pc}
 8080b10:	080401cc 	.word	0x080401cc

08080b14 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080b14:	b508      	push	{r3, lr}
 8080b16:	4b02      	ldr	r3, [pc, #8]	; (8080b20 <spark_send_event+0xc>)
 8080b18:	681b      	ldr	r3, [r3, #0]
 8080b1a:	6a1b      	ldr	r3, [r3, #32]
 8080b1c:	9301      	str	r3, [sp, #4]
 8080b1e:	bd08      	pop	{r3, pc}
 8080b20:	080401cc 	.word	0x080401cc

08080b24 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8080b24:	b508      	push	{r3, lr}
 8080b26:	4b02      	ldr	r3, [pc, #8]	; (8080b30 <spark_sync_time_pending+0xc>)
 8080b28:	681b      	ldr	r3, [r3, #0]
 8080b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080b2c:	9301      	str	r3, [sp, #4]
 8080b2e:	bd08      	pop	{r3, pc}
 8080b30:	080401cc 	.word	0x080401cc

08080b34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080b34:	b508      	push	{r3, lr}
 8080b36:	4b02      	ldr	r3, [pc, #8]	; (8080b40 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080b38:	681b      	ldr	r3, [r3, #0]
 8080b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080b3c:	9301      	str	r3, [sp, #4]
 8080b3e:	bd08      	pop	{r3, pc}
 8080b40:	080401cc 	.word	0x080401cc

08080b44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080b44:	b508      	push	{r3, lr}
 8080b46:	4b02      	ldr	r3, [pc, #8]	; (8080b50 <network_connect+0xc>)
 8080b48:	681b      	ldr	r3, [r3, #0]
 8080b4a:	685b      	ldr	r3, [r3, #4]
 8080b4c:	9301      	str	r3, [sp, #4]
 8080b4e:	bd08      	pop	{r3, pc}
 8080b50:	080401c8 	.word	0x080401c8

08080b54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080b54:	b508      	push	{r3, lr}
 8080b56:	4b02      	ldr	r3, [pc, #8]	; (8080b60 <network_connecting+0xc>)
 8080b58:	681b      	ldr	r3, [r3, #0]
 8080b5a:	689b      	ldr	r3, [r3, #8]
 8080b5c:	9301      	str	r3, [sp, #4]
 8080b5e:	bd08      	pop	{r3, pc}
 8080b60:	080401c8 	.word	0x080401c8

08080b64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080b64:	b508      	push	{r3, lr}
 8080b66:	4b02      	ldr	r3, [pc, #8]	; (8080b70 <network_disconnect+0xc>)
 8080b68:	681b      	ldr	r3, [r3, #0]
 8080b6a:	68db      	ldr	r3, [r3, #12]
 8080b6c:	9301      	str	r3, [sp, #4]
 8080b6e:	bd08      	pop	{r3, pc}
 8080b70:	080401c8 	.word	0x080401c8

08080b74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080b74:	b508      	push	{r3, lr}
 8080b76:	4b02      	ldr	r3, [pc, #8]	; (8080b80 <network_ready+0xc>)
 8080b78:	681b      	ldr	r3, [r3, #0]
 8080b7a:	691b      	ldr	r3, [r3, #16]
 8080b7c:	9301      	str	r3, [sp, #4]
 8080b7e:	bd08      	pop	{r3, pc}
 8080b80:	080401c8 	.word	0x080401c8

08080b84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080b84:	b508      	push	{r3, lr}
 8080b86:	4b02      	ldr	r3, [pc, #8]	; (8080b90 <network_on+0xc>)
 8080b88:	681b      	ldr	r3, [r3, #0]
 8080b8a:	695b      	ldr	r3, [r3, #20]
 8080b8c:	9301      	str	r3, [sp, #4]
 8080b8e:	bd08      	pop	{r3, pc}
 8080b90:	080401c8 	.word	0x080401c8

08080b94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080b94:	b508      	push	{r3, lr}
 8080b96:	4b02      	ldr	r3, [pc, #8]	; (8080ba0 <network_off+0xc>)
 8080b98:	681b      	ldr	r3, [r3, #0]
 8080b9a:	699b      	ldr	r3, [r3, #24]
 8080b9c:	9301      	str	r3, [sp, #4]
 8080b9e:	bd08      	pop	{r3, pc}
 8080ba0:	080401c8 	.word	0x080401c8

08080ba4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080ba4:	b508      	push	{r3, lr}
 8080ba6:	4b02      	ldr	r3, [pc, #8]	; (8080bb0 <network_listen+0xc>)
 8080ba8:	681b      	ldr	r3, [r3, #0]
 8080baa:	69db      	ldr	r3, [r3, #28]
 8080bac:	9301      	str	r3, [sp, #4]
 8080bae:	bd08      	pop	{r3, pc}
 8080bb0:	080401c8 	.word	0x080401c8

08080bb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080bb4:	b508      	push	{r3, lr}
 8080bb6:	4b02      	ldr	r3, [pc, #8]	; (8080bc0 <network_listening+0xc>)
 8080bb8:	681b      	ldr	r3, [r3, #0]
 8080bba:	6a1b      	ldr	r3, [r3, #32]
 8080bbc:	9301      	str	r3, [sp, #4]
 8080bbe:	bd08      	pop	{r3, pc}
 8080bc0:	080401c8 	.word	0x080401c8

08080bc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080bc4:	b508      	push	{r3, lr}
 8080bc6:	4b02      	ldr	r3, [pc, #8]	; (8080bd0 <network_set_listen_timeout+0xc>)
 8080bc8:	681b      	ldr	r3, [r3, #0]
 8080bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080bcc:	9301      	str	r3, [sp, #4]
 8080bce:	bd08      	pop	{r3, pc}
 8080bd0:	080401c8 	.word	0x080401c8

08080bd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080bd4:	b508      	push	{r3, lr}
 8080bd6:	4b02      	ldr	r3, [pc, #8]	; (8080be0 <network_get_listen_timeout+0xc>)
 8080bd8:	681b      	ldr	r3, [r3, #0]
 8080bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080bdc:	9301      	str	r3, [sp, #4]
 8080bde:	bd08      	pop	{r3, pc}
 8080be0:	080401c8 	.word	0x080401c8

08080be4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080be4:	b508      	push	{r3, lr}
 8080be6:	4b02      	ldr	r3, [pc, #8]	; (8080bf0 <malloc+0xc>)
 8080be8:	681b      	ldr	r3, [r3, #0]
 8080bea:	681b      	ldr	r3, [r3, #0]
 8080bec:	9301      	str	r3, [sp, #4]
 8080bee:	bd08      	pop	{r3, pc}
 8080bf0:	080401a0 	.word	0x080401a0

08080bf4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080bf4:	b508      	push	{r3, lr}
 8080bf6:	4b02      	ldr	r3, [pc, #8]	; (8080c00 <free+0xc>)
 8080bf8:	681b      	ldr	r3, [r3, #0]
 8080bfa:	685b      	ldr	r3, [r3, #4]
 8080bfc:	9301      	str	r3, [sp, #4]
 8080bfe:	bd08      	pop	{r3, pc}
 8080c00:	080401a0 	.word	0x080401a0

08080c04 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080c04:	b508      	push	{r3, lr}
 8080c06:	4b02      	ldr	r3, [pc, #8]	; (8080c10 <realloc+0xc>)
 8080c08:	681b      	ldr	r3, [r3, #0]
 8080c0a:	689b      	ldr	r3, [r3, #8]
 8080c0c:	9301      	str	r3, [sp, #4]
 8080c0e:	bd08      	pop	{r3, pc}
 8080c10:	080401a0 	.word	0x080401a0

08080c14 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8080c14:	b508      	push	{r3, lr}
 8080c16:	4b02      	ldr	r3, [pc, #8]	; (8080c20 <snprintf+0xc>)
 8080c18:	681b      	ldr	r3, [r3, #0]
 8080c1a:	69db      	ldr	r3, [r3, #28]
 8080c1c:	9301      	str	r3, [sp, #4]
 8080c1e:	bd08      	pop	{r3, pc}
 8080c20:	080401a0 	.word	0x080401a0

08080c24 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080c24:	b508      	push	{r3, lr}
 8080c26:	4b02      	ldr	r3, [pc, #8]	; (8080c30 <abort+0xc>)
 8080c28:	681b      	ldr	r3, [r3, #0]
 8080c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080c2c:	9301      	str	r3, [sp, #4]
 8080c2e:	bd08      	pop	{r3, pc}
 8080c30:	080401a0 	.word	0x080401a0

08080c34 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080c34:	b508      	push	{r3, lr}
 8080c36:	4b02      	ldr	r3, [pc, #8]	; (8080c40 <_malloc_r+0xc>)
 8080c38:	681b      	ldr	r3, [r3, #0]
 8080c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080c3c:	9301      	str	r3, [sp, #4]
 8080c3e:	bd08      	pop	{r3, pc}
 8080c40:	080401a0 	.word	0x080401a0

08080c44 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080c44:	2100      	movs	r1, #0
 8080c46:	f7ff bf01 	b.w	8080a4c <system_delay_ms>

08080c4a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8080c4a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080c4c:	6883      	ldr	r3, [r0, #8]
 8080c4e:	4604      	mov	r4, r0
 8080c50:	b90b      	cbnz	r3, 8080c56 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080c52:	f001 f934 	bl	8081ebe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080c56:	68c3      	ldr	r3, [r0, #12]
 8080c58:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8080c5a:	68a3      	ldr	r3, [r4, #8]
 8080c5c:	b11b      	cbz	r3, 8080c66 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080c5e:	2203      	movs	r2, #3
 8080c60:	4621      	mov	r1, r4
 8080c62:	4620      	mov	r0, r4
 8080c64:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080c66:	4620      	mov	r0, r4
}
 8080c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080c6c:	f7ff ba17 	b.w	808009e <_ZdlPv>

08080c70 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080c70:	2200      	movs	r2, #0
 8080c72:	4611      	mov	r1, r2
 8080c74:	6840      	ldr	r0, [r0, #4]
 8080c76:	f7ff bf7d 	b.w	8080b74 <network_ready>

08080c7a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080c7a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8080c7e:	2600      	movs	r6, #0
 8080c80:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080c82:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080c84:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080c86:	4688      	mov	r8, r1
 8080c88:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8080c8a:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080c8e:	f002 f996 	bl	8082fbe <strlen>
 8080c92:	9600      	str	r6, [sp, #0]
 8080c94:	b281      	uxth	r1, r0
 8080c96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8080c9a:	4622      	mov	r2, r4
 8080c9c:	4638      	mov	r0, r7
 8080c9e:	f7ff fd6d 	bl	808077c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080ca2:	b120      	cbz	r0, 8080cae <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8080ca4:	4631      	mov	r1, r6
 8080ca6:	4628      	mov	r0, r5
 8080ca8:	f000 fc42 	bl	8081530 <_ZN9IPAddressC1Em>
 8080cac:	e003      	b.n	8080cb6 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8080cae:	4621      	mov	r1, r4
 8080cb0:	4628      	mov	r0, r5
 8080cb2:	f000 fc35 	bl	8081520 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8080cb6:	4628      	mov	r0, r5
 8080cb8:	b004      	add	sp, #16
 8080cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080cbe <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8080cbe:	2200      	movs	r2, #0
 8080cc0:	4611      	mov	r1, r2
 8080cc2:	6840      	ldr	r0, [r0, #4]
 8080cc4:	f7ff bf76 	b.w	8080bb4 <network_listening>

08080cc8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8080cc8:	2200      	movs	r2, #0
 8080cca:	4611      	mov	r1, r2
 8080ccc:	6840      	ldr	r0, [r0, #4]
 8080cce:	f7ff bf81 	b.w	8080bd4 <network_get_listen_timeout>

08080cd2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8080cd2:	2200      	movs	r2, #0
 8080cd4:	6840      	ldr	r0, [r0, #4]
 8080cd6:	f7ff bf75 	b.w	8080bc4 <network_set_listen_timeout>

08080cda <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8080cda:	2200      	movs	r2, #0
 8080cdc:	f081 0101 	eor.w	r1, r1, #1
 8080ce0:	6840      	ldr	r0, [r0, #4]
 8080ce2:	f7ff bf5f 	b.w	8080ba4 <network_listen>

08080ce6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080ce6:	2300      	movs	r3, #0
 8080ce8:	461a      	mov	r2, r3
 8080cea:	4619      	mov	r1, r3
 8080cec:	6840      	ldr	r0, [r0, #4]
 8080cee:	f7ff bf51 	b.w	8080b94 <network_off>

08080cf2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080cf2:	2300      	movs	r3, #0
 8080cf4:	461a      	mov	r2, r3
 8080cf6:	4619      	mov	r1, r3
 8080cf8:	6840      	ldr	r0, [r0, #4]
 8080cfa:	f7ff bf43 	b.w	8080b84 <network_on>

08080cfe <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8080cfe:	2200      	movs	r2, #0
 8080d00:	4611      	mov	r1, r2
 8080d02:	6840      	ldr	r0, [r0, #4]
 8080d04:	f7ff bf26 	b.w	8080b54 <network_connecting>

08080d08 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080d08:	2200      	movs	r2, #0
 8080d0a:	2102      	movs	r1, #2
 8080d0c:	6840      	ldr	r0, [r0, #4]
 8080d0e:	f7ff bf29 	b.w	8080b64 <network_disconnect>

08080d12 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080d12:	2300      	movs	r3, #0
 8080d14:	461a      	mov	r2, r3
 8080d16:	6840      	ldr	r0, [r0, #4]
 8080d18:	f7ff bf14 	b.w	8080b44 <network_connect>

08080d1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080d1c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080d1e:	4c0c      	ldr	r4, [pc, #48]	; (8080d50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8080d20:	2528      	movs	r5, #40	; 0x28
 8080d22:	462a      	mov	r2, r5
 8080d24:	2100      	movs	r1, #0
 8080d26:	4620      	mov	r0, r4
 8080d28:	f002 f8f3 	bl	8082f12 <memset>
        cid = -1;
 8080d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080d30:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8080d32:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8080d34:	4c07      	ldr	r4, [pc, #28]	; (8080d54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8080d36:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080d38:	4620      	mov	r0, r4
 8080d3a:	6063      	str	r3, [r4, #4]
 8080d3c:	4b06      	ldr	r3, [pc, #24]	; (8080d58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080d3e:	252c      	movs	r5, #44	; 0x2c
 8080d40:	f840 3b08 	str.w	r3, [r0], #8
 8080d44:	462a      	mov	r2, r5
 8080d46:	2100      	movs	r1, #0
 8080d48:	f002 f8e3 	bl	8082f12 <memset>
        size = sizeof(*this);
 8080d4c:	8125      	strh	r5, [r4, #8]
 8080d4e:	bd38      	pop	{r3, r4, r5, pc}
 8080d50:	200004c0 	.word	0x200004c0
 8080d54:	2000048c 	.word	0x2000048c
 8080d58:	0808323c 	.word	0x0808323c

08080d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080d5c:	4770      	bx	lr

08080d5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080d5e:	2000      	movs	r0, #0
 8080d60:	4770      	bx	lr

08080d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080d62:	b510      	push	{r4, lr}
 8080d64:	4604      	mov	r4, r0
 8080d66:	f7ff f99a 	bl	808009e <_ZdlPv>
 8080d6a:	4620      	mov	r0, r4
 8080d6c:	bd10      	pop	{r4, pc}

08080d6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080d6e:	b508      	push	{r3, lr}
      { delete this; }
 8080d70:	b108      	cbz	r0, 8080d76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8080d72:	f7ff fff6 	bl	8080d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080d76:	bd08      	pop	{r3, pc}

08080d78 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080d78:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080d7a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080d7c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080d7e:	b113      	cbz	r3, 8080d86 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080d80:	2203      	movs	r2, #3
 8080d82:	4601      	mov	r1, r0
 8080d84:	4798      	blx	r3
    }
 8080d86:	4620      	mov	r0, r4
 8080d88:	bd10      	pop	{r4, pc}

08080d8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8080d8a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8080d8c:	68c4      	ldr	r4, [r0, #12]
 8080d8e:	b1d4      	cbz	r4, 8080dc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8080d90:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8080d92:	2b02      	cmp	r3, #2
 8080d94:	d102      	bne.n	8080d9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080d96:	68e0      	ldr	r0, [r4, #12]
 8080d98:	f7ff ff2c 	bl	8080bf4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8080d9c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8080d9e:	b12d      	cbz	r5, 8080dac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080da0:	4628      	mov	r0, r5
 8080da2:	f7ff ffe9 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>
 8080da6:	4628      	mov	r0, r5
 8080da8:	f7ff f979 	bl	808009e <_ZdlPv>
 8080dac:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8080dae:	b12d      	cbz	r5, 8080dbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8080db0:	4628      	mov	r0, r5
 8080db2:	f7ff ffe1 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>
 8080db6:	4628      	mov	r0, r5
 8080db8:	f7ff f971 	bl	808009e <_ZdlPv>
 8080dbc:	4620      	mov	r0, r4
 8080dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080dc2:	f7ff b96c 	b.w	808009e <_ZdlPv>
 8080dc6:	bd38      	pop	{r3, r4, r5, pc}

08080dc8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8080dc8:	b510      	push	{r4, lr}
 8080dca:	b088      	sub	sp, #32
 8080dcc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8080dce:	4668      	mov	r0, sp
 8080dd0:	f000 fd1e 	bl	8081810 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8080dd4:	4669      	mov	r1, sp
 8080dd6:	a804      	add	r0, sp, #16
 8080dd8:	f000 fd3c 	bl	8081854 <_ZN6StringC1ERKS_>
 8080ddc:	a804      	add	r0, sp, #16
 8080dde:	47a0      	blx	r4
 8080de0:	4604      	mov	r4, r0
 8080de2:	a804      	add	r0, sp, #16
 8080de4:	f000 fccd 	bl	8081782 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8080de8:	4668      	mov	r0, sp
 8080dea:	f000 fcca 	bl	8081782 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8080dee:	4620      	mov	r0, r4
 8080df0:	b008      	add	sp, #32
 8080df2:	bd10      	pop	{r4, pc}

08080df4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8080df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080df6:	4607      	mov	r7, r0
 8080df8:	460e      	mov	r6, r1
 8080dfa:	4615      	mov	r5, r2
 8080dfc:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 8080dfe:	2410      	movs	r4, #16
 8080e00:	4622      	mov	r2, r4
 8080e02:	2100      	movs	r1, #0
 8080e04:	4668      	mov	r0, sp
 8080e06:	f002 f884 	bl	8082f12 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8080e0a:	2200      	movs	r2, #0
 8080e0c:	4669      	mov	r1, sp
 8080e0e:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 8080e10:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 8080e14:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8080e16:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8080e18:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8080e1a:	f7ff fe5b 	bl	8080ad4 <spark_function>
}
 8080e1e:	b005      	add	sp, #20
 8080e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080e22 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8080e22:	b513      	push	{r0, r1, r4, lr}
 8080e24:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8080e26:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8080e2a:	2300      	movs	r3, #0
 8080e2c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080e2e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080e30:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8080e32:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080e34:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8080e36:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080e38:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080e3a:	f7ff fac9 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e3e:	4620      	mov	r0, r4
 8080e40:	b002      	add	sp, #8
 8080e42:	bd10      	pop	{r4, pc}

08080e44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080e44:	680b      	ldr	r3, [r1, #0]
 8080e46:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080e48:	b113      	cbz	r3, 8080e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8080e4a:	685a      	ldr	r2, [r3, #4]
 8080e4c:	3201      	adds	r2, #1
 8080e4e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8080e50:	4770      	bx	lr

08080e52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8080e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080e54:	460c      	mov	r4, r1
 8080e56:	4606      	mov	r6, r0
 8080e58:	460f      	mov	r7, r1
 8080e5a:	f854 3b04 	ldr.w	r3, [r4], #4
 8080e5e:	ad02      	add	r5, sp, #8
 8080e60:	f845 3d08 	str.w	r3, [r5, #-8]!
 8080e64:	4621      	mov	r1, r4
 8080e66:	a801      	add	r0, sp, #4
 8080e68:	f7ff ffec 	bl	8080e44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8080e6c:	4629      	mov	r1, r5
 8080e6e:	4630      	mov	r0, r6
 8080e70:	f7ff ffd7 	bl	8080e22 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080e74:	a801      	add	r0, sp, #4
 8080e76:	f7ff faab 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e7a:	4620      	mov	r0, r4
 8080e7c:	f7ff faa8 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8080e80:	4638      	mov	r0, r7
 8080e82:	f7ff f90c 	bl	808009e <_ZdlPv>
        return p;
    }
 8080e86:	4630      	mov	r0, r6
 8080e88:	b003      	add	sp, #12
 8080e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080e8c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080e8c:	b513      	push	{r0, r1, r4, lr}
 8080e8e:	460b      	mov	r3, r1
 8080e90:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080e92:	c803      	ldmia	r0, {r0, r1}
 8080e94:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080e98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080e9c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080ea0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8080ea4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080ea8:	b002      	add	sp, #8
 8080eaa:	bd10      	pop	{r4, pc}

08080eac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080eac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080eae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080eb0:	b90a      	cbnz	r2, 8080eb6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080eb2:	f001 f804 	bl	8081ebe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080eb6:	68c3      	ldr	r3, [r0, #12]
    }
 8080eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ebc:	4718      	bx	r3

08080ebe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080ebe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080ec0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080ec2:	f100 0110 	add.w	r1, r0, #16
 8080ec6:	f7ff fff1 	bl	8080eac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080eca:	bd08      	pop	{r3, pc}

08080ecc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080ecc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080ece:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080ed0:	b90a      	cbnz	r2, 8080ed6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080ed2:	f000 fff4 	bl	8081ebe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ed6:	68c3      	ldr	r3, [r0, #12]
    }
 8080ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080edc:	4718      	bx	r3

08080ede <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080ede:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080ee0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080ee2:	f100 0110 	add.w	r1, r0, #16
 8080ee6:	f7ff fff1 	bl	8080ecc <_ZNKSt8functionIFvRKbEEclES1_>
 8080eea:	bd08      	pop	{r3, pc}

08080eec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080eec:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080eee:	2300      	movs	r3, #0
 8080ef0:	6083      	str	r3, [r0, #8]
 8080ef2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080ef4:	4604      	mov	r4, r0
 8080ef6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080ef8:	b12b      	cbz	r3, 8080f06 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080efa:	2202      	movs	r2, #2
 8080efc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080efe:	68eb      	ldr	r3, [r5, #12]
 8080f00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080f02:	68ab      	ldr	r3, [r5, #8]
 8080f04:	60a3      	str	r3, [r4, #8]
	}
    }
 8080f06:	4620      	mov	r0, r4
 8080f08:	bd38      	pop	{r3, r4, r5, pc}
	...

08080f0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8080f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8080f10:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080f14:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080f16:	f04f 0002 	mov.w	r0, #2
 8080f1a:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080f1c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8080f20:	808b      	strh	r3, [r1, #4]
 8080f22:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080f24:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080f26:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 8080f2a:	600b      	str	r3, [r1, #0]
 8080f2c:	e8d4 1f4f 	ldrexb	r1, [r4]
 8080f30:	4299      	cmp	r1, r3
 8080f32:	d103      	bne.n	8080f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8080f34:	e8c4 0f45 	strexb	r5, r0, [r4]
 8080f38:	2d00      	cmp	r5, #0
 8080f3a:	d1f7      	bne.n	8080f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8080f3c:	d002      	beq.n	8080f44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8080f3e:	f88d 1000 	strb.w	r1, [sp]
 8080f42:	e06b      	b.n	808101c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8080f44:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080f48:	bf1c      	itt	ne
 8080f4a:	60e7      	strne	r7, [r4, #12]
 8080f4c:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080f4e:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8080f52:	bf18      	it	ne
 8080f54:	461f      	movne	r7, r3
 8080f56:	2301      	movs	r3, #1
 8080f58:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080f5a:	f3bf 8f5f 	dmb	sy
 8080f5e:	f104 0308 	add.w	r3, r4, #8
 8080f62:	2000      	movs	r0, #0
 8080f64:	e853 6f00 	ldrex	r6, [r3]
 8080f68:	e843 0200 	strex	r2, r0, [r3]
 8080f6c:	2a00      	cmp	r2, #0
 8080f6e:	d1f9      	bne.n	8080f64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8080f70:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080f74:	2e00      	cmp	r6, #0
 8080f76:	d051      	beq.n	808101c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080f78:	f7ff fd78 	bl	8080a6c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080f7c:	b120      	cbz	r0, 8080f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080f7e:	4629      	mov	r1, r5
 8080f80:	4630      	mov	r0, r6
 8080f82:	f7ff ff93 	bl	8080eac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080f86:	e043      	b.n	8081010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080f88:	4631      	mov	r1, r6
 8080f8a:	4668      	mov	r0, sp
 8080f8c:	f7ff ffae 	bl	8080eec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080f90:	68e0      	ldr	r0, [r4, #12]
 8080f92:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080f96:	b108      	cbz	r0, 8080f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8080f98:	f001 fff6 	bl	8082f88 <strdup>
 8080f9c:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080f9e:	2010      	movs	r0, #16
 8080fa0:	f8ad 5014 	strh.w	r5, [sp, #20]
 8080fa4:	f7ff f879 	bl	808009a <_Znwj>
 8080fa8:	4605      	mov	r5, r0
 8080faa:	b330      	cbz	r0, 8080ffa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080fac:	f04f 0800 	mov.w	r8, #0
 8080fb0:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080fb4:	2018      	movs	r0, #24
 8080fb6:	f7ff f870 	bl	808009a <_Znwj>
 8080fba:	4604      	mov	r4, r0
 8080fbc:	b1c0      	cbz	r0, 8080ff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080fbe:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080fc2:	4601      	mov	r1, r0
 8080fc4:	4668      	mov	r0, sp
 8080fc6:	f7ff ff61 	bl	8080e8c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080fca:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8080fcc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080fce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080fd0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080fd2:	9202      	str	r2, [sp, #8]
 8080fd4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080fd6:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080fd8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8080fdc:	9203      	str	r2, [sp, #12]
 8080fde:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8080fe0:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080fe4:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080fe8:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8080fea:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080fee:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080ff0:	4b0d      	ldr	r3, [pc, #52]	; (8081028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080ff2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080ff4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080ff6:	4b0d      	ldr	r3, [pc, #52]	; (808102c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8080ff8:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080ffa:	9804      	ldr	r0, [sp, #16]
 8080ffc:	f7ff fdfa 	bl	8080bf4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081000:	4668      	mov	r0, sp
 8081002:	f7ff feb9 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081006:	2200      	movs	r2, #0
 8081008:	4629      	mov	r1, r5
 808100a:	4809      	ldr	r0, [pc, #36]	; (8081030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 808100c:	f7ff fd36 	bl	8080a7c <application_thread_invoke>
 8081010:	4630      	mov	r0, r6
 8081012:	f7ff feb1 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081016:	4630      	mov	r0, r6
 8081018:	f7ff f841 	bl	808009e <_ZdlPv>
 808101c:	4638      	mov	r0, r7
 808101e:	f7ff fde9 	bl	8080bf4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8081022:	b006      	add	sp, #24
 8081024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081028:	08080ebf 	.word	0x08080ebf
 808102c:	0808111d 	.word	0x0808111d
 8081030:	08080c4b 	.word	0x08080c4b

08081034 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081038:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808103a:	ad07      	add	r5, sp, #28
 808103c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081040:	4606      	mov	r6, r0
 8081042:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081044:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081046:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081048:	460f      	mov	r7, r1
 808104a:	4690      	mov	r8, r2
 808104c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081050:	f8c5 b004 	str.w	fp, [r5, #4]
 8081054:	f8c5 b008 	str.w	fp, [r5, #8]
 8081058:	9307      	str	r3, [sp, #28]
 808105a:	f7ff f81e 	bl	808009a <_Znwj>
 808105e:	4604      	mov	r4, r0
 8081060:	b138      	cbz	r0, 8081072 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081062:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081066:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808106a:	f8c0 b004 	str.w	fp, [r0, #4]
 808106e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081072:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081074:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081076:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081078:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808107a:	f7ff f80e 	bl	808009a <_Znwj>
 808107e:	b128      	cbz	r0, 808108c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081080:	2301      	movs	r3, #1
 8081082:	6043      	str	r3, [r0, #4]
 8081084:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081086:	4b23      	ldr	r3, [pc, #140]	; (8081114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8081088:	60c4      	str	r4, [r0, #12]
 808108a:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808108c:	4b22      	ldr	r3, [pc, #136]	; (8081118 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808108e:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081090:	2008      	movs	r0, #8
 8081092:	9308      	str	r3, [sp, #32]
 8081094:	f7ff f801 	bl	808009a <_Znwj>
 8081098:	4604      	mov	r4, r0
 808109a:	b128      	cbz	r0, 80810a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808109c:	9b03      	ldr	r3, [sp, #12]
 808109e:	a904      	add	r1, sp, #16
 80810a0:	f840 3b04 	str.w	r3, [r0], #4
 80810a4:	f7ff fece 	bl	8080e44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80810a8:	9500      	str	r5, [sp, #0]
 80810aa:	fa5f f38a 	uxtb.w	r3, sl
 80810ae:	464a      	mov	r2, r9
 80810b0:	4641      	mov	r1, r8
 80810b2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80810b4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80810b6:	f7ff fd2d 	bl	8080b14 <spark_send_event>
 80810ba:	b9b8      	cbnz	r0, 80810ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80810bc:	9b03      	ldr	r3, [sp, #12]
 80810be:	785b      	ldrb	r3, [r3, #1]
 80810c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80810c4:	b993      	cbnz	r3, 80810ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80810c6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80810ca:	a905      	add	r1, sp, #20
 80810cc:	a803      	add	r0, sp, #12
 80810ce:	9205      	str	r2, [sp, #20]
 80810d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80810d4:	f7ff ff1a 	bl	8080f0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80810d8:	9805      	ldr	r0, [sp, #20]
 80810da:	f7ff fd8b 	bl	8080bf4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80810de:	a805      	add	r0, sp, #20
 80810e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80810e2:	f7ff feb6 	bl	8080e52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80810e6:	a806      	add	r0, sp, #24
 80810e8:	f7ff f972 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80810ec:	9b03      	ldr	r3, [sp, #12]
 80810ee:	a904      	add	r1, sp, #16
 80810f0:	a806      	add	r0, sp, #24
 80810f2:	9305      	str	r3, [sp, #20]
 80810f4:	f7ff fea6 	bl	8080e44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80810f8:	a905      	add	r1, sp, #20
 80810fa:	4630      	mov	r0, r6
 80810fc:	f7ff fe91 	bl	8080e22 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081100:	a806      	add	r0, sp, #24
 8081102:	f7ff f965 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081106:	a804      	add	r0, sp, #16
 8081108:	f7ff f962 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 808110c:	4630      	mov	r0, r6
 808110e:	b00b      	add	sp, #44	; 0x2c
 8081110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081114:	08083270 	.word	0x08083270
 8081118:	08081285 	.word	0x08081285

0808111c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808111c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808111e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081120:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081122:	d006      	beq.n	8081132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081124:	2a03      	cmp	r2, #3
 8081126:	d017      	beq.n	8081158 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081128:	2a01      	cmp	r2, #1
 808112a:	d120      	bne.n	808116e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808112c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808112e:	6003      	str	r3, [r0, #0]
	      break;
 8081130:	e01d      	b.n	808116e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081132:	2018      	movs	r0, #24
 8081134:	680e      	ldr	r6, [r1, #0]
 8081136:	f7fe ffb0 	bl	808009a <_Znwj>
 808113a:	4605      	mov	r5, r0
 808113c:	b150      	cbz	r0, 8081154 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808113e:	4631      	mov	r1, r6
 8081140:	f7ff fed4 	bl	8080eec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081144:	6930      	ldr	r0, [r6, #16]
 8081146:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808114a:	b108      	cbz	r0, 8081150 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808114c:	f001 ff1c 	bl	8082f88 <strdup>
 8081150:	6128      	str	r0, [r5, #16]
 8081152:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081154:	6025      	str	r5, [r4, #0]
 8081156:	e00a      	b.n	808116e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081158:	6804      	ldr	r4, [r0, #0]
 808115a:	b144      	cbz	r4, 808116e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808115c:	6920      	ldr	r0, [r4, #16]
 808115e:	f7ff fd49 	bl	8080bf4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081162:	4620      	mov	r0, r4
 8081164:	f7ff fe08 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081168:	4620      	mov	r0, r4
 808116a:	f7fe ff98 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808116e:	2000      	movs	r0, #0
 8081170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081172 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081172:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081174:	2300      	movs	r3, #0
 8081176:	6083      	str	r3, [r0, #8]
 8081178:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808117a:	4604      	mov	r4, r0
 808117c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808117e:	b12b      	cbz	r3, 808118c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081180:	2202      	movs	r2, #2
 8081182:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081184:	68eb      	ldr	r3, [r5, #12]
 8081186:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081188:	68ab      	ldr	r3, [r5, #8]
 808118a:	60a3      	str	r3, [r4, #8]
	}
    }
 808118c:	4620      	mov	r0, r4
 808118e:	bd38      	pop	{r3, r4, r5, pc}

08081190 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081190:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081192:	b570      	push	{r4, r5, r6, lr}
 8081194:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081196:	d006      	beq.n	80811a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081198:	2a03      	cmp	r2, #3
 808119a:	d011      	beq.n	80811c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808119c:	2a01      	cmp	r2, #1
 808119e:	d117      	bne.n	80811d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80811a0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80811a2:	6003      	str	r3, [r0, #0]
	      break;
 80811a4:	e014      	b.n	80811d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80811a6:	2014      	movs	r0, #20
 80811a8:	680e      	ldr	r6, [r1, #0]
 80811aa:	f7fe ff76 	bl	808009a <_Znwj>
 80811ae:	4605      	mov	r5, r0
 80811b0:	b120      	cbz	r0, 80811bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80811b2:	4631      	mov	r1, r6
 80811b4:	f7ff ffdd 	bl	8081172 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80811b8:	7c33      	ldrb	r3, [r6, #16]
 80811ba:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80811bc:	6025      	str	r5, [r4, #0]
 80811be:	e007      	b.n	80811d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80811c0:	6804      	ldr	r4, [r0, #0]
 80811c2:	b12c      	cbz	r4, 80811d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80811c4:	4620      	mov	r0, r4
 80811c6:	f7ff fdd7 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80811ca:	4620      	mov	r0, r4
 80811cc:	f7fe ff67 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80811d0:	2000      	movs	r0, #0
 80811d2:	bd70      	pop	{r4, r5, r6, pc}

080811d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80811d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80811d6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80811d8:	f3bf 8f5f 	dmb	sy
 80811dc:	b087      	sub	sp, #28
 80811de:	2300      	movs	r3, #0
 80811e0:	e850 6f00 	ldrex	r6, [r0]
 80811e4:	e840 3200 	strex	r2, r3, [r0]
 80811e8:	2a00      	cmp	r2, #0
 80811ea:	d1f9      	bne.n	80811e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80811ec:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80811f0:	2e00      	cmp	r6, #0
 80811f2:	d03e      	beq.n	8081272 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80811f4:	4618      	mov	r0, r3
 80811f6:	f7ff fc39 	bl	8080a6c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80811fa:	4607      	mov	r7, r0
 80811fc:	b120      	cbz	r0, 8081208 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80811fe:	4621      	mov	r1, r4
 8081200:	4630      	mov	r0, r6
 8081202:	f7ff fe63 	bl	8080ecc <_ZNKSt8functionIFvRKbEEclES1_>
 8081206:	e02e      	b.n	8081266 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081208:	4631      	mov	r1, r6
 808120a:	a801      	add	r0, sp, #4
 808120c:	f7ff ffb1 	bl	8081172 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081210:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081212:	2010      	movs	r0, #16
 8081214:	f88d 3014 	strb.w	r3, [sp, #20]
 8081218:	f7fe ff3f 	bl	808009a <_Znwj>
 808121c:	4605      	mov	r5, r0
 808121e:	b1d0      	cbz	r0, 8081256 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081220:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081222:	2014      	movs	r0, #20
 8081224:	f7fe ff39 	bl	808009a <_Znwj>
 8081228:	4604      	mov	r4, r0
 808122a:	b178      	cbz	r0, 808124c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808122c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808122e:	4601      	mov	r1, r0
 8081230:	a801      	add	r0, sp, #4
 8081232:	f7ff fe2b 	bl	8080e8c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081236:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081238:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808123a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808123c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808123e:	9203      	str	r2, [sp, #12]
 8081240:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081242:	60e3      	str	r3, [r4, #12]
 8081244:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081248:	9204      	str	r2, [sp, #16]
 808124a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808124c:	4b0a      	ldr	r3, [pc, #40]	; (8081278 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808124e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081250:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081252:	4b0a      	ldr	r3, [pc, #40]	; (808127c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8081254:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081256:	a801      	add	r0, sp, #4
 8081258:	f7ff fd8e 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808125c:	2200      	movs	r2, #0
 808125e:	4629      	mov	r1, r5
 8081260:	4807      	ldr	r0, [pc, #28]	; (8081280 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8081262:	f7ff fc0b 	bl	8080a7c <application_thread_invoke>
 8081266:	4630      	mov	r0, r6
 8081268:	f7ff fd86 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808126c:	4630      	mov	r0, r6
 808126e:	f7fe ff16 	bl	808009e <_ZdlPv>
        }
    }
 8081272:	b007      	add	sp, #28
 8081274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081276:	bf00      	nop
 8081278:	08080edf 	.word	0x08080edf
 808127c:	08081191 	.word	0x08081191
 8081280:	08080c4b 	.word	0x08080c4b

08081284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081284:	b530      	push	{r4, r5, lr}
 8081286:	4604      	mov	r4, r0
 8081288:	b085      	sub	sp, #20
 808128a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808128c:	4668      	mov	r0, sp
 808128e:	4611      	mov	r1, r2
 8081290:	f7ff fddf 	bl	8080e52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081294:	b17c      	cbz	r4, 80812b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081296:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081298:	4628      	mov	r0, r5
 808129a:	b10d      	cbz	r5, 80812a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 808129c:	f001 fe74 	bl	8082f88 <strdup>
 80812a0:	9002      	str	r0, [sp, #8]
 80812a2:	a902      	add	r1, sp, #8
 80812a4:	4668      	mov	r0, sp
 80812a6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80812aa:	f7ff fe2f 	bl	8080f0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80812ae:	9802      	ldr	r0, [sp, #8]
 80812b0:	f7ff fca0 	bl	8080bf4 <free>
 80812b4:	e01d      	b.n	80812f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80812b6:	f04f 0201 	mov.w	r2, #1
 80812ba:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80812bc:	f88d 4008 	strb.w	r4, [sp, #8]
 80812c0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80812c4:	42a3      	cmp	r3, r4
 80812c6:	d103      	bne.n	80812d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80812c8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80812cc:	2900      	cmp	r1, #0
 80812ce:	d1f7      	bne.n	80812c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80812d0:	d002      	beq.n	80812d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80812d2:	f88d 3008 	strb.w	r3, [sp, #8]
 80812d6:	e00c      	b.n	80812f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80812d8:	f110 010c 	adds.w	r1, r0, #12
 80812dc:	f04f 0301 	mov.w	r3, #1
 80812e0:	bf18      	it	ne
 80812e2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80812e4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80812e8:	3004      	adds	r0, #4
 80812ea:	f800 3c03 	strb.w	r3, [r0, #-3]
 80812ee:	f7ff ff71 	bl	80811d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80812f2:	a801      	add	r0, sp, #4
 80812f4:	f7ff f86c 	bl	80803d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80812f8:	b005      	add	sp, #20
 80812fa:	bd30      	pop	{r4, r5, pc}

080812fc <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80812fc:	6800      	ldr	r0, [r0, #0]
 80812fe:	f000 b8d4 	b.w	80814aa <_ZN7TwoWire4lockEv>

08081302 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8081302:	b510      	push	{r4, lr}
 8081304:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8081306:	6001      	str	r1, [r0, #0]
 8081308:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808130a:	b10a      	cbz	r2, 8081310 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808130c:	f7ff fff6 	bl	80812fc <_ZN9FuelGauge4lockEv>
    }
}
 8081310:	4620      	mov	r0, r4
 8081312:	bd10      	pop	{r4, pc}

08081314 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8081314:	b538      	push	{r3, r4, r5, lr}
 8081316:	4604      	mov	r4, r0
 8081318:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808131a:	f000 fd65 	bl	8081de8 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808131e:	462a      	mov	r2, r5
 8081320:	4601      	mov	r1, r0
 8081322:	4620      	mov	r0, r4
 8081324:	f7ff ffed 	bl	8081302 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8081328:	4620      	mov	r0, r4
 808132a:	bd38      	pop	{r3, r4, r5, pc}

0808132c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808132c:	6800      	ldr	r0, [r0, #0]
 808132e:	f000 b8c5 	b.w	80814bc <_ZN7TwoWire6unlockEv>

08081332 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081332:	b510      	push	{r4, lr}
{
    if (lock_) {
 8081334:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081336:	4604      	mov	r4, r0
{
    if (lock_) {
 8081338:	b10b      	cbz	r3, 808133e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808133a:	f7ff fff7 	bl	808132c <_ZN9FuelGauge6unlockEv>
    }
}
 808133e:	4620      	mov	r0, r4
 8081340:	bd10      	pop	{r4, pc}

08081342 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8081342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081344:	4604      	mov	r4, r0
 8081346:	460f      	mov	r7, r1
 8081348:	4616      	mov	r6, r2
 808134a:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 808134c:	f7ff ffd6 	bl	80812fc <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8081350:	6820      	ldr	r0, [r4, #0]
 8081352:	2136      	movs	r1, #54	; 0x36
 8081354:	f000 f89b 	bl	808148e <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8081358:	6820      	ldr	r0, [r4, #0]
 808135a:	4639      	mov	r1, r7
 808135c:	6803      	ldr	r3, [r0, #0]
 808135e:	689b      	ldr	r3, [r3, #8]
 8081360:	4798      	blx	r3
    i2c_.endTransmission(true);
 8081362:	2101      	movs	r1, #1
 8081364:	6820      	ldr	r0, [r4, #0]
 8081366:	f000 f895 	bl	8081494 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808136a:	2202      	movs	r2, #2
 808136c:	2136      	movs	r1, #54	; 0x36
 808136e:	2301      	movs	r3, #1
 8081370:	6820      	ldr	r0, [r4, #0]
 8081372:	f000 f883 	bl	808147c <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8081376:	6820      	ldr	r0, [r4, #0]
 8081378:	6803      	ldr	r3, [r0, #0]
 808137a:	695b      	ldr	r3, [r3, #20]
 808137c:	4798      	blx	r3
 808137e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8081380:	6820      	ldr	r0, [r4, #0]
 8081382:	6803      	ldr	r3, [r0, #0]
 8081384:	695b      	ldr	r3, [r3, #20]
 8081386:	4798      	blx	r3
 8081388:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808138a:	4620      	mov	r0, r4
}
 808138c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8081390:	f7ff bfcc 	b.w	808132c <_ZN9FuelGauge6unlockEv>

08081394 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8081394:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8081396:	2200      	movs	r2, #0
	byte LSB = 0;
 8081398:	ab02      	add	r3, sp, #8
 808139a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808139e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80813a2:	2104      	movs	r1, #4
 80813a4:	f10d 0206 	add.w	r2, sp, #6
 80813a8:	f7ff ffcb 	bl	8081342 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80813ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80813b0:	f001 f822 	bl	80823f8 <__aeabi_i2d>
 80813b4:	2200      	movs	r2, #0
 80813b6:	4b08      	ldr	r3, [pc, #32]	; (80813d8 <_ZN9FuelGauge6getSoCEv+0x44>)
 80813b8:	f001 f884 	bl	80824c4 <__aeabi_dmul>
 80813bc:	f001 fabc 	bl	8082938 <__aeabi_d2f>
 80813c0:	4604      	mov	r4, r0
 80813c2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80813c6:	f001 fbc1 	bl	8082b4c <__aeabi_i2f>
 80813ca:	4601      	mov	r1, r0
 80813cc:	4620      	mov	r0, r4
 80813ce:	f001 fb09 	bl	80829e4 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 80813d2:	b002      	add	sp, #8
 80813d4:	bd10      	pop	{r4, pc}
 80813d6:	bf00      	nop
 80813d8:	3f700000 	.word	0x3f700000

080813dc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80813dc:	4770      	bx	lr

080813de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80813de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80813e0:	4606      	mov	r6, r0
 80813e2:	4615      	mov	r5, r2
 80813e4:	460c      	mov	r4, r1
 80813e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80813e8:	42bc      	cmp	r4, r7
 80813ea:	d006      	beq.n	80813fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80813ec:	6833      	ldr	r3, [r6, #0]
 80813ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80813f2:	689b      	ldr	r3, [r3, #8]
 80813f4:	4630      	mov	r0, r6
 80813f6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80813f8:	e7f6      	b.n	80813e8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80813fa:	4628      	mov	r0, r5
 80813fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080813fe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80813fe:	2200      	movs	r2, #0
 8081400:	7c00      	ldrb	r0, [r0, #16]
 8081402:	f7ff ba4b 	b.w	808089c <HAL_I2C_Write_Data>

08081406 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8081406:	2100      	movs	r1, #0
 8081408:	7c00      	ldrb	r0, [r0, #16]
 808140a:	f7ff ba4f 	b.w	80808ac <HAL_I2C_Available_Data>

0808140e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808140e:	2100      	movs	r1, #0
 8081410:	7c00      	ldrb	r0, [r0, #16]
 8081412:	f7ff ba53 	b.w	80808bc <HAL_I2C_Read_Data>

08081416 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8081416:	2100      	movs	r1, #0
 8081418:	7c00      	ldrb	r0, [r0, #16]
 808141a:	f7ff ba57 	b.w	80808cc <HAL_I2C_Peek_Data>

0808141e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808141e:	2100      	movs	r1, #0
 8081420:	7c00      	ldrb	r0, [r0, #16]
 8081422:	f7ff ba5b 	b.w	80808dc <HAL_I2C_Flush_Data>

08081426 <_ZN7TwoWireD0Ev>:
 8081426:	b510      	push	{r4, lr}
 8081428:	4604      	mov	r4, r0
 808142a:	f7fe fe38 	bl	808009e <_ZdlPv>
 808142e:	4620      	mov	r0, r4
 8081430:	bd10      	pop	{r4, pc}
	...

08081434 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081434:	b510      	push	{r4, lr}
 8081436:	4604      	mov	r4, r0
 8081438:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808143e:	60a3      	str	r3, [r4, #8]
 8081440:	4b04      	ldr	r3, [pc, #16]	; (8081454 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081442:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8081444:	7420      	strb	r0, [r4, #16]
 8081446:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081448:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808144a:	f7ff fa57 	bl	80808fc <HAL_I2C_Init>

}
 808144e:	4620      	mov	r0, r4
 8081450:	bd10      	pop	{r4, pc}
 8081452:	bf00      	nop
 8081454:	0808328c 	.word	0x0808328c

08081458 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8081458:	2300      	movs	r3, #0
 808145a:	461a      	mov	r2, r3
 808145c:	4619      	mov	r1, r3
 808145e:	7c00      	ldrb	r0, [r0, #16]
 8081460:	f7ff b9fc 	b.w	808085c <HAL_I2C_Begin>

08081464 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8081464:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8081466:	2400      	movs	r4, #0
 8081468:	7c00      	ldrb	r0, [r0, #16]
 808146a:	9400      	str	r4, [sp, #0]
 808146c:	f7ff f9fe 	bl	808086c <HAL_I2C_Request_Data>
  return result;
}
 8081470:	b2c0      	uxtb	r0, r0
 8081472:	b002      	add	sp, #8
 8081474:	bd10      	pop	{r4, pc}

08081476 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8081476:	2301      	movs	r3, #1
 8081478:	f7ff bff4 	b.w	8081464 <_ZN7TwoWire11requestFromEhhh>

0808147c <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808147c:	b2db      	uxtb	r3, r3
 808147e:	b2d2      	uxtb	r2, r2
 8081480:	b2c9      	uxtb	r1, r1
 8081482:	f7ff bfef 	b.w	8081464 <_ZN7TwoWire11requestFromEhhh>

08081486 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8081486:	2200      	movs	r2, #0
 8081488:	7c00      	ldrb	r0, [r0, #16]
 808148a:	f7ff b9f7 	b.w	808087c <HAL_I2C_Begin_Transmission>

0808148e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808148e:	b2c9      	uxtb	r1, r1
 8081490:	f7ff bff9 	b.w	8081486 <_ZN7TwoWire17beginTransmissionEh>

08081494 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8081494:	2200      	movs	r2, #0
 8081496:	7c00      	ldrb	r0, [r0, #16]
 8081498:	f7ff b9f8 	b.w	808088c <HAL_I2C_End_Transmission>

0808149c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808149c:	2101      	movs	r1, #1
 808149e:	f7ff bff9 	b.w	8081494 <_ZN7TwoWire15endTransmissionEh>

080814a2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80814a2:	2100      	movs	r1, #0
 80814a4:	7c00      	ldrb	r0, [r0, #16]
 80814a6:	f7ff ba21 	b.w	80808ec <HAL_I2C_Is_Enabled>

080814aa <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80814aa:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80814ac:	2100      	movs	r1, #0
 80814ae:	7c00      	ldrb	r0, [r0, #16]
 80814b0:	f7ff fa2c 	bl	808090c <HAL_I2C_Acquire>
}
 80814b4:	fab0 f080 	clz	r0, r0
 80814b8:	0940      	lsrs	r0, r0, #5
 80814ba:	bd08      	pop	{r3, pc}

080814bc <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80814bc:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80814be:	2100      	movs	r1, #0
 80814c0:	7c00      	ldrb	r0, [r0, #16]
 80814c2:	f7ff fa2b 	bl	808091c <HAL_I2C_Release>
}
 80814c6:	fab0 f080 	clz	r0, r0
 80814ca:	0940      	lsrs	r0, r0, #5
 80814cc:	bd08      	pop	{r3, pc}

080814ce <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80814ce:	4770      	bx	lr

080814d0 <_ZN9IPAddressD0Ev>:
 80814d0:	b510      	push	{r4, lr}
 80814d2:	4604      	mov	r4, r0
 80814d4:	f7fe fde3 	bl	808009e <_ZdlPv>
 80814d8:	4620      	mov	r0, r4
 80814da:	bd10      	pop	{r4, pc}

080814dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80814dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80814de:	460f      	mov	r7, r1
 80814e0:	f100 0608 	add.w	r6, r0, #8
 80814e4:	1d05      	adds	r5, r0, #4
 80814e6:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80814e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80814ec:	220a      	movs	r2, #10
 80814ee:	4638      	mov	r0, r7
 80814f0:	f000 f911 	bl	8081716 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80814f4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80814f6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80814f8:	d007      	beq.n	808150a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80814fa:	2c00      	cmp	r4, #0
 80814fc:	d0f4      	beq.n	80814e8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80814fe:	212e      	movs	r1, #46	; 0x2e
 8081500:	4638      	mov	r0, r7
 8081502:	f000 f8c5 	bl	8081690 <_ZN5Print5printEc>
 8081506:	4404      	add	r4, r0
 8081508:	e7ee      	b.n	80814e8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808150a:	4620      	mov	r0, r4
 808150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081510 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8081510:	4a02      	ldr	r2, [pc, #8]	; (808151c <_ZN9IPAddressC1Ev+0xc>)
 8081512:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8081514:	2200      	movs	r2, #0
 8081516:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8081518:	4770      	bx	lr
 808151a:	bf00      	nop
 808151c:	080832b4 	.word	0x080832b4

08081520 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8081520:	4a02      	ldr	r2, [pc, #8]	; (808152c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8081522:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8081524:	680a      	ldr	r2, [r1, #0]
 8081526:	6042      	str	r2, [r0, #4]
}
 8081528:	4770      	bx	lr
 808152a:	bf00      	nop
 808152c:	080832b4 	.word	0x080832b4

08081530 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081530:	4a01      	ldr	r2, [pc, #4]	; (8081538 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8081532:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081534:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8081536:	4770      	bx	lr
 8081538:	080832b4 	.word	0x080832b4

0808153c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808153c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808153e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081542:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8081546:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808154a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808154e:	6041      	str	r1, [r0, #4]
 8081550:	bd10      	pop	{r4, pc}
	...

08081554 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081556:	4d04      	ldr	r5, [pc, #16]	; (8081568 <_ZN9IPAddressC1Ehhhh+0x14>)
 8081558:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808155a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808155e:	9500      	str	r5, [sp, #0]
 8081560:	f7ff ffec 	bl	808153c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081564:	b003      	add	sp, #12
 8081566:	bd30      	pop	{r4, r5, pc}
 8081568:	080832b4 	.word	0x080832b4

0808156c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808156c:	4a01      	ldr	r2, [pc, #4]	; (8081574 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808156e:	4b02      	ldr	r3, [pc, #8]	; (8081578 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081570:	601a      	str	r2, [r3, #0]
 8081572:	4770      	bx	lr
 8081574:	08083378 	.word	0x08083378
 8081578:	200004e8 	.word	0x200004e8

0808157c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808157c:	2300      	movs	r3, #0
 808157e:	461a      	mov	r2, r3
 8081580:	6840      	ldr	r0, [r0, #4]
 8081582:	f7ff badf 	b.w	8080b44 <network_connect>

08081586 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081586:	2200      	movs	r2, #0
 8081588:	2102      	movs	r1, #2
 808158a:	6840      	ldr	r0, [r0, #4]
 808158c:	f7ff baea 	b.w	8080b64 <network_disconnect>

08081590 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081590:	2200      	movs	r2, #0
 8081592:	4611      	mov	r1, r2
 8081594:	6840      	ldr	r0, [r0, #4]
 8081596:	f7ff badd 	b.w	8080b54 <network_connecting>

0808159a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808159a:	2200      	movs	r2, #0
 808159c:	4611      	mov	r1, r2
 808159e:	6840      	ldr	r0, [r0, #4]
 80815a0:	f7ff bae8 	b.w	8080b74 <network_ready>

080815a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80815a4:	2300      	movs	r3, #0
 80815a6:	461a      	mov	r2, r3
 80815a8:	4619      	mov	r1, r3
 80815aa:	6840      	ldr	r0, [r0, #4]
 80815ac:	f7ff baea 	b.w	8080b84 <network_on>

080815b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80815b0:	2300      	movs	r3, #0
 80815b2:	461a      	mov	r2, r3
 80815b4:	4619      	mov	r1, r3
 80815b6:	6840      	ldr	r0, [r0, #4]
 80815b8:	f7ff baec 	b.w	8080b94 <network_off>

080815bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80815bc:	2200      	movs	r2, #0
 80815be:	f081 0101 	eor.w	r1, r1, #1
 80815c2:	6840      	ldr	r0, [r0, #4]
 80815c4:	f7ff baee 	b.w	8080ba4 <network_listen>

080815c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80815c8:	2200      	movs	r2, #0
 80815ca:	6840      	ldr	r0, [r0, #4]
 80815cc:	f7ff bafa 	b.w	8080bc4 <network_set_listen_timeout>

080815d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80815d0:	2200      	movs	r2, #0
 80815d2:	4611      	mov	r1, r2
 80815d4:	6840      	ldr	r0, [r0, #4]
 80815d6:	f7ff bafd 	b.w	8080bd4 <network_get_listen_timeout>

080815da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80815da:	2200      	movs	r2, #0
 80815dc:	4611      	mov	r1, r2
 80815de:	6840      	ldr	r0, [r0, #4]
 80815e0:	f7ff bae8 	b.w	8080bb4 <network_listening>

080815e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80815e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80815e6:	4617      	mov	r7, r2
 80815e8:	b087      	sub	sp, #28
 80815ea:	4605      	mov	r5, r0
    IPAddress addr;
 80815ec:	a804      	add	r0, sp, #16
 80815ee:	f7ff ff8f 	bl	8081510 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80815f2:	2600      	movs	r6, #0
 80815f4:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80815f6:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80815f8:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80815fc:	f001 fcdf 	bl	8082fbe <strlen>
 8081600:	4b0a      	ldr	r3, [pc, #40]	; (808162c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8081602:	9600      	str	r6, [sp, #0]
 8081604:	b281      	uxth	r1, r0
 8081606:	685b      	ldr	r3, [r3, #4]
 8081608:	4622      	mov	r2, r4
 808160a:	4638      	mov	r0, r7
 808160c:	f7ff f8b6 	bl	808077c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081610:	b120      	cbz	r0, 808161c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081612:	4631      	mov	r1, r6
 8081614:	4628      	mov	r0, r5
 8081616:	f7ff ff8b 	bl	8081530 <_ZN9IPAddressC1Em>
 808161a:	e003      	b.n	8081624 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808161c:	4621      	mov	r1, r4
 808161e:	4628      	mov	r0, r5
 8081620:	f7ff ff7e 	bl	8081520 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8081624:	4628      	mov	r0, r5
 8081626:	b007      	add	sp, #28
 8081628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808162a:	bf00      	nop
 808162c:	2000048c 	.word	0x2000048c

08081630 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081630:	4b02      	ldr	r3, [pc, #8]	; (808163c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081632:	4a03      	ldr	r2, [pc, #12]	; (8081640 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081634:	601a      	str	r2, [r3, #0]
 8081636:	2200      	movs	r2, #0
 8081638:	605a      	str	r2, [r3, #4]
 808163a:	4770      	bx	lr
 808163c:	200004ec 	.word	0x200004ec
 8081640:	080833ac 	.word	0x080833ac

08081644 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8081644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081646:	4606      	mov	r6, r0
 8081648:	460d      	mov	r5, r1
 808164a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808164c:	2400      	movs	r4, #0
  while (size--) {
 808164e:	42bd      	cmp	r5, r7
 8081650:	d00c      	beq.n	808166c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8081652:	6833      	ldr	r3, [r6, #0]
 8081654:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081658:	689b      	ldr	r3, [r3, #8]
 808165a:	4630      	mov	r0, r6
 808165c:	4798      	blx	r3
     if (chunk>=0)
 808165e:	2800      	cmp	r0, #0
 8081660:	db01      	blt.n	8081666 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8081662:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8081664:	e7f3      	b.n	808164e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8081666:	2c00      	cmp	r4, #0
 8081668:	bf08      	it	eq
 808166a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808166c:	4620      	mov	r0, r4
 808166e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081670 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081670:	b570      	push	{r4, r5, r6, lr}
 8081672:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081674:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081676:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081678:	b149      	cbz	r1, 808168e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808167a:	f001 fca0 	bl	8082fbe <strlen>
 808167e:	682b      	ldr	r3, [r5, #0]
 8081680:	4602      	mov	r2, r0
 8081682:	4621      	mov	r1, r4
 8081684:	4628      	mov	r0, r5
    }
 8081686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808168a:	68db      	ldr	r3, [r3, #12]
 808168c:	4718      	bx	r3
    }
 808168e:	bd70      	pop	{r4, r5, r6, pc}

08081690 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081690:	6803      	ldr	r3, [r0, #0]
 8081692:	689b      	ldr	r3, [r3, #8]
 8081694:	4718      	bx	r3

08081696 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081696:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8081698:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808169a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808169c:	f7ff fff8 	bl	8081690 <_ZN5Print5printEc>
  n += print('\n');
 80816a0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80816a2:	4604      	mov	r4, r0
  n += print('\n');
 80816a4:	4628      	mov	r0, r5
 80816a6:	f7ff fff3 	bl	8081690 <_ZN5Print5printEc>
  return n;
}
 80816aa:	4420      	add	r0, r4
 80816ac:	bd38      	pop	{r3, r4, r5, pc}

080816ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80816ae:	b538      	push	{r3, r4, r5, lr}
 80816b0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80816b2:	f7ff ffdd 	bl	8081670 <_ZN5Print5writeEPKc>
 80816b6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80816b8:	4628      	mov	r0, r5
 80816ba:	f7ff ffec 	bl	8081696 <_ZN5Print7printlnEv>
  return n;
}
 80816be:	4420      	add	r0, r4
 80816c0:	bd38      	pop	{r3, r4, r5, pc}

080816c2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80816c2:	2a01      	cmp	r2, #1
 80816c4:	bf98      	it	ls
 80816c6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80816c8:	b530      	push	{r4, r5, lr}
 80816ca:	460b      	mov	r3, r1
 80816cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80816ce:	2100      	movs	r1, #0
 80816d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80816d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80816d8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80816dc:	fb05 3312 	mls	r3, r5, r2, r3
 80816e0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80816e2:	2b09      	cmp	r3, #9
 80816e4:	bf94      	ite	ls
 80816e6:	3330      	addls	r3, #48	; 0x30
 80816e8:	3337      	addhi	r3, #55	; 0x37
 80816ea:	b2db      	uxtb	r3, r3
 80816ec:	4621      	mov	r1, r4
 80816ee:	f804 3901 	strb.w	r3, [r4], #-1
 80816f2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80816f4:	2d00      	cmp	r5, #0
 80816f6:	d1ef      	bne.n	80816d8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80816f8:	f7ff ffba 	bl	8081670 <_ZN5Print5writeEPKc>
}
 80816fc:	b00b      	add	sp, #44	; 0x2c
 80816fe:	bd30      	pop	{r4, r5, pc}

08081700 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8081700:	b410      	push	{r4}
  if (base == 0) return write(n);
 8081702:	b922      	cbnz	r2, 808170e <_ZN5Print5printEmi+0xe>
 8081704:	6803      	ldr	r3, [r0, #0]
 8081706:	b2c9      	uxtb	r1, r1
 8081708:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808170a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808170c:	4718      	bx	r3
  else return printNumber(n, base);
 808170e:	b2d2      	uxtb	r2, r2
}
 8081710:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081712:	f7ff bfd6 	b.w	80816c2 <_ZN5Print11printNumberEmh>

08081716 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8081716:	f7ff bff3 	b.w	8081700 <_ZN5Print5printEmi>

0808171a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808171a:	b510      	push	{r4, lr}
 808171c:	4604      	mov	r4, r0
 808171e:	f7ff fb2b 	bl	8080d78 <_ZNSt14_Function_baseD1Ev>
 8081722:	4620      	mov	r0, r4
 8081724:	bd10      	pop	{r4, pc}
	...

08081728 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081728:	4803      	ldr	r0, [pc, #12]	; (8081738 <_GLOBAL__sub_I_RGB+0x10>)
 808172a:	2300      	movs	r3, #0
 808172c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808172e:	4a03      	ldr	r2, [pc, #12]	; (808173c <_GLOBAL__sub_I_RGB+0x14>)
 8081730:	4903      	ldr	r1, [pc, #12]	; (8081740 <_GLOBAL__sub_I_RGB+0x18>)
 8081732:	f000 bbbf 	b.w	8081eb4 <__aeabi_atexit>
 8081736:	bf00      	nop
 8081738:	200004f4 	.word	0x200004f4
 808173c:	2000046c 	.word	0x2000046c
 8081740:	0808171b 	.word	0x0808171b

08081744 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081744:	4770      	bx	lr

08081746 <_ZN8SPIClassD0Ev>:
 8081746:	b510      	push	{r4, lr}
 8081748:	4604      	mov	r4, r0
 808174a:	f7fe fca8 	bl	808009e <_ZdlPv>
 808174e:	4620      	mov	r0, r4
 8081750:	bd10      	pop	{r4, pc}
	...

08081754 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081754:	b570      	push	{r4, r5, r6, lr}
 8081756:	4604      	mov	r4, r0
 8081758:	460e      	mov	r6, r1
 808175a:	4b07      	ldr	r3, [pc, #28]	; (8081778 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808175c:	2500      	movs	r5, #0
 808175e:	6003      	str	r3, [r0, #0]
 8081760:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081764:	f7ff f812 	bl	808078c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081768:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808176a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808176c:	f7ff f8de 	bl	808092c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081770:	60a5      	str	r5, [r4, #8]
}
 8081772:	4620      	mov	r0, r4
 8081774:	bd70      	pop	{r4, r5, r6, pc}
 8081776:	bf00      	nop
 8081778:	080833e0 	.word	0x080833e0

0808177c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808177c:	7900      	ldrb	r0, [r0, #4]
 808177e:	f7ff b8dd 	b.w	808093c <HAL_SPI_Is_Enabled>

08081782 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8081782:	b510      	push	{r4, lr}
 8081784:	4604      	mov	r4, r0
{
	free(buffer);
 8081786:	6800      	ldr	r0, [r0, #0]
 8081788:	f7ff fa34 	bl	8080bf4 <free>
}
 808178c:	4620      	mov	r0, r4
 808178e:	bd10      	pop	{r4, pc}

08081790 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8081790:	b510      	push	{r4, lr}
 8081792:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8081794:	6800      	ldr	r0, [r0, #0]
 8081796:	b108      	cbz	r0, 808179c <_ZN6String10invalidateEv+0xc>
 8081798:	f7ff fa2c 	bl	8080bf4 <free>
	buffer = NULL;
 808179c:	2300      	movs	r3, #0
 808179e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80817a0:	60a3      	str	r3, [r4, #8]
 80817a2:	6063      	str	r3, [r4, #4]
 80817a4:	bd10      	pop	{r4, pc}

080817a6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80817a6:	b538      	push	{r3, r4, r5, lr}
 80817a8:	4604      	mov	r4, r0
 80817aa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80817ac:	6800      	ldr	r0, [r0, #0]
 80817ae:	3101      	adds	r1, #1
 80817b0:	f7ff fa28 	bl	8080c04 <realloc>
	if (newbuffer) {
 80817b4:	b110      	cbz	r0, 80817bc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80817b6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80817ba:	2001      	movs	r0, #1
	}
	return 0;
}
 80817bc:	bd38      	pop	{r3, r4, r5, pc}

080817be <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80817be:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80817c0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80817c2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80817c4:	b113      	cbz	r3, 80817cc <_ZN6String7reserveEj+0xe>
 80817c6:	6843      	ldr	r3, [r0, #4]
 80817c8:	428b      	cmp	r3, r1
 80817ca:	d207      	bcs.n	80817dc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80817cc:	4620      	mov	r0, r4
 80817ce:	f7ff ffea 	bl	80817a6 <_ZN6String12changeBufferEj>
 80817d2:	b120      	cbz	r0, 80817de <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80817d4:	68a3      	ldr	r3, [r4, #8]
 80817d6:	b90b      	cbnz	r3, 80817dc <_ZN6String7reserveEj+0x1e>
 80817d8:	6822      	ldr	r2, [r4, #0]
 80817da:	7013      	strb	r3, [r2, #0]
 80817dc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80817de:	bd10      	pop	{r4, pc}

080817e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80817e0:	b570      	push	{r4, r5, r6, lr}
 80817e2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80817e4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80817e6:	4604      	mov	r4, r0
 80817e8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80817ea:	f7ff ffe8 	bl	80817be <_ZN6String7reserveEj>
 80817ee:	b918      	cbnz	r0, 80817f8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80817f0:	4620      	mov	r0, r4
 80817f2:	f7ff ffcd 	bl	8081790 <_ZN6String10invalidateEv>
		return *this;
 80817f6:	e009      	b.n	808180c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80817f8:	462a      	mov	r2, r5
 80817fa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80817fc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80817fe:	6820      	ldr	r0, [r4, #0]
 8081800:	f001 fb7c 	bl	8082efc <memcpy>
	buffer[len] = 0;
 8081804:	6822      	ldr	r2, [r4, #0]
 8081806:	68a3      	ldr	r3, [r4, #8]
 8081808:	2100      	movs	r1, #0
 808180a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808180c:	4620      	mov	r0, r4
 808180e:	bd70      	pop	{r4, r5, r6, pc}

08081810 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081810:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081812:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081814:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081816:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081818:	6043      	str	r3, [r0, #4]
	len = 0;
 808181a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808181c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808181e:	460d      	mov	r5, r1
 8081820:	b139      	cbz	r1, 8081832 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081822:	4608      	mov	r0, r1
 8081824:	f001 fbcb 	bl	8082fbe <strlen>
 8081828:	4629      	mov	r1, r5
 808182a:	4602      	mov	r2, r0
 808182c:	4620      	mov	r0, r4
 808182e:	f7ff ffd7 	bl	80817e0 <_ZN6String4copyEPKcj>
}
 8081832:	4620      	mov	r0, r4
 8081834:	bd38      	pop	{r3, r4, r5, pc}

08081836 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8081836:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8081838:	b510      	push	{r4, lr}
 808183a:	460b      	mov	r3, r1
 808183c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808183e:	d007      	beq.n	8081850 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8081840:	6809      	ldr	r1, [r1, #0]
 8081842:	b119      	cbz	r1, 808184c <_ZN6StringaSERKS_+0x16>
 8081844:	689a      	ldr	r2, [r3, #8]
 8081846:	f7ff ffcb 	bl	80817e0 <_ZN6String4copyEPKcj>
 808184a:	e001      	b.n	8081850 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808184c:	f7ff ffa0 	bl	8081790 <_ZN6String10invalidateEv>

	return *this;
}
 8081850:	4620      	mov	r0, r4
 8081852:	bd10      	pop	{r4, pc}

08081854 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8081854:	b510      	push	{r4, lr}
 8081856:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081858:	2300      	movs	r3, #0
 808185a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808185c:	6043      	str	r3, [r0, #4]
	len = 0;
 808185e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081860:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8081862:	f7ff ffe8 	bl	8081836 <_ZN6StringaSERKS_>
}
 8081866:	4620      	mov	r0, r4
 8081868:	bd10      	pop	{r4, pc}

0808186a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808186a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808186c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808186e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8081870:	b912      	cbnz	r2, 8081878 <_ZNK6String6equalsEPKc+0xe>
 8081872:	b919      	cbnz	r1, 808187c <_ZNK6String6equalsEPKc+0x12>
 8081874:	2001      	movs	r0, #1
 8081876:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8081878:	b911      	cbnz	r1, 8081880 <_ZNK6String6equalsEPKc+0x16>
 808187a:	6803      	ldr	r3, [r0, #0]
 808187c:	7818      	ldrb	r0, [r3, #0]
 808187e:	e002      	b.n	8081886 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8081880:	6800      	ldr	r0, [r0, #0]
 8081882:	f001 fb77 	bl	8082f74 <strcmp>
 8081886:	fab0 f080 	clz	r0, r0
 808188a:	0940      	lsrs	r0, r0, #5
}
 808188c:	bd08      	pop	{r3, pc}
	...

08081890 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081894:	4b03      	ldr	r3, [pc, #12]	; (80818a4 <_GLOBAL__sub_I_System+0x14>)
 8081896:	2000      	movs	r0, #0
 8081898:	7018      	strb	r0, [r3, #0]
 808189a:	8058      	strh	r0, [r3, #2]
 808189c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808189e:	f7ff b8cd 	b.w	8080a3c <set_system_mode>
 80818a2:	bf00      	nop
 80818a4:	20000504 	.word	0x20000504

080818a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80818a8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80818aa:	2000      	movs	r0, #0
 80818ac:	f7ff f93a 	bl	8080b24 <spark_sync_time_pending>
 80818b0:	b128      	cbz	r0, 80818be <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80818b2:	f7ff f927 	bl	8080b04 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80818b6:	f080 0001 	eor.w	r0, r0, #1
 80818ba:	b2c0      	uxtb	r0, r0
 80818bc:	bd08      	pop	{r3, pc}
 80818be:	2001      	movs	r0, #1
    }
 80818c0:	bd08      	pop	{r3, pc}

080818c2 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80818c2:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80818c4:	2000      	movs	r0, #0
 80818c6:	f7fe ff81 	bl	80807cc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80818ca:	4604      	mov	r4, r0
 80818cc:	b968      	cbnz	r0, 80818ea <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80818ce:	f7ff f8ad 	bl	8080a2c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80818d2:	2801      	cmp	r0, #1
 80818d4:	d10b      	bne.n	80818ee <_ZN9TimeClass7isValidEv+0x2c>
 80818d6:	4620      	mov	r0, r4
 80818d8:	f7ff f8d8 	bl	8080a8c <system_thread_get_state>
 80818dc:	b938      	cbnz	r0, 80818ee <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80818de:	f7ff ffe3 	bl	80818a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80818e2:	b930      	cbnz	r0, 80818f2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80818e4:	f7ff f8fe 	bl	8080ae4 <spark_process>
 80818e8:	e7f9      	b.n	80818de <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80818ea:	2001      	movs	r0, #1
 80818ec:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80818ee:	2000      	movs	r0, #0
 80818f0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80818f2:	f7ff ffd9 	bl	80818a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80818f6:	2000      	movs	r0, #0
 80818f8:	f7fe ff68 	bl	80807cc <HAL_RTC_Time_Is_Valid>
 80818fc:	3000      	adds	r0, #0
 80818fe:	bf18      	it	ne
 8081900:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8081902:	bd10      	pop	{r4, pc}

08081904 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8081904:	b508      	push	{r3, lr}
    (void)isValid();
 8081906:	f7ff ffdc 	bl	80818c2 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808190a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 808190e:	f7fe bf55 	b.w	80807bc <HAL_RTC_Get_UnixTime>
	...

08081914 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081914:	4b02      	ldr	r3, [pc, #8]	; (8081920 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081916:	681a      	ldr	r2, [r3, #0]
 8081918:	4b02      	ldr	r3, [pc, #8]	; (8081924 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808191a:	601a      	str	r2, [r3, #0]
 808191c:	4770      	bx	lr
 808191e:	bf00      	nop
 8081920:	20000404 	.word	0x20000404
 8081924:	2000050c 	.word	0x2000050c

08081928 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8081928:	4770      	bx	lr

0808192a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808192a:	7441      	strb	r1, [r0, #17]
 808192c:	4770      	bx	lr

0808192e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808192e:	7c00      	ldrb	r0, [r0, #16]
 8081930:	f7ff b844 	b.w	80809bc <HAL_USART_Available_Data_For_Write>

08081934 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8081934:	7c00      	ldrb	r0, [r0, #16]
 8081936:	f7ff b819 	b.w	808096c <HAL_USART_Available_Data>

0808193a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 808193a:	7c00      	ldrb	r0, [r0, #16]
 808193c:	f7ff b826 	b.w	808098c <HAL_USART_Peek_Data>

08081940 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8081940:	7c00      	ldrb	r0, [r0, #16]
 8081942:	f7ff b81b 	b.w	808097c <HAL_USART_Read_Data>

08081946 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8081946:	7c00      	ldrb	r0, [r0, #16]
 8081948:	f7ff b828 	b.w	808099c <HAL_USART_Flush_Data>

0808194c <_ZN11USARTSerialD0Ev>:
 808194c:	b510      	push	{r4, lr}
 808194e:	4604      	mov	r4, r0
 8081950:	f7fe fba5 	bl	808009e <_ZdlPv>
 8081954:	4620      	mov	r0, r4
 8081956:	bd10      	pop	{r4, pc}

08081958 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8081958:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808195a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808195c:	4604      	mov	r4, r0
 808195e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081960:	b925      	cbnz	r5, 808196c <_ZN11USARTSerial5writeEh+0x14>
 8081962:	7c00      	ldrb	r0, [r0, #16]
 8081964:	f7ff f82a 	bl	80809bc <HAL_USART_Available_Data_For_Write>
 8081968:	2800      	cmp	r0, #0
 808196a:	dd05      	ble.n	8081978 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808196c:	4631      	mov	r1, r6
 808196e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081974:	f7fe bff2 	b.w	808095c <HAL_USART_Write_Data>
  }
  return 0;
}
 8081978:	4628      	mov	r0, r5
 808197a:	bd70      	pop	{r4, r5, r6, pc}

0808197c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808197c:	b510      	push	{r4, lr}
 808197e:	4604      	mov	r4, r0
 8081980:	4608      	mov	r0, r1
 8081982:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081984:	2200      	movs	r2, #0
 8081986:	6062      	str	r2, [r4, #4]
 8081988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808198c:	60a2      	str	r2, [r4, #8]
 808198e:	4a05      	ldr	r2, [pc, #20]	; (80819a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8081990:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081992:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8081994:	2201      	movs	r2, #1
 8081996:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8081998:	461a      	mov	r2, r3
 808199a:	f7fe ffd7 	bl	808094c <HAL_USART_Init>
}
 808199e:	4620      	mov	r0, r4
 80819a0:	bd10      	pop	{r4, pc}
 80819a2:	bf00      	nop
 80819a4:	0808341c 	.word	0x0808341c

080819a8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80819a8:	7c00      	ldrb	r0, [r0, #16]
 80819aa:	f7fe bfff 	b.w	80809ac <HAL_USART_Is_Enabled>
	...

080819b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80819b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80819b2:	4d0c      	ldr	r5, [pc, #48]	; (80819e4 <_Z22__fetch_global_Serial1v+0x34>)
 80819b4:	6829      	ldr	r1, [r5, #0]
 80819b6:	f011 0401 	ands.w	r4, r1, #1
 80819ba:	d111      	bne.n	80819e0 <_Z22__fetch_global_Serial1v+0x30>
 80819bc:	4628      	mov	r0, r5
 80819be:	f7fe fb70 	bl	80800a2 <__cxa_guard_acquire>
 80819c2:	b168      	cbz	r0, 80819e0 <_Z22__fetch_global_Serial1v+0x30>
 80819c4:	4a08      	ldr	r2, [pc, #32]	; (80819e8 <_Z22__fetch_global_Serial1v+0x38>)
 80819c6:	4621      	mov	r1, r4
 80819c8:	4b08      	ldr	r3, [pc, #32]	; (80819ec <_Z22__fetch_global_Serial1v+0x3c>)
 80819ca:	4809      	ldr	r0, [pc, #36]	; (80819f0 <_Z22__fetch_global_Serial1v+0x40>)
 80819cc:	f7ff ffd6 	bl	808197c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80819d0:	4628      	mov	r0, r5
 80819d2:	f7fe fb6b 	bl	80800ac <__cxa_guard_release>
 80819d6:	4a07      	ldr	r2, [pc, #28]	; (80819f4 <_Z22__fetch_global_Serial1v+0x44>)
 80819d8:	4907      	ldr	r1, [pc, #28]	; (80819f8 <_Z22__fetch_global_Serial1v+0x48>)
 80819da:	4805      	ldr	r0, [pc, #20]	; (80819f0 <_Z22__fetch_global_Serial1v+0x40>)
 80819dc:	f000 fa6a 	bl	8081eb4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80819e0:	4803      	ldr	r0, [pc, #12]	; (80819f0 <_Z22__fetch_global_Serial1v+0x40>)
 80819e2:	bd38      	pop	{r3, r4, r5, pc}
 80819e4:	200005a8 	.word	0x200005a8
 80819e8:	200005ac 	.word	0x200005ac
 80819ec:	20000524 	.word	0x20000524
 80819f0:	20000510 	.word	0x20000510
 80819f4:	2000046c 	.word	0x2000046c
 80819f8:	08081929 	.word	0x08081929

080819fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80819fc:	7441      	strb	r1, [r0, #17]
 80819fe:	4770      	bx	lr

08081a00 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081a00:	4770      	bx	lr

08081a02 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8081a02:	2100      	movs	r1, #0
 8081a04:	7c00      	ldrb	r0, [r0, #16]
 8081a06:	f7fe bff9 	b.w	80809fc <HAL_USB_USART_Receive_Data>

08081a0a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8081a0a:	2101      	movs	r1, #1
 8081a0c:	7c00      	ldrb	r0, [r0, #16]
 8081a0e:	f7fe bff5 	b.w	80809fc <HAL_USB_USART_Receive_Data>

08081a12 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8081a12:	7c00      	ldrb	r0, [r0, #16]
 8081a14:	f7fe bfea 	b.w	80809ec <HAL_USB_USART_Available_Data_For_Write>

08081a18 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8081a18:	7c00      	ldrb	r0, [r0, #16]
 8081a1a:	f7fe bfdf 	b.w	80809dc <HAL_USB_USART_Available_Data>

08081a1e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8081a1e:	b538      	push	{r3, r4, r5, lr}
 8081a20:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081a22:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8081a24:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081a26:	f7fe ffe1 	bl	80809ec <HAL_USB_USART_Available_Data_For_Write>
 8081a2a:	2800      	cmp	r0, #0
 8081a2c:	dc01      	bgt.n	8081a32 <_ZN9USBSerial5writeEh+0x14>
 8081a2e:	7c60      	ldrb	r0, [r4, #17]
 8081a30:	b120      	cbz	r0, 8081a3c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8081a32:	4629      	mov	r1, r5
 8081a34:	7c20      	ldrb	r0, [r4, #16]
 8081a36:	f7fe ffe9 	bl	8080a0c <HAL_USB_USART_Send_Data>
    return 1;
 8081a3a:	2001      	movs	r0, #1
  }
  return 0;
}
 8081a3c:	bd38      	pop	{r3, r4, r5, pc}

08081a3e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081a3e:	7c00      	ldrb	r0, [r0, #16]
 8081a40:	f7fe bfec 	b.w	8080a1c <HAL_USB_USART_Flush_Data>

08081a44 <_ZN9USBSerialD0Ev>:
 8081a44:	b510      	push	{r4, lr}
 8081a46:	4604      	mov	r4, r0
 8081a48:	f7fe fb29 	bl	808009e <_ZdlPv>
 8081a4c:	4620      	mov	r0, r4
 8081a4e:	bd10      	pop	{r4, pc}

08081a50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081a50:	b510      	push	{r4, lr}
 8081a52:	4604      	mov	r4, r0
 8081a54:	2300      	movs	r3, #0
 8081a56:	6063      	str	r3, [r4, #4]
 8081a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081a5c:	60a3      	str	r3, [r4, #8]
 8081a5e:	4b05      	ldr	r3, [pc, #20]	; (8081a74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081a60:	4608      	mov	r0, r1
 8081a62:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8081a64:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8081a66:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081a68:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081a6a:	4611      	mov	r1, r2
 8081a6c:	f7fe ffae 	bl	80809cc <HAL_USB_USART_Init>
}
 8081a70:	4620      	mov	r0, r4
 8081a72:	bd10      	pop	{r4, pc}
 8081a74:	0808344c 	.word	0x0808344c

08081a78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081a78:	b510      	push	{r4, lr}
 8081a7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081a7c:	2214      	movs	r2, #20
 8081a7e:	2100      	movs	r1, #0
 8081a80:	f001 fa47 	bl	8082f12 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081a84:	4b05      	ldr	r3, [pc, #20]	; (8081a9c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081a86:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081a88:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081a8a:	4b05      	ldr	r3, [pc, #20]	; (8081aa0 <_Z19acquireSerialBufferv+0x28>)
 8081a8c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081a8e:	f240 1301 	movw	r3, #257	; 0x101
 8081a92:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081a94:	2381      	movs	r3, #129	; 0x81
 8081a96:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081a98:	bd10      	pop	{r4, pc}
 8081a9a:	bf00      	nop
 8081a9c:	200006b5 	.word	0x200006b5
 8081aa0:	20000634 	.word	0x20000634

08081aa4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081aa4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081aa6:	4d0e      	ldr	r5, [pc, #56]	; (8081ae0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081aa8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081aaa:	a801      	add	r0, sp, #4
 8081aac:	f7ff ffe4 	bl	8081a78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081ab0:	6829      	ldr	r1, [r5, #0]
 8081ab2:	f011 0401 	ands.w	r4, r1, #1
 8081ab6:	d110      	bne.n	8081ada <_Z16_fetch_usbserialv+0x36>
 8081ab8:	4628      	mov	r0, r5
 8081aba:	f7fe faf2 	bl	80800a2 <__cxa_guard_acquire>
 8081abe:	b160      	cbz	r0, 8081ada <_Z16_fetch_usbserialv+0x36>
 8081ac0:	aa01      	add	r2, sp, #4
 8081ac2:	4621      	mov	r1, r4
 8081ac4:	4807      	ldr	r0, [pc, #28]	; (8081ae4 <_Z16_fetch_usbserialv+0x40>)
 8081ac6:	f7ff ffc3 	bl	8081a50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081aca:	4628      	mov	r0, r5
 8081acc:	f7fe faee 	bl	80800ac <__cxa_guard_release>
 8081ad0:	4a05      	ldr	r2, [pc, #20]	; (8081ae8 <_Z16_fetch_usbserialv+0x44>)
 8081ad2:	4906      	ldr	r1, [pc, #24]	; (8081aec <_Z16_fetch_usbserialv+0x48>)
 8081ad4:	4803      	ldr	r0, [pc, #12]	; (8081ae4 <_Z16_fetch_usbserialv+0x40>)
 8081ad6:	f000 f9ed 	bl	8081eb4 <__aeabi_atexit>
	return _usbserial;
}
 8081ada:	4802      	ldr	r0, [pc, #8]	; (8081ae4 <_Z16_fetch_usbserialv+0x40>)
 8081adc:	b007      	add	sp, #28
 8081ade:	bd30      	pop	{r4, r5, pc}
 8081ae0:	20000630 	.word	0x20000630
 8081ae4:	200007b8 	.word	0x200007b8
 8081ae8:	2000046c 	.word	0x2000046c
 8081aec:	08081a01 	.word	0x08081a01

08081af0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081af0:	b510      	push	{r4, lr}
 8081af2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081af4:	2214      	movs	r2, #20
 8081af6:	2100      	movs	r1, #0
 8081af8:	f001 fa0b 	bl	8082f12 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081afc:	4b05      	ldr	r3, [pc, #20]	; (8081b14 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081afe:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081b00:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081b02:	4b05      	ldr	r3, [pc, #20]	; (8081b18 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081b04:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081b06:	f240 1301 	movw	r3, #257	; 0x101
 8081b0a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081b0c:	2381      	movs	r3, #129	; 0x81
 8081b0e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081b10:	bd10      	pop	{r4, pc}
 8081b12:	bf00      	nop
 8081b14:	20000868 	.word	0x20000868
 8081b18:	200007d0 	.word	0x200007d0

08081b1c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081b1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081b1e:	4c0e      	ldr	r4, [pc, #56]	; (8081b58 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081b20:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081b22:	a801      	add	r0, sp, #4
 8081b24:	f7ff ffe4 	bl	8081af0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081b28:	6823      	ldr	r3, [r4, #0]
 8081b2a:	07db      	lsls	r3, r3, #31
 8081b2c:	d410      	bmi.n	8081b50 <_Z17_fetch_usbserial1v+0x34>
 8081b2e:	4620      	mov	r0, r4
 8081b30:	f7fe fab7 	bl	80800a2 <__cxa_guard_acquire>
 8081b34:	b160      	cbz	r0, 8081b50 <_Z17_fetch_usbserial1v+0x34>
 8081b36:	aa01      	add	r2, sp, #4
 8081b38:	2101      	movs	r1, #1
 8081b3a:	4808      	ldr	r0, [pc, #32]	; (8081b5c <_Z17_fetch_usbserial1v+0x40>)
 8081b3c:	f7ff ff88 	bl	8081a50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081b40:	4620      	mov	r0, r4
 8081b42:	f7fe fab3 	bl	80800ac <__cxa_guard_release>
 8081b46:	4a06      	ldr	r2, [pc, #24]	; (8081b60 <_Z17_fetch_usbserial1v+0x44>)
 8081b48:	4906      	ldr	r1, [pc, #24]	; (8081b64 <_Z17_fetch_usbserial1v+0x48>)
 8081b4a:	4804      	ldr	r0, [pc, #16]	; (8081b5c <_Z17_fetch_usbserial1v+0x40>)
 8081b4c:	f000 f9b2 	bl	8081eb4 <__aeabi_atexit>
  return _usbserial1;
}
 8081b50:	4802      	ldr	r0, [pc, #8]	; (8081b5c <_Z17_fetch_usbserial1v+0x40>)
 8081b52:	b006      	add	sp, #24
 8081b54:	bd10      	pop	{r4, pc}
 8081b56:	bf00      	nop
 8081b58:	200007cc 	.word	0x200007cc
 8081b5c:	20000854 	.word	0x20000854
 8081b60:	2000046c 	.word	0x2000046c
 8081b64:	08081a01 	.word	0x08081a01

08081b68 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081b68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081b6a:	4b18      	ldr	r3, [pc, #96]	; (8081bcc <serialEventRun+0x64>)
 8081b6c:	b133      	cbz	r3, 8081b7c <serialEventRun+0x14>
 8081b6e:	f7ff ff99 	bl	8081aa4 <_Z16_fetch_usbserialv>
 8081b72:	6803      	ldr	r3, [r0, #0]
 8081b74:	691b      	ldr	r3, [r3, #16]
 8081b76:	4798      	blx	r3
 8081b78:	2800      	cmp	r0, #0
 8081b7a:	dc1e      	bgt.n	8081bba <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081b7c:	4b14      	ldr	r3, [pc, #80]	; (8081bd0 <serialEventRun+0x68>)
 8081b7e:	b133      	cbz	r3, 8081b8e <serialEventRun+0x26>
 8081b80:	f7ff ff16 	bl	80819b0 <_Z22__fetch_global_Serial1v>
 8081b84:	6803      	ldr	r3, [r0, #0]
 8081b86:	691b      	ldr	r3, [r3, #16]
 8081b88:	4798      	blx	r3
 8081b8a:	2800      	cmp	r0, #0
 8081b8c:	dc18      	bgt.n	8081bc0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8081b8e:	4b11      	ldr	r3, [pc, #68]	; (8081bd4 <serialEventRun+0x6c>)
 8081b90:	b10b      	cbz	r3, 8081b96 <serialEventRun+0x2e>
 8081b92:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8081b96:	4b10      	ldr	r3, [pc, #64]	; (8081bd8 <serialEventRun+0x70>)
 8081b98:	b10b      	cbz	r3, 8081b9e <serialEventRun+0x36>
 8081b9a:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8081b9e:	4b0f      	ldr	r3, [pc, #60]	; (8081bdc <serialEventRun+0x74>)
 8081ba0:	b10b      	cbz	r3, 8081ba6 <serialEventRun+0x3e>
 8081ba2:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081ba6:	4b0e      	ldr	r3, [pc, #56]	; (8081be0 <serialEventRun+0x78>)
 8081ba8:	b17b      	cbz	r3, 8081bca <serialEventRun+0x62>
 8081baa:	f7ff ffb7 	bl	8081b1c <_Z17_fetch_usbserial1v>
 8081bae:	6803      	ldr	r3, [r0, #0]
 8081bb0:	691b      	ldr	r3, [r3, #16]
 8081bb2:	4798      	blx	r3
 8081bb4:	2800      	cmp	r0, #0
 8081bb6:	dc06      	bgt.n	8081bc6 <serialEventRun+0x5e>
 8081bb8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081bba:	f3af 8000 	nop.w
 8081bbe:	e7dd      	b.n	8081b7c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8081bc0:	f3af 8000 	nop.w
 8081bc4:	e7e3      	b.n	8081b8e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8081bc6:	f3af 8000 	nop.w
 8081bca:	bd08      	pop	{r3, pc}
	...

08081be4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081be4:	b508      	push	{r3, lr}
	serialEventRun();
 8081be6:	f7ff ffbf 	bl	8081b68 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081bea:	f7fe fddf 	bl	80807ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081bee:	4b01      	ldr	r3, [pc, #4]	; (8081bf4 <_post_loop+0x10>)
 8081bf0:	6018      	str	r0, [r3, #0]
 8081bf2:	bd08      	pop	{r3, pc}
 8081bf4:	20000974 	.word	0x20000974

08081bf8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081bf8:	4802      	ldr	r0, [pc, #8]	; (8081c04 <_Z33system_initialize_user_backup_ramv+0xc>)
 8081bfa:	4a03      	ldr	r2, [pc, #12]	; (8081c08 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081bfc:	4903      	ldr	r1, [pc, #12]	; (8081c0c <_Z33system_initialize_user_backup_ramv+0x14>)
 8081bfe:	1a12      	subs	r2, r2, r0
 8081c00:	f001 b97c 	b.w	8082efc <memcpy>
 8081c04:	40024000 	.word	0x40024000
 8081c08:	40024004 	.word	0x40024004
 8081c0c:	08083520 	.word	0x08083520

08081c10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081c10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081c12:	2300      	movs	r3, #0
 8081c14:	9300      	str	r3, [sp, #0]
 8081c16:	461a      	mov	r2, r3
 8081c18:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081c1c:	f7fe ff48 	bl	8080ab0 <system_ctrl_set_result>
}
 8081c20:	b003      	add	sp, #12
 8081c22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081c28 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081c28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081c2a:	8843      	ldrh	r3, [r0, #2]
 8081c2c:	2b0a      	cmp	r3, #10
 8081c2e:	d008      	beq.n	8081c42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081c30:	2b50      	cmp	r3, #80	; 0x50
 8081c32:	d109      	bne.n	8081c48 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081c34:	4b09      	ldr	r3, [pc, #36]	; (8081c5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081c36:	681b      	ldr	r3, [r3, #0]
 8081c38:	b13b      	cbz	r3, 8081c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081c3a:	b003      	add	sp, #12
 8081c3c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8081c40:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8081c42:	f7ff ffe5 	bl	8081c10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8081c46:	e006      	b.n	8081c56 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081c48:	2300      	movs	r3, #0
 8081c4a:	9300      	str	r3, [sp, #0]
 8081c4c:	461a      	mov	r2, r3
 8081c4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081c52:	f7fe ff2d 	bl	8080ab0 <system_ctrl_set_result>
        break;
    }
}
 8081c56:	b003      	add	sp, #12
 8081c58:	f85d fb04 	ldr.w	pc, [sp], #4
 8081c5c:	2000096c 	.word	0x2000096c

08081c60 <module_user_init_hook>:

void module_user_init_hook()
{
 8081c60:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081c62:	4c10      	ldr	r4, [pc, #64]	; (8081ca4 <module_user_init_hook+0x44>)
 8081c64:	4d10      	ldr	r5, [pc, #64]	; (8081ca8 <module_user_init_hook+0x48>)
 8081c66:	6823      	ldr	r3, [r4, #0]
 8081c68:	42ab      	cmp	r3, r5
 8081c6a:	4b10      	ldr	r3, [pc, #64]	; (8081cac <module_user_init_hook+0x4c>)
 8081c6c:	bf0c      	ite	eq
 8081c6e:	2201      	moveq	r2, #1
 8081c70:	2200      	movne	r2, #0
 8081c72:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081c74:	d002      	beq.n	8081c7c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8081c76:	f7ff ffbf 	bl	8081bf8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081c7a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081c7c:	f7fe fd8e 	bl	808079c <HAL_RNG_GetRandomNumber>
 8081c80:	4604      	mov	r4, r0
    srand(seed);
 8081c82:	f001 f94f 	bl	8082f24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8081c86:	4b0a      	ldr	r3, [pc, #40]	; (8081cb0 <module_user_init_hook+0x50>)
 8081c88:	b113      	cbz	r3, 8081c90 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8081c8a:	4620      	mov	r0, r4
 8081c8c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081c90:	2100      	movs	r1, #0
 8081c92:	4807      	ldr	r0, [pc, #28]	; (8081cb0 <module_user_init_hook+0x50>)
 8081c94:	f7fe ff4e 	bl	8080b34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081c9c:	2100      	movs	r1, #0
 8081c9e:	4805      	ldr	r0, [pc, #20]	; (8081cb4 <module_user_init_hook+0x54>)
 8081ca0:	f7fe befc 	b.w	8080a9c <system_ctrl_set_app_request_handler>
 8081ca4:	40024000 	.word	0x40024000
 8081ca8:	9a271c1e 	.word	0x9a271c1e
 8081cac:	20000970 	.word	0x20000970
 8081cb0:	00000000 	.word	0x00000000
 8081cb4:	08081c29 	.word	0x08081c29

08081cb8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8081cb8:	b510      	push	{r4, lr}
 8081cba:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8081cbc:	480f      	ldr	r0, [pc, #60]	; (8081cfc <pinAvailable+0x44>)
 8081cbe:	f7ff fd5d 	bl	808177c <_ZN8SPIClass9isEnabledEv>
 8081cc2:	b128      	cbz	r0, 8081cd0 <pinAvailable+0x18>
 8081cc4:	f1a4 030d 	sub.w	r3, r4, #13
 8081cc8:	2b02      	cmp	r3, #2
 8081cca:	d801      	bhi.n	8081cd0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8081ccc:	2000      	movs	r0, #0
 8081cce:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8081cd0:	f000 f86a 	bl	8081da8 <_Z19__fetch_global_Wirev>
 8081cd4:	f7ff fbe5 	bl	80814a2 <_ZN7TwoWire9isEnabledEv>
 8081cd8:	b108      	cbz	r0, 8081cde <pinAvailable+0x26>
 8081cda:	2c01      	cmp	r4, #1
 8081cdc:	d9f6      	bls.n	8081ccc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8081cde:	f7ff fe67 	bl	80819b0 <_Z22__fetch_global_Serial1v>
 8081ce2:	f7ff fe61 	bl	80819a8 <_ZN11USARTSerial9isEnabledEv>
 8081ce6:	b118      	cbz	r0, 8081cf0 <pinAvailable+0x38>
 8081ce8:	f1a4 0312 	sub.w	r3, r4, #18
 8081cec:	2b01      	cmp	r3, #1
 8081cee:	d9ed      	bls.n	8081ccc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8081cf0:	2c2e      	cmp	r4, #46	; 0x2e
 8081cf2:	bf8c      	ite	hi
 8081cf4:	2000      	movhi	r0, #0
 8081cf6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8081cf8:	bd10      	pop	{r4, pc}
 8081cfa:	bf00      	nop
 8081cfc:	200009b0 	.word	0x200009b0

08081d00 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081d00:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8081d02:	b538      	push	{r3, r4, r5, lr}
 8081d04:	4604      	mov	r4, r0
 8081d06:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081d08:	d80a      	bhi.n	8081d20 <pinMode+0x20>
 8081d0a:	29ff      	cmp	r1, #255	; 0xff
 8081d0c:	d008      	beq.n	8081d20 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8081d0e:	f7ff ffd3 	bl	8081cb8 <pinAvailable>
 8081d12:	b128      	cbz	r0, 8081d20 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081d14:	4629      	mov	r1, r5
 8081d16:	4620      	mov	r0, r4
}
 8081d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081d1c:	f7fe bd76 	b.w	808080c <HAL_Pin_Mode>
 8081d20:	bd38      	pop	{r3, r4, r5, pc}

08081d22 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8081d22:	b538      	push	{r3, r4, r5, lr}
 8081d24:	4604      	mov	r4, r0
 8081d26:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081d28:	f7fe fd78 	bl	808081c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8081d2c:	28ff      	cmp	r0, #255	; 0xff
 8081d2e:	d010      	beq.n	8081d52 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8081d30:	2806      	cmp	r0, #6
 8081d32:	d804      	bhi.n	8081d3e <digitalWrite+0x1c>
 8081d34:	234d      	movs	r3, #77	; 0x4d
 8081d36:	fa23 f000 	lsr.w	r0, r3, r0
 8081d3a:	07c3      	lsls	r3, r0, #31
 8081d3c:	d409      	bmi.n	8081d52 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8081d3e:	4620      	mov	r0, r4
 8081d40:	f7ff ffba 	bl	8081cb8 <pinAvailable>
 8081d44:	b128      	cbz	r0, 8081d52 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081d46:	4629      	mov	r1, r5
 8081d48:	4620      	mov	r0, r4
}
 8081d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081d4e:	f7fe bd6d 	b.w	808082c <HAL_GPIO_Write>
 8081d52:	bd38      	pop	{r3, r4, r5, pc}

08081d54 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8081d54:	b510      	push	{r4, lr}
 8081d56:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081d58:	f7fe fd60 	bl	808081c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8081d5c:	3804      	subs	r0, #4
 8081d5e:	b2c0      	uxtb	r0, r0
 8081d60:	2801      	cmp	r0, #1
 8081d62:	d908      	bls.n	8081d76 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8081d64:	4620      	mov	r0, r4
 8081d66:	f7ff ffa7 	bl	8081cb8 <pinAvailable>
 8081d6a:	b120      	cbz	r0, 8081d76 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8081d6c:	4620      	mov	r0, r4
}
 8081d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8081d72:	f7fe bd63 	b.w	808083c <HAL_GPIO_Read>
}
 8081d76:	2000      	movs	r0, #0
 8081d78:	bd10      	pop	{r4, pc}

08081d7a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8081d7a:	b510      	push	{r4, lr}
 8081d7c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8081d7e:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8081d80:	bf9c      	itt	ls
 8081d82:	340a      	addls	r4, #10
 8081d84:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8081d86:	4620      	mov	r0, r4
 8081d88:	f7ff ff96 	bl	8081cb8 <pinAvailable>
 8081d8c:	b150      	cbz	r0, 8081da4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8081d8e:	2103      	movs	r1, #3
 8081d90:	4620      	mov	r0, r4
 8081d92:	f7fe fd33 	bl	80807fc <HAL_Validate_Pin_Function>
 8081d96:	2803      	cmp	r0, #3
 8081d98:	d104      	bne.n	8081da4 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081d9a:	4620      	mov	r0, r4
}
 8081d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081da0:	f7fe bd54 	b.w	808084c <HAL_ADC_Read>
}
 8081da4:	2000      	movs	r0, #0
 8081da6:	bd10      	pop	{r4, pc}

08081da8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8081da8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8081daa:	4d0b      	ldr	r5, [pc, #44]	; (8081dd8 <_Z19__fetch_global_Wirev+0x30>)
 8081dac:	6829      	ldr	r1, [r5, #0]
 8081dae:	f011 0401 	ands.w	r4, r1, #1
 8081db2:	d10f      	bne.n	8081dd4 <_Z19__fetch_global_Wirev+0x2c>
 8081db4:	4628      	mov	r0, r5
 8081db6:	f7fe f974 	bl	80800a2 <__cxa_guard_acquire>
 8081dba:	b158      	cbz	r0, 8081dd4 <_Z19__fetch_global_Wirev+0x2c>
 8081dbc:	4621      	mov	r1, r4
 8081dbe:	4807      	ldr	r0, [pc, #28]	; (8081ddc <_Z19__fetch_global_Wirev+0x34>)
 8081dc0:	f7ff fb38 	bl	8081434 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8081dc4:	4628      	mov	r0, r5
 8081dc6:	f7fe f971 	bl	80800ac <__cxa_guard_release>
 8081dca:	4a05      	ldr	r2, [pc, #20]	; (8081de0 <_Z19__fetch_global_Wirev+0x38>)
 8081dcc:	4905      	ldr	r1, [pc, #20]	; (8081de4 <_Z19__fetch_global_Wirev+0x3c>)
 8081dce:	4803      	ldr	r0, [pc, #12]	; (8081ddc <_Z19__fetch_global_Wirev+0x34>)
 8081dd0:	f000 f870 	bl	8081eb4 <__aeabi_atexit>
	return wire;
}
 8081dd4:	4801      	ldr	r0, [pc, #4]	; (8081ddc <_Z19__fetch_global_Wirev+0x34>)
 8081dd6:	bd38      	pop	{r3, r4, r5, pc}
 8081dd8:	20000978 	.word	0x20000978
 8081ddc:	20000990 	.word	0x20000990
 8081de0:	2000046c 	.word	0x2000046c
 8081de4:	080813dd 	.word	0x080813dd

08081de8 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8081de8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8081dea:	4c0b      	ldr	r4, [pc, #44]	; (8081e18 <_Z20__fetch_global_Wire3v+0x30>)
 8081dec:	6823      	ldr	r3, [r4, #0]
 8081dee:	07db      	lsls	r3, r3, #31
 8081df0:	d40f      	bmi.n	8081e12 <_Z20__fetch_global_Wire3v+0x2a>
 8081df2:	4620      	mov	r0, r4
 8081df4:	f7fe f955 	bl	80800a2 <__cxa_guard_acquire>
 8081df8:	b158      	cbz	r0, 8081e12 <_Z20__fetch_global_Wire3v+0x2a>
 8081dfa:	2102      	movs	r1, #2
 8081dfc:	4807      	ldr	r0, [pc, #28]	; (8081e1c <_Z20__fetch_global_Wire3v+0x34>)
 8081dfe:	f7ff fb19 	bl	8081434 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8081e02:	4620      	mov	r0, r4
 8081e04:	f7fe f952 	bl	80800ac <__cxa_guard_release>
 8081e08:	4a05      	ldr	r2, [pc, #20]	; (8081e20 <_Z20__fetch_global_Wire3v+0x38>)
 8081e0a:	4906      	ldr	r1, [pc, #24]	; (8081e24 <_Z20__fetch_global_Wire3v+0x3c>)
 8081e0c:	4803      	ldr	r0, [pc, #12]	; (8081e1c <_Z20__fetch_global_Wire3v+0x34>)
 8081e0e:	f000 f851 	bl	8081eb4 <__aeabi_atexit>
	return wire;
}
 8081e12:	4802      	ldr	r0, [pc, #8]	; (8081e1c <_Z20__fetch_global_Wire3v+0x34>)
 8081e14:	bd10      	pop	{r4, pc}
 8081e16:	bf00      	nop
 8081e18:	200009a4 	.word	0x200009a4
 8081e1c:	2000097c 	.word	0x2000097c
 8081e20:	2000046c 	.word	0x2000046c
 8081e24:	080813dd 	.word	0x080813dd

08081e28 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081e28:	b513      	push	{r0, r1, r4, lr}
 8081e2a:	4c08      	ldr	r4, [pc, #32]	; (8081e4c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081e2c:	2300      	movs	r3, #0
 8081e2e:	461a      	mov	r2, r3
 8081e30:	4619      	mov	r1, r3
 8081e32:	9300      	str	r3, [sp, #0]
 8081e34:	4620      	mov	r0, r4
 8081e36:	f7ff fb8d 	bl	8081554 <_ZN9IPAddressC1Ehhhh>
 8081e3a:	4620      	mov	r0, r4
 8081e3c:	4a04      	ldr	r2, [pc, #16]	; (8081e50 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8081e3e:	4905      	ldr	r1, [pc, #20]	; (8081e54 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081e40:	b002      	add	sp, #8
 8081e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081e46:	f000 b835 	b.w	8081eb4 <__aeabi_atexit>
 8081e4a:	bf00      	nop
 8081e4c:	200009a8 	.word	0x200009a8
 8081e50:	2000046c 	.word	0x2000046c
 8081e54:	080814cf 	.word	0x080814cf

08081e58 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081e58:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8081e5a:	4e11      	ldr	r6, [pc, #68]	; (8081ea0 <_GLOBAL__sub_I_SPI+0x48>)
 8081e5c:	4d11      	ldr	r5, [pc, #68]	; (8081ea4 <_GLOBAL__sub_I_SPI+0x4c>)
 8081e5e:	4c12      	ldr	r4, [pc, #72]	; (8081ea8 <_GLOBAL__sub_I_SPI+0x50>)
 8081e60:	2100      	movs	r1, #0
 8081e62:	4630      	mov	r0, r6
 8081e64:	f7ff fc76 	bl	8081754 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081e68:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081e6a:	4e10      	ldr	r6, [pc, #64]	; (8081eac <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8081e6c:	462a      	mov	r2, r5
 8081e6e:	4621      	mov	r1, r4
 8081e70:	f000 f820 	bl	8081eb4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081e74:	2101      	movs	r1, #1
 8081e76:	4630      	mov	r0, r6
 8081e78:	f7ff fc6c 	bl	8081754 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081e7c:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081e7e:	4e0c      	ldr	r6, [pc, #48]	; (8081eb0 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081e80:	462a      	mov	r2, r5
 8081e82:	4621      	mov	r1, r4
 8081e84:	f000 f816 	bl	8081eb4 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081e88:	2102      	movs	r1, #2
 8081e8a:	4630      	mov	r0, r6
 8081e8c:	f7ff fc62 	bl	8081754 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081e90:	462a      	mov	r2, r5
 8081e92:	4621      	mov	r1, r4
 8081e94:	4630      	mov	r0, r6
 8081e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081e9a:	f000 b80b 	b.w	8081eb4 <__aeabi_atexit>
 8081e9e:	bf00      	nop
 8081ea0:	200009b0 	.word	0x200009b0
 8081ea4:	2000046c 	.word	0x2000046c
 8081ea8:	08081745 	.word	0x08081745
 8081eac:	200009c0 	.word	0x200009c0
 8081eb0:	200009d0 	.word	0x200009d0

08081eb4 <__aeabi_atexit>:
 8081eb4:	460b      	mov	r3, r1
 8081eb6:	4601      	mov	r1, r0
 8081eb8:	4618      	mov	r0, r3
 8081eba:	f001 b811 	b.w	8082ee0 <__cxa_atexit>

08081ebe <_ZSt25__throw_bad_function_callv>:
 8081ebe:	b508      	push	{r3, lr}
 8081ec0:	f7fe feb0 	bl	8080c24 <abort>

08081ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081ec4:	4b24      	ldr	r3, [pc, #144]	; (8081f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8081ec6:	681a      	ldr	r2, [r3, #0]
 8081ec8:	07d0      	lsls	r0, r2, #31
 8081eca:	bf5c      	itt	pl
 8081ecc:	2201      	movpl	r2, #1
 8081ece:	601a      	strpl	r2, [r3, #0]
 8081ed0:	4b22      	ldr	r3, [pc, #136]	; (8081f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081ed2:	681a      	ldr	r2, [r3, #0]
 8081ed4:	07d1      	lsls	r1, r2, #31
 8081ed6:	bf5c      	itt	pl
 8081ed8:	2201      	movpl	r2, #1
 8081eda:	601a      	strpl	r2, [r3, #0]
 8081edc:	4b20      	ldr	r3, [pc, #128]	; (8081f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081ede:	681a      	ldr	r2, [r3, #0]
 8081ee0:	07d2      	lsls	r2, r2, #31
 8081ee2:	bf5c      	itt	pl
 8081ee4:	2201      	movpl	r2, #1
 8081ee6:	601a      	strpl	r2, [r3, #0]
 8081ee8:	4b1e      	ldr	r3, [pc, #120]	; (8081f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8081eea:	681a      	ldr	r2, [r3, #0]
 8081eec:	07d0      	lsls	r0, r2, #31
 8081eee:	bf5c      	itt	pl
 8081ef0:	2201      	movpl	r2, #1
 8081ef2:	601a      	strpl	r2, [r3, #0]
 8081ef4:	4b1c      	ldr	r3, [pc, #112]	; (8081f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8081ef6:	681a      	ldr	r2, [r3, #0]
 8081ef8:	07d1      	lsls	r1, r2, #31
 8081efa:	bf5c      	itt	pl
 8081efc:	2201      	movpl	r2, #1
 8081efe:	601a      	strpl	r2, [r3, #0]
 8081f00:	4b1a      	ldr	r3, [pc, #104]	; (8081f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8081f02:	681a      	ldr	r2, [r3, #0]
 8081f04:	07d2      	lsls	r2, r2, #31
 8081f06:	bf5c      	itt	pl
 8081f08:	2201      	movpl	r2, #1
 8081f0a:	601a      	strpl	r2, [r3, #0]
 8081f0c:	4b18      	ldr	r3, [pc, #96]	; (8081f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8081f0e:	681a      	ldr	r2, [r3, #0]
 8081f10:	07d0      	lsls	r0, r2, #31
 8081f12:	bf5c      	itt	pl
 8081f14:	2201      	movpl	r2, #1
 8081f16:	601a      	strpl	r2, [r3, #0]
 8081f18:	4b16      	ldr	r3, [pc, #88]	; (8081f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8081f1a:	681a      	ldr	r2, [r3, #0]
 8081f1c:	07d1      	lsls	r1, r2, #31
 8081f1e:	bf5c      	itt	pl
 8081f20:	2201      	movpl	r2, #1
 8081f22:	601a      	strpl	r2, [r3, #0]
 8081f24:	4b14      	ldr	r3, [pc, #80]	; (8081f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8081f26:	681a      	ldr	r2, [r3, #0]
 8081f28:	07d2      	lsls	r2, r2, #31
 8081f2a:	bf5c      	itt	pl
 8081f2c:	2201      	movpl	r2, #1
 8081f2e:	601a      	strpl	r2, [r3, #0]
 8081f30:	4b12      	ldr	r3, [pc, #72]	; (8081f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8081f32:	681a      	ldr	r2, [r3, #0]
 8081f34:	07d0      	lsls	r0, r2, #31
 8081f36:	bf5c      	itt	pl
 8081f38:	2201      	movpl	r2, #1
 8081f3a:	601a      	strpl	r2, [r3, #0]
 8081f3c:	4b10      	ldr	r3, [pc, #64]	; (8081f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8081f3e:	681a      	ldr	r2, [r3, #0]
 8081f40:	07d1      	lsls	r1, r2, #31
 8081f42:	bf5c      	itt	pl
 8081f44:	2201      	movpl	r2, #1
 8081f46:	601a      	strpl	r2, [r3, #0]
 8081f48:	4b0e      	ldr	r3, [pc, #56]	; (8081f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8081f4a:	681a      	ldr	r2, [r3, #0]
 8081f4c:	07d2      	lsls	r2, r2, #31
 8081f4e:	bf5c      	itt	pl
 8081f50:	2201      	movpl	r2, #1
 8081f52:	601a      	strpl	r2, [r3, #0]
 8081f54:	4770      	bx	lr
 8081f56:	bf00      	nop
 8081f58:	20000a0c 	.word	0x20000a0c
 8081f5c:	20000a08 	.word	0x20000a08
 8081f60:	20000a04 	.word	0x20000a04
 8081f64:	20000a00 	.word	0x20000a00
 8081f68:	200009fc 	.word	0x200009fc
 8081f6c:	200009f8 	.word	0x200009f8
 8081f70:	200009f4 	.word	0x200009f4
 8081f74:	200009f0 	.word	0x200009f0
 8081f78:	200009ec 	.word	0x200009ec
 8081f7c:	200009e8 	.word	0x200009e8
 8081f80:	200009e4 	.word	0x200009e4
 8081f84:	200009e0 	.word	0x200009e0

08081f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081f88:	4b18      	ldr	r3, [pc, #96]	; (8081fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081f8a:	681a      	ldr	r2, [r3, #0]
 8081f8c:	07d1      	lsls	r1, r2, #31
 8081f8e:	bf5c      	itt	pl
 8081f90:	2201      	movpl	r2, #1
 8081f92:	601a      	strpl	r2, [r3, #0]
 8081f94:	4b16      	ldr	r3, [pc, #88]	; (8081ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081f96:	681a      	ldr	r2, [r3, #0]
 8081f98:	07d2      	lsls	r2, r2, #31
 8081f9a:	bf5c      	itt	pl
 8081f9c:	2201      	movpl	r2, #1
 8081f9e:	601a      	strpl	r2, [r3, #0]
 8081fa0:	4b14      	ldr	r3, [pc, #80]	; (8081ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081fa2:	681a      	ldr	r2, [r3, #0]
 8081fa4:	07d0      	lsls	r0, r2, #31
 8081fa6:	bf5c      	itt	pl
 8081fa8:	2201      	movpl	r2, #1
 8081faa:	601a      	strpl	r2, [r3, #0]
 8081fac:	4b12      	ldr	r3, [pc, #72]	; (8081ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081fae:	681a      	ldr	r2, [r3, #0]
 8081fb0:	07d1      	lsls	r1, r2, #31
 8081fb2:	bf5c      	itt	pl
 8081fb4:	2201      	movpl	r2, #1
 8081fb6:	601a      	strpl	r2, [r3, #0]
 8081fb8:	4b10      	ldr	r3, [pc, #64]	; (8081ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081fba:	681a      	ldr	r2, [r3, #0]
 8081fbc:	07d2      	lsls	r2, r2, #31
 8081fbe:	bf5c      	itt	pl
 8081fc0:	2201      	movpl	r2, #1
 8081fc2:	601a      	strpl	r2, [r3, #0]
 8081fc4:	4b0e      	ldr	r3, [pc, #56]	; (8082000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081fc6:	681a      	ldr	r2, [r3, #0]
 8081fc8:	07d0      	lsls	r0, r2, #31
 8081fca:	bf5c      	itt	pl
 8081fcc:	2201      	movpl	r2, #1
 8081fce:	601a      	strpl	r2, [r3, #0]
 8081fd0:	4b0c      	ldr	r3, [pc, #48]	; (8082004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081fd2:	681a      	ldr	r2, [r3, #0]
 8081fd4:	07d1      	lsls	r1, r2, #31
 8081fd6:	bf5c      	itt	pl
 8081fd8:	2201      	movpl	r2, #1
 8081fda:	601a      	strpl	r2, [r3, #0]
 8081fdc:	4b0a      	ldr	r3, [pc, #40]	; (8082008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081fde:	681a      	ldr	r2, [r3, #0]
 8081fe0:	07d2      	lsls	r2, r2, #31
 8081fe2:	bf5c      	itt	pl
 8081fe4:	2201      	movpl	r2, #1
 8081fe6:	601a      	strpl	r2, [r3, #0]
 8081fe8:	4770      	bx	lr
 8081fea:	bf00      	nop
 8081fec:	20000a2c 	.word	0x20000a2c
 8081ff0:	20000a28 	.word	0x20000a28
 8081ff4:	20000a24 	.word	0x20000a24
 8081ff8:	20000a20 	.word	0x20000a20
 8081ffc:	20000a1c 	.word	0x20000a1c
 8082000:	20000a18 	.word	0x20000a18
 8082004:	20000a14 	.word	0x20000a14
 8082008:	20000a10 	.word	0x20000a10

0808200c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808200c:	4b18      	ldr	r3, [pc, #96]	; (8082070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808200e:	681a      	ldr	r2, [r3, #0]
 8082010:	07d1      	lsls	r1, r2, #31
 8082012:	bf5c      	itt	pl
 8082014:	2201      	movpl	r2, #1
 8082016:	601a      	strpl	r2, [r3, #0]
 8082018:	4b16      	ldr	r3, [pc, #88]	; (8082074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808201a:	681a      	ldr	r2, [r3, #0]
 808201c:	07d2      	lsls	r2, r2, #31
 808201e:	bf5c      	itt	pl
 8082020:	2201      	movpl	r2, #1
 8082022:	601a      	strpl	r2, [r3, #0]
 8082024:	4b14      	ldr	r3, [pc, #80]	; (8082078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082026:	681a      	ldr	r2, [r3, #0]
 8082028:	07d0      	lsls	r0, r2, #31
 808202a:	bf5c      	itt	pl
 808202c:	2201      	movpl	r2, #1
 808202e:	601a      	strpl	r2, [r3, #0]
 8082030:	4b12      	ldr	r3, [pc, #72]	; (808207c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082032:	681a      	ldr	r2, [r3, #0]
 8082034:	07d1      	lsls	r1, r2, #31
 8082036:	bf5c      	itt	pl
 8082038:	2201      	movpl	r2, #1
 808203a:	601a      	strpl	r2, [r3, #0]
 808203c:	4b10      	ldr	r3, [pc, #64]	; (8082080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808203e:	681a      	ldr	r2, [r3, #0]
 8082040:	07d2      	lsls	r2, r2, #31
 8082042:	bf5c      	itt	pl
 8082044:	2201      	movpl	r2, #1
 8082046:	601a      	strpl	r2, [r3, #0]
 8082048:	4b0e      	ldr	r3, [pc, #56]	; (8082084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808204a:	681a      	ldr	r2, [r3, #0]
 808204c:	07d0      	lsls	r0, r2, #31
 808204e:	bf5c      	itt	pl
 8082050:	2201      	movpl	r2, #1
 8082052:	601a      	strpl	r2, [r3, #0]
 8082054:	4b0c      	ldr	r3, [pc, #48]	; (8082088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082056:	681a      	ldr	r2, [r3, #0]
 8082058:	07d1      	lsls	r1, r2, #31
 808205a:	bf5c      	itt	pl
 808205c:	2201      	movpl	r2, #1
 808205e:	601a      	strpl	r2, [r3, #0]
 8082060:	4b0a      	ldr	r3, [pc, #40]	; (808208c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082062:	681a      	ldr	r2, [r3, #0]
 8082064:	07d2      	lsls	r2, r2, #31
 8082066:	bf5c      	itt	pl
 8082068:	2201      	movpl	r2, #1
 808206a:	601a      	strpl	r2, [r3, #0]
 808206c:	4770      	bx	lr
 808206e:	bf00      	nop
 8082070:	20000a4c 	.word	0x20000a4c
 8082074:	20000a48 	.word	0x20000a48
 8082078:	20000a44 	.word	0x20000a44
 808207c:	20000a40 	.word	0x20000a40
 8082080:	20000a3c 	.word	0x20000a3c
 8082084:	20000a38 	.word	0x20000a38
 8082088:	20000a34 	.word	0x20000a34
 808208c:	20000a30 	.word	0x20000a30

08082090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082090:	4b24      	ldr	r3, [pc, #144]	; (8082124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082092:	681a      	ldr	r2, [r3, #0]
 8082094:	07d0      	lsls	r0, r2, #31
 8082096:	bf5c      	itt	pl
 8082098:	2201      	movpl	r2, #1
 808209a:	601a      	strpl	r2, [r3, #0]
 808209c:	4b22      	ldr	r3, [pc, #136]	; (8082128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808209e:	681a      	ldr	r2, [r3, #0]
 80820a0:	07d1      	lsls	r1, r2, #31
 80820a2:	bf5c      	itt	pl
 80820a4:	2201      	movpl	r2, #1
 80820a6:	601a      	strpl	r2, [r3, #0]
 80820a8:	4b20      	ldr	r3, [pc, #128]	; (808212c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80820aa:	681a      	ldr	r2, [r3, #0]
 80820ac:	07d2      	lsls	r2, r2, #31
 80820ae:	bf5c      	itt	pl
 80820b0:	2201      	movpl	r2, #1
 80820b2:	601a      	strpl	r2, [r3, #0]
 80820b4:	4b1e      	ldr	r3, [pc, #120]	; (8082130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80820b6:	681a      	ldr	r2, [r3, #0]
 80820b8:	07d0      	lsls	r0, r2, #31
 80820ba:	bf5c      	itt	pl
 80820bc:	2201      	movpl	r2, #1
 80820be:	601a      	strpl	r2, [r3, #0]
 80820c0:	4b1c      	ldr	r3, [pc, #112]	; (8082134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80820c2:	681a      	ldr	r2, [r3, #0]
 80820c4:	07d1      	lsls	r1, r2, #31
 80820c6:	bf5c      	itt	pl
 80820c8:	2201      	movpl	r2, #1
 80820ca:	601a      	strpl	r2, [r3, #0]
 80820cc:	4b1a      	ldr	r3, [pc, #104]	; (8082138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80820ce:	681a      	ldr	r2, [r3, #0]
 80820d0:	07d2      	lsls	r2, r2, #31
 80820d2:	bf5c      	itt	pl
 80820d4:	2201      	movpl	r2, #1
 80820d6:	601a      	strpl	r2, [r3, #0]
 80820d8:	4b18      	ldr	r3, [pc, #96]	; (808213c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80820da:	681a      	ldr	r2, [r3, #0]
 80820dc:	07d0      	lsls	r0, r2, #31
 80820de:	bf5c      	itt	pl
 80820e0:	2201      	movpl	r2, #1
 80820e2:	601a      	strpl	r2, [r3, #0]
 80820e4:	4b16      	ldr	r3, [pc, #88]	; (8082140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80820e6:	681a      	ldr	r2, [r3, #0]
 80820e8:	07d1      	lsls	r1, r2, #31
 80820ea:	bf5c      	itt	pl
 80820ec:	2201      	movpl	r2, #1
 80820ee:	601a      	strpl	r2, [r3, #0]
 80820f0:	4b14      	ldr	r3, [pc, #80]	; (8082144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80820f2:	681a      	ldr	r2, [r3, #0]
 80820f4:	07d2      	lsls	r2, r2, #31
 80820f6:	bf5c      	itt	pl
 80820f8:	2201      	movpl	r2, #1
 80820fa:	601a      	strpl	r2, [r3, #0]
 80820fc:	4b12      	ldr	r3, [pc, #72]	; (8082148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80820fe:	681a      	ldr	r2, [r3, #0]
 8082100:	07d0      	lsls	r0, r2, #31
 8082102:	bf5c      	itt	pl
 8082104:	2201      	movpl	r2, #1
 8082106:	601a      	strpl	r2, [r3, #0]
 8082108:	4b10      	ldr	r3, [pc, #64]	; (808214c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808210a:	681a      	ldr	r2, [r3, #0]
 808210c:	07d1      	lsls	r1, r2, #31
 808210e:	bf5c      	itt	pl
 8082110:	2201      	movpl	r2, #1
 8082112:	601a      	strpl	r2, [r3, #0]
 8082114:	4b0e      	ldr	r3, [pc, #56]	; (8082150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8082116:	681a      	ldr	r2, [r3, #0]
 8082118:	07d2      	lsls	r2, r2, #31
 808211a:	bf5c      	itt	pl
 808211c:	2201      	movpl	r2, #1
 808211e:	601a      	strpl	r2, [r3, #0]
 8082120:	4770      	bx	lr
 8082122:	bf00      	nop
 8082124:	20000a7c 	.word	0x20000a7c
 8082128:	20000a78 	.word	0x20000a78
 808212c:	20000a74 	.word	0x20000a74
 8082130:	20000a70 	.word	0x20000a70
 8082134:	20000a6c 	.word	0x20000a6c
 8082138:	20000a68 	.word	0x20000a68
 808213c:	20000a64 	.word	0x20000a64
 8082140:	20000a60 	.word	0x20000a60
 8082144:	20000a5c 	.word	0x20000a5c
 8082148:	20000a58 	.word	0x20000a58
 808214c:	20000a54 	.word	0x20000a54
 8082150:	20000a50 	.word	0x20000a50

08082154 <__aeabi_drsub>:
 8082154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8082158:	e002      	b.n	8082160 <__adddf3>
 808215a:	bf00      	nop

0808215c <__aeabi_dsub>:
 808215c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082160 <__adddf3>:
 8082160:	b530      	push	{r4, r5, lr}
 8082162:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8082166:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808216a:	ea94 0f05 	teq	r4, r5
 808216e:	bf08      	it	eq
 8082170:	ea90 0f02 	teqeq	r0, r2
 8082174:	bf1f      	itttt	ne
 8082176:	ea54 0c00 	orrsne.w	ip, r4, r0
 808217a:	ea55 0c02 	orrsne.w	ip, r5, r2
 808217e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082182:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082186:	f000 80e2 	beq.w	808234e <__adddf3+0x1ee>
 808218a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808218e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082192:	bfb8      	it	lt
 8082194:	426d      	neglt	r5, r5
 8082196:	dd0c      	ble.n	80821b2 <__adddf3+0x52>
 8082198:	442c      	add	r4, r5
 808219a:	ea80 0202 	eor.w	r2, r0, r2
 808219e:	ea81 0303 	eor.w	r3, r1, r3
 80821a2:	ea82 0000 	eor.w	r0, r2, r0
 80821a6:	ea83 0101 	eor.w	r1, r3, r1
 80821aa:	ea80 0202 	eor.w	r2, r0, r2
 80821ae:	ea81 0303 	eor.w	r3, r1, r3
 80821b2:	2d36      	cmp	r5, #54	; 0x36
 80821b4:	bf88      	it	hi
 80821b6:	bd30      	pophi	{r4, r5, pc}
 80821b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80821bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80821c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80821c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80821c8:	d002      	beq.n	80821d0 <__adddf3+0x70>
 80821ca:	4240      	negs	r0, r0
 80821cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80821d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80821d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80821d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80821dc:	d002      	beq.n	80821e4 <__adddf3+0x84>
 80821de:	4252      	negs	r2, r2
 80821e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80821e4:	ea94 0f05 	teq	r4, r5
 80821e8:	f000 80a7 	beq.w	808233a <__adddf3+0x1da>
 80821ec:	f1a4 0401 	sub.w	r4, r4, #1
 80821f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80821f4:	db0d      	blt.n	8082212 <__adddf3+0xb2>
 80821f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80821fa:	fa22 f205 	lsr.w	r2, r2, r5
 80821fe:	1880      	adds	r0, r0, r2
 8082200:	f141 0100 	adc.w	r1, r1, #0
 8082204:	fa03 f20e 	lsl.w	r2, r3, lr
 8082208:	1880      	adds	r0, r0, r2
 808220a:	fa43 f305 	asr.w	r3, r3, r5
 808220e:	4159      	adcs	r1, r3
 8082210:	e00e      	b.n	8082230 <__adddf3+0xd0>
 8082212:	f1a5 0520 	sub.w	r5, r5, #32
 8082216:	f10e 0e20 	add.w	lr, lr, #32
 808221a:	2a01      	cmp	r2, #1
 808221c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8082220:	bf28      	it	cs
 8082222:	f04c 0c02 	orrcs.w	ip, ip, #2
 8082226:	fa43 f305 	asr.w	r3, r3, r5
 808222a:	18c0      	adds	r0, r0, r3
 808222c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8082230:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082234:	d507      	bpl.n	8082246 <__adddf3+0xe6>
 8082236:	f04f 0e00 	mov.w	lr, #0
 808223a:	f1dc 0c00 	rsbs	ip, ip, #0
 808223e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8082242:	eb6e 0101 	sbc.w	r1, lr, r1
 8082246:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808224a:	d31b      	bcc.n	8082284 <__adddf3+0x124>
 808224c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082250:	d30c      	bcc.n	808226c <__adddf3+0x10c>
 8082252:	0849      	lsrs	r1, r1, #1
 8082254:	ea5f 0030 	movs.w	r0, r0, rrx
 8082258:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808225c:	f104 0401 	add.w	r4, r4, #1
 8082260:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082264:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8082268:	f080 809a 	bcs.w	80823a0 <__adddf3+0x240>
 808226c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082270:	bf08      	it	eq
 8082272:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082276:	f150 0000 	adcs.w	r0, r0, #0
 808227a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808227e:	ea41 0105 	orr.w	r1, r1, r5
 8082282:	bd30      	pop	{r4, r5, pc}
 8082284:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8082288:	4140      	adcs	r0, r0
 808228a:	eb41 0101 	adc.w	r1, r1, r1
 808228e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082292:	f1a4 0401 	sub.w	r4, r4, #1
 8082296:	d1e9      	bne.n	808226c <__adddf3+0x10c>
 8082298:	f091 0f00 	teq	r1, #0
 808229c:	bf04      	itt	eq
 808229e:	4601      	moveq	r1, r0
 80822a0:	2000      	moveq	r0, #0
 80822a2:	fab1 f381 	clz	r3, r1
 80822a6:	bf08      	it	eq
 80822a8:	3320      	addeq	r3, #32
 80822aa:	f1a3 030b 	sub.w	r3, r3, #11
 80822ae:	f1b3 0220 	subs.w	r2, r3, #32
 80822b2:	da0c      	bge.n	80822ce <__adddf3+0x16e>
 80822b4:	320c      	adds	r2, #12
 80822b6:	dd08      	ble.n	80822ca <__adddf3+0x16a>
 80822b8:	f102 0c14 	add.w	ip, r2, #20
 80822bc:	f1c2 020c 	rsb	r2, r2, #12
 80822c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80822c4:	fa21 f102 	lsr.w	r1, r1, r2
 80822c8:	e00c      	b.n	80822e4 <__adddf3+0x184>
 80822ca:	f102 0214 	add.w	r2, r2, #20
 80822ce:	bfd8      	it	le
 80822d0:	f1c2 0c20 	rsble	ip, r2, #32
 80822d4:	fa01 f102 	lsl.w	r1, r1, r2
 80822d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80822dc:	bfdc      	itt	le
 80822de:	ea41 010c 	orrle.w	r1, r1, ip
 80822e2:	4090      	lslle	r0, r2
 80822e4:	1ae4      	subs	r4, r4, r3
 80822e6:	bfa2      	ittt	ge
 80822e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80822ec:	4329      	orrge	r1, r5
 80822ee:	bd30      	popge	{r4, r5, pc}
 80822f0:	ea6f 0404 	mvn.w	r4, r4
 80822f4:	3c1f      	subs	r4, #31
 80822f6:	da1c      	bge.n	8082332 <__adddf3+0x1d2>
 80822f8:	340c      	adds	r4, #12
 80822fa:	dc0e      	bgt.n	808231a <__adddf3+0x1ba>
 80822fc:	f104 0414 	add.w	r4, r4, #20
 8082300:	f1c4 0220 	rsb	r2, r4, #32
 8082304:	fa20 f004 	lsr.w	r0, r0, r4
 8082308:	fa01 f302 	lsl.w	r3, r1, r2
 808230c:	ea40 0003 	orr.w	r0, r0, r3
 8082310:	fa21 f304 	lsr.w	r3, r1, r4
 8082314:	ea45 0103 	orr.w	r1, r5, r3
 8082318:	bd30      	pop	{r4, r5, pc}
 808231a:	f1c4 040c 	rsb	r4, r4, #12
 808231e:	f1c4 0220 	rsb	r2, r4, #32
 8082322:	fa20 f002 	lsr.w	r0, r0, r2
 8082326:	fa01 f304 	lsl.w	r3, r1, r4
 808232a:	ea40 0003 	orr.w	r0, r0, r3
 808232e:	4629      	mov	r1, r5
 8082330:	bd30      	pop	{r4, r5, pc}
 8082332:	fa21 f004 	lsr.w	r0, r1, r4
 8082336:	4629      	mov	r1, r5
 8082338:	bd30      	pop	{r4, r5, pc}
 808233a:	f094 0f00 	teq	r4, #0
 808233e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8082342:	bf06      	itte	eq
 8082344:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8082348:	3401      	addeq	r4, #1
 808234a:	3d01      	subne	r5, #1
 808234c:	e74e      	b.n	80821ec <__adddf3+0x8c>
 808234e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082352:	bf18      	it	ne
 8082354:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082358:	d029      	beq.n	80823ae <__adddf3+0x24e>
 808235a:	ea94 0f05 	teq	r4, r5
 808235e:	bf08      	it	eq
 8082360:	ea90 0f02 	teqeq	r0, r2
 8082364:	d005      	beq.n	8082372 <__adddf3+0x212>
 8082366:	ea54 0c00 	orrs.w	ip, r4, r0
 808236a:	bf04      	itt	eq
 808236c:	4619      	moveq	r1, r3
 808236e:	4610      	moveq	r0, r2
 8082370:	bd30      	pop	{r4, r5, pc}
 8082372:	ea91 0f03 	teq	r1, r3
 8082376:	bf1e      	ittt	ne
 8082378:	2100      	movne	r1, #0
 808237a:	2000      	movne	r0, #0
 808237c:	bd30      	popne	{r4, r5, pc}
 808237e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082382:	d105      	bne.n	8082390 <__adddf3+0x230>
 8082384:	0040      	lsls	r0, r0, #1
 8082386:	4149      	adcs	r1, r1
 8082388:	bf28      	it	cs
 808238a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808238e:	bd30      	pop	{r4, r5, pc}
 8082390:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082394:	bf3c      	itt	cc
 8082396:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808239a:	bd30      	popcc	{r4, r5, pc}
 808239c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80823a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80823a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80823a8:	f04f 0000 	mov.w	r0, #0
 80823ac:	bd30      	pop	{r4, r5, pc}
 80823ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80823b2:	bf1a      	itte	ne
 80823b4:	4619      	movne	r1, r3
 80823b6:	4610      	movne	r0, r2
 80823b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80823bc:	bf1c      	itt	ne
 80823be:	460b      	movne	r3, r1
 80823c0:	4602      	movne	r2, r0
 80823c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80823c6:	bf06      	itte	eq
 80823c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80823cc:	ea91 0f03 	teqeq	r1, r3
 80823d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80823d4:	bd30      	pop	{r4, r5, pc}
 80823d6:	bf00      	nop

080823d8 <__aeabi_ui2d>:
 80823d8:	f090 0f00 	teq	r0, #0
 80823dc:	bf04      	itt	eq
 80823de:	2100      	moveq	r1, #0
 80823e0:	4770      	bxeq	lr
 80823e2:	b530      	push	{r4, r5, lr}
 80823e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80823e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80823ec:	f04f 0500 	mov.w	r5, #0
 80823f0:	f04f 0100 	mov.w	r1, #0
 80823f4:	e750      	b.n	8082298 <__adddf3+0x138>
 80823f6:	bf00      	nop

080823f8 <__aeabi_i2d>:
 80823f8:	f090 0f00 	teq	r0, #0
 80823fc:	bf04      	itt	eq
 80823fe:	2100      	moveq	r1, #0
 8082400:	4770      	bxeq	lr
 8082402:	b530      	push	{r4, r5, lr}
 8082404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808240c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8082410:	bf48      	it	mi
 8082412:	4240      	negmi	r0, r0
 8082414:	f04f 0100 	mov.w	r1, #0
 8082418:	e73e      	b.n	8082298 <__adddf3+0x138>
 808241a:	bf00      	nop

0808241c <__aeabi_f2d>:
 808241c:	0042      	lsls	r2, r0, #1
 808241e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8082422:	ea4f 0131 	mov.w	r1, r1, rrx
 8082426:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808242a:	bf1f      	itttt	ne
 808242c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8082430:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082434:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8082438:	4770      	bxne	lr
 808243a:	f092 0f00 	teq	r2, #0
 808243e:	bf14      	ite	ne
 8082440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082444:	4770      	bxeq	lr
 8082446:	b530      	push	{r4, r5, lr}
 8082448:	f44f 7460 	mov.w	r4, #896	; 0x380
 808244c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082454:	e720      	b.n	8082298 <__adddf3+0x138>
 8082456:	bf00      	nop

08082458 <__aeabi_ul2d>:
 8082458:	ea50 0201 	orrs.w	r2, r0, r1
 808245c:	bf08      	it	eq
 808245e:	4770      	bxeq	lr
 8082460:	b530      	push	{r4, r5, lr}
 8082462:	f04f 0500 	mov.w	r5, #0
 8082466:	e00a      	b.n	808247e <__aeabi_l2d+0x16>

08082468 <__aeabi_l2d>:
 8082468:	ea50 0201 	orrs.w	r2, r0, r1
 808246c:	bf08      	it	eq
 808246e:	4770      	bxeq	lr
 8082470:	b530      	push	{r4, r5, lr}
 8082472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8082476:	d502      	bpl.n	808247e <__aeabi_l2d+0x16>
 8082478:	4240      	negs	r0, r0
 808247a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808247e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808248a:	f43f aedc 	beq.w	8082246 <__adddf3+0xe6>
 808248e:	f04f 0203 	mov.w	r2, #3
 8082492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082496:	bf18      	it	ne
 8082498:	3203      	addne	r2, #3
 808249a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808249e:	bf18      	it	ne
 80824a0:	3203      	addne	r2, #3
 80824a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80824a6:	f1c2 0320 	rsb	r3, r2, #32
 80824aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80824ae:	fa20 f002 	lsr.w	r0, r0, r2
 80824b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80824b6:	ea40 000e 	orr.w	r0, r0, lr
 80824ba:	fa21 f102 	lsr.w	r1, r1, r2
 80824be:	4414      	add	r4, r2
 80824c0:	e6c1      	b.n	8082246 <__adddf3+0xe6>
 80824c2:	bf00      	nop

080824c4 <__aeabi_dmul>:
 80824c4:	b570      	push	{r4, r5, r6, lr}
 80824c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80824ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80824ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80824d2:	bf1d      	ittte	ne
 80824d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80824d8:	ea94 0f0c 	teqne	r4, ip
 80824dc:	ea95 0f0c 	teqne	r5, ip
 80824e0:	f000 f8de 	bleq	80826a0 <__aeabi_dmul+0x1dc>
 80824e4:	442c      	add	r4, r5
 80824e6:	ea81 0603 	eor.w	r6, r1, r3
 80824ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80824ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80824f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80824f6:	bf18      	it	ne
 80824f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80824fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8082504:	d038      	beq.n	8082578 <__aeabi_dmul+0xb4>
 8082506:	fba0 ce02 	umull	ip, lr, r0, r2
 808250a:	f04f 0500 	mov.w	r5, #0
 808250e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8082512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8082516:	fbe0 e503 	umlal	lr, r5, r0, r3
 808251a:	f04f 0600 	mov.w	r6, #0
 808251e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8082522:	f09c 0f00 	teq	ip, #0
 8082526:	bf18      	it	ne
 8082528:	f04e 0e01 	orrne.w	lr, lr, #1
 808252c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8082530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8082538:	d204      	bcs.n	8082544 <__aeabi_dmul+0x80>
 808253a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808253e:	416d      	adcs	r5, r5
 8082540:	eb46 0606 	adc.w	r6, r6, r6
 8082544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8082548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808254c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8082558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808255c:	bf88      	it	hi
 808255e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082562:	d81e      	bhi.n	80825a2 <__aeabi_dmul+0xde>
 8082564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8082568:	bf08      	it	eq
 808256a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808256e:	f150 0000 	adcs.w	r0, r0, #0
 8082572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082576:	bd70      	pop	{r4, r5, r6, pc}
 8082578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808257c:	ea46 0101 	orr.w	r1, r6, r1
 8082580:	ea40 0002 	orr.w	r0, r0, r2
 8082584:	ea81 0103 	eor.w	r1, r1, r3
 8082588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808258c:	bfc2      	ittt	gt
 808258e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082596:	bd70      	popgt	{r4, r5, r6, pc}
 8082598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808259c:	f04f 0e00 	mov.w	lr, #0
 80825a0:	3c01      	subs	r4, #1
 80825a2:	f300 80ab 	bgt.w	80826fc <__aeabi_dmul+0x238>
 80825a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80825aa:	bfde      	ittt	le
 80825ac:	2000      	movle	r0, #0
 80825ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80825b2:	bd70      	pople	{r4, r5, r6, pc}
 80825b4:	f1c4 0400 	rsb	r4, r4, #0
 80825b8:	3c20      	subs	r4, #32
 80825ba:	da35      	bge.n	8082628 <__aeabi_dmul+0x164>
 80825bc:	340c      	adds	r4, #12
 80825be:	dc1b      	bgt.n	80825f8 <__aeabi_dmul+0x134>
 80825c0:	f104 0414 	add.w	r4, r4, #20
 80825c4:	f1c4 0520 	rsb	r5, r4, #32
 80825c8:	fa00 f305 	lsl.w	r3, r0, r5
 80825cc:	fa20 f004 	lsr.w	r0, r0, r4
 80825d0:	fa01 f205 	lsl.w	r2, r1, r5
 80825d4:	ea40 0002 	orr.w	r0, r0, r2
 80825d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80825dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80825e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80825e4:	fa21 f604 	lsr.w	r6, r1, r4
 80825e8:	eb42 0106 	adc.w	r1, r2, r6
 80825ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80825f0:	bf08      	it	eq
 80825f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80825f6:	bd70      	pop	{r4, r5, r6, pc}
 80825f8:	f1c4 040c 	rsb	r4, r4, #12
 80825fc:	f1c4 0520 	rsb	r5, r4, #32
 8082600:	fa00 f304 	lsl.w	r3, r0, r4
 8082604:	fa20 f005 	lsr.w	r0, r0, r5
 8082608:	fa01 f204 	lsl.w	r2, r1, r4
 808260c:	ea40 0002 	orr.w	r0, r0, r2
 8082610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8082618:	f141 0100 	adc.w	r1, r1, #0
 808261c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082620:	bf08      	it	eq
 8082622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082626:	bd70      	pop	{r4, r5, r6, pc}
 8082628:	f1c4 0520 	rsb	r5, r4, #32
 808262c:	fa00 f205 	lsl.w	r2, r0, r5
 8082630:	ea4e 0e02 	orr.w	lr, lr, r2
 8082634:	fa20 f304 	lsr.w	r3, r0, r4
 8082638:	fa01 f205 	lsl.w	r2, r1, r5
 808263c:	ea43 0302 	orr.w	r3, r3, r2
 8082640:	fa21 f004 	lsr.w	r0, r1, r4
 8082644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082648:	fa21 f204 	lsr.w	r2, r1, r4
 808264c:	ea20 0002 	bic.w	r0, r0, r2
 8082650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8082654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082658:	bf08      	it	eq
 808265a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808265e:	bd70      	pop	{r4, r5, r6, pc}
 8082660:	f094 0f00 	teq	r4, #0
 8082664:	d10f      	bne.n	8082686 <__aeabi_dmul+0x1c2>
 8082666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808266a:	0040      	lsls	r0, r0, #1
 808266c:	eb41 0101 	adc.w	r1, r1, r1
 8082670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082674:	bf08      	it	eq
 8082676:	3c01      	subeq	r4, #1
 8082678:	d0f7      	beq.n	808266a <__aeabi_dmul+0x1a6>
 808267a:	ea41 0106 	orr.w	r1, r1, r6
 808267e:	f095 0f00 	teq	r5, #0
 8082682:	bf18      	it	ne
 8082684:	4770      	bxne	lr
 8082686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808268a:	0052      	lsls	r2, r2, #1
 808268c:	eb43 0303 	adc.w	r3, r3, r3
 8082690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8082694:	bf08      	it	eq
 8082696:	3d01      	subeq	r5, #1
 8082698:	d0f7      	beq.n	808268a <__aeabi_dmul+0x1c6>
 808269a:	ea43 0306 	orr.w	r3, r3, r6
 808269e:	4770      	bx	lr
 80826a0:	ea94 0f0c 	teq	r4, ip
 80826a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80826a8:	bf18      	it	ne
 80826aa:	ea95 0f0c 	teqne	r5, ip
 80826ae:	d00c      	beq.n	80826ca <__aeabi_dmul+0x206>
 80826b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80826b4:	bf18      	it	ne
 80826b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80826ba:	d1d1      	bne.n	8082660 <__aeabi_dmul+0x19c>
 80826bc:	ea81 0103 	eor.w	r1, r1, r3
 80826c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80826c4:	f04f 0000 	mov.w	r0, #0
 80826c8:	bd70      	pop	{r4, r5, r6, pc}
 80826ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80826ce:	bf06      	itte	eq
 80826d0:	4610      	moveq	r0, r2
 80826d2:	4619      	moveq	r1, r3
 80826d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80826d8:	d019      	beq.n	808270e <__aeabi_dmul+0x24a>
 80826da:	ea94 0f0c 	teq	r4, ip
 80826de:	d102      	bne.n	80826e6 <__aeabi_dmul+0x222>
 80826e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80826e4:	d113      	bne.n	808270e <__aeabi_dmul+0x24a>
 80826e6:	ea95 0f0c 	teq	r5, ip
 80826ea:	d105      	bne.n	80826f8 <__aeabi_dmul+0x234>
 80826ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80826f0:	bf1c      	itt	ne
 80826f2:	4610      	movne	r0, r2
 80826f4:	4619      	movne	r1, r3
 80826f6:	d10a      	bne.n	808270e <__aeabi_dmul+0x24a>
 80826f8:	ea81 0103 	eor.w	r1, r1, r3
 80826fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082708:	f04f 0000 	mov.w	r0, #0
 808270c:	bd70      	pop	{r4, r5, r6, pc}
 808270e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8082716:	bd70      	pop	{r4, r5, r6, pc}

08082718 <__aeabi_ddiv>:
 8082718:	b570      	push	{r4, r5, r6, lr}
 808271a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808271e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8082726:	bf1d      	ittte	ne
 8082728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808272c:	ea94 0f0c 	teqne	r4, ip
 8082730:	ea95 0f0c 	teqne	r5, ip
 8082734:	f000 f8a7 	bleq	8082886 <__aeabi_ddiv+0x16e>
 8082738:	eba4 0405 	sub.w	r4, r4, r5
 808273c:	ea81 0e03 	eor.w	lr, r1, r3
 8082740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082748:	f000 8088 	beq.w	808285c <__aeabi_ddiv+0x144>
 808274c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8082754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8082758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808275c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8082760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8082764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8082768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808276c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8082770:	429d      	cmp	r5, r3
 8082772:	bf08      	it	eq
 8082774:	4296      	cmpeq	r6, r2
 8082776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808277a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808277e:	d202      	bcs.n	8082786 <__aeabi_ddiv+0x6e>
 8082780:	085b      	lsrs	r3, r3, #1
 8082782:	ea4f 0232 	mov.w	r2, r2, rrx
 8082786:	1ab6      	subs	r6, r6, r2
 8082788:	eb65 0503 	sbc.w	r5, r5, r3
 808278c:	085b      	lsrs	r3, r3, #1
 808278e:	ea4f 0232 	mov.w	r2, r2, rrx
 8082792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8082796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808279a:	ebb6 0e02 	subs.w	lr, r6, r2
 808279e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80827a2:	bf22      	ittt	cs
 80827a4:	1ab6      	subcs	r6, r6, r2
 80827a6:	4675      	movcs	r5, lr
 80827a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80827ac:	085b      	lsrs	r3, r3, #1
 80827ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80827b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80827b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80827ba:	bf22      	ittt	cs
 80827bc:	1ab6      	subcs	r6, r6, r2
 80827be:	4675      	movcs	r5, lr
 80827c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80827c4:	085b      	lsrs	r3, r3, #1
 80827c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80827ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80827ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80827d2:	bf22      	ittt	cs
 80827d4:	1ab6      	subcs	r6, r6, r2
 80827d6:	4675      	movcs	r5, lr
 80827d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80827dc:	085b      	lsrs	r3, r3, #1
 80827de:	ea4f 0232 	mov.w	r2, r2, rrx
 80827e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80827e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80827ea:	bf22      	ittt	cs
 80827ec:	1ab6      	subcs	r6, r6, r2
 80827ee:	4675      	movcs	r5, lr
 80827f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80827f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80827f8:	d018      	beq.n	808282c <__aeabi_ddiv+0x114>
 80827fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80827fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8082802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8082806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808280a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808280e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8082812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8082816:	d1c0      	bne.n	808279a <__aeabi_ddiv+0x82>
 8082818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808281c:	d10b      	bne.n	8082836 <__aeabi_ddiv+0x11e>
 808281e:	ea41 0100 	orr.w	r1, r1, r0
 8082822:	f04f 0000 	mov.w	r0, #0
 8082826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808282a:	e7b6      	b.n	808279a <__aeabi_ddiv+0x82>
 808282c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082830:	bf04      	itt	eq
 8082832:	4301      	orreq	r1, r0
 8082834:	2000      	moveq	r0, #0
 8082836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808283a:	bf88      	it	hi
 808283c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082840:	f63f aeaf 	bhi.w	80825a2 <__aeabi_dmul+0xde>
 8082844:	ebb5 0c03 	subs.w	ip, r5, r3
 8082848:	bf04      	itt	eq
 808284a:	ebb6 0c02 	subseq.w	ip, r6, r2
 808284e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082852:	f150 0000 	adcs.w	r0, r0, #0
 8082856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808285a:	bd70      	pop	{r4, r5, r6, pc}
 808285c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8082860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8082864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8082868:	bfc2      	ittt	gt
 808286a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808286e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082872:	bd70      	popgt	{r4, r5, r6, pc}
 8082874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082878:	f04f 0e00 	mov.w	lr, #0
 808287c:	3c01      	subs	r4, #1
 808287e:	e690      	b.n	80825a2 <__aeabi_dmul+0xde>
 8082880:	ea45 0e06 	orr.w	lr, r5, r6
 8082884:	e68d      	b.n	80825a2 <__aeabi_dmul+0xde>
 8082886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808288a:	ea94 0f0c 	teq	r4, ip
 808288e:	bf08      	it	eq
 8082890:	ea95 0f0c 	teqeq	r5, ip
 8082894:	f43f af3b 	beq.w	808270e <__aeabi_dmul+0x24a>
 8082898:	ea94 0f0c 	teq	r4, ip
 808289c:	d10a      	bne.n	80828b4 <__aeabi_ddiv+0x19c>
 808289e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80828a2:	f47f af34 	bne.w	808270e <__aeabi_dmul+0x24a>
 80828a6:	ea95 0f0c 	teq	r5, ip
 80828aa:	f47f af25 	bne.w	80826f8 <__aeabi_dmul+0x234>
 80828ae:	4610      	mov	r0, r2
 80828b0:	4619      	mov	r1, r3
 80828b2:	e72c      	b.n	808270e <__aeabi_dmul+0x24a>
 80828b4:	ea95 0f0c 	teq	r5, ip
 80828b8:	d106      	bne.n	80828c8 <__aeabi_ddiv+0x1b0>
 80828ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80828be:	f43f aefd 	beq.w	80826bc <__aeabi_dmul+0x1f8>
 80828c2:	4610      	mov	r0, r2
 80828c4:	4619      	mov	r1, r3
 80828c6:	e722      	b.n	808270e <__aeabi_dmul+0x24a>
 80828c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80828cc:	bf18      	it	ne
 80828ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80828d2:	f47f aec5 	bne.w	8082660 <__aeabi_dmul+0x19c>
 80828d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80828da:	f47f af0d 	bne.w	80826f8 <__aeabi_dmul+0x234>
 80828de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80828e2:	f47f aeeb 	bne.w	80826bc <__aeabi_dmul+0x1f8>
 80828e6:	e712      	b.n	808270e <__aeabi_dmul+0x24a>

080828e8 <__aeabi_d2iz>:
 80828e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80828ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80828f0:	d215      	bcs.n	808291e <__aeabi_d2iz+0x36>
 80828f2:	d511      	bpl.n	8082918 <__aeabi_d2iz+0x30>
 80828f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80828f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80828fc:	d912      	bls.n	8082924 <__aeabi_d2iz+0x3c>
 80828fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808290a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808290e:	fa23 f002 	lsr.w	r0, r3, r2
 8082912:	bf18      	it	ne
 8082914:	4240      	negne	r0, r0
 8082916:	4770      	bx	lr
 8082918:	f04f 0000 	mov.w	r0, #0
 808291c:	4770      	bx	lr
 808291e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8082922:	d105      	bne.n	8082930 <__aeabi_d2iz+0x48>
 8082924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8082928:	bf08      	it	eq
 808292a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808292e:	4770      	bx	lr
 8082930:	f04f 0000 	mov.w	r0, #0
 8082934:	4770      	bx	lr
 8082936:	bf00      	nop

08082938 <__aeabi_d2f>:
 8082938:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808293c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8082940:	bf24      	itt	cs
 8082942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8082946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808294a:	d90d      	bls.n	8082968 <__aeabi_d2f+0x30>
 808294c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8082954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8082958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808295c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8082960:	bf08      	it	eq
 8082962:	f020 0001 	biceq.w	r0, r0, #1
 8082966:	4770      	bx	lr
 8082968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808296c:	d121      	bne.n	80829b2 <__aeabi_d2f+0x7a>
 808296e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8082972:	bfbc      	itt	lt
 8082974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8082978:	4770      	bxlt	lr
 808297a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808297e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8082982:	f1c2 0218 	rsb	r2, r2, #24
 8082986:	f1c2 0c20 	rsb	ip, r2, #32
 808298a:	fa10 f30c 	lsls.w	r3, r0, ip
 808298e:	fa20 f002 	lsr.w	r0, r0, r2
 8082992:	bf18      	it	ne
 8082994:	f040 0001 	orrne.w	r0, r0, #1
 8082998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808299c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80829a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80829a4:	ea40 000c 	orr.w	r0, r0, ip
 80829a8:	fa23 f302 	lsr.w	r3, r3, r2
 80829ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80829b0:	e7cc      	b.n	808294c <__aeabi_d2f+0x14>
 80829b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80829b6:	d107      	bne.n	80829c8 <__aeabi_d2f+0x90>
 80829b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80829bc:	bf1e      	ittt	ne
 80829be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80829c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80829c6:	4770      	bxne	lr
 80829c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80829cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80829d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80829d4:	4770      	bx	lr
 80829d6:	bf00      	nop

080829d8 <__aeabi_frsub>:
 80829d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80829dc:	e002      	b.n	80829e4 <__addsf3>
 80829de:	bf00      	nop

080829e0 <__aeabi_fsub>:
 80829e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080829e4 <__addsf3>:
 80829e4:	0042      	lsls	r2, r0, #1
 80829e6:	bf1f      	itttt	ne
 80829e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80829ec:	ea92 0f03 	teqne	r2, r3
 80829f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80829f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80829f8:	d06a      	beq.n	8082ad0 <__addsf3+0xec>
 80829fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80829fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8082a02:	bfc1      	itttt	gt
 8082a04:	18d2      	addgt	r2, r2, r3
 8082a06:	4041      	eorgt	r1, r0
 8082a08:	4048      	eorgt	r0, r1
 8082a0a:	4041      	eorgt	r1, r0
 8082a0c:	bfb8      	it	lt
 8082a0e:	425b      	neglt	r3, r3
 8082a10:	2b19      	cmp	r3, #25
 8082a12:	bf88      	it	hi
 8082a14:	4770      	bxhi	lr
 8082a16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8082a1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082a1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8082a22:	bf18      	it	ne
 8082a24:	4240      	negne	r0, r0
 8082a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082a2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8082a2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8082a32:	bf18      	it	ne
 8082a34:	4249      	negne	r1, r1
 8082a36:	ea92 0f03 	teq	r2, r3
 8082a3a:	d03f      	beq.n	8082abc <__addsf3+0xd8>
 8082a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8082a40:	fa41 fc03 	asr.w	ip, r1, r3
 8082a44:	eb10 000c 	adds.w	r0, r0, ip
 8082a48:	f1c3 0320 	rsb	r3, r3, #32
 8082a4c:	fa01 f103 	lsl.w	r1, r1, r3
 8082a50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082a54:	d502      	bpl.n	8082a5c <__addsf3+0x78>
 8082a56:	4249      	negs	r1, r1
 8082a58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8082a5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8082a60:	d313      	bcc.n	8082a8a <__addsf3+0xa6>
 8082a62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8082a66:	d306      	bcc.n	8082a76 <__addsf3+0x92>
 8082a68:	0840      	lsrs	r0, r0, #1
 8082a6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8082a6e:	f102 0201 	add.w	r2, r2, #1
 8082a72:	2afe      	cmp	r2, #254	; 0xfe
 8082a74:	d251      	bcs.n	8082b1a <__addsf3+0x136>
 8082a76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8082a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082a7e:	bf08      	it	eq
 8082a80:	f020 0001 	biceq.w	r0, r0, #1
 8082a84:	ea40 0003 	orr.w	r0, r0, r3
 8082a88:	4770      	bx	lr
 8082a8a:	0049      	lsls	r1, r1, #1
 8082a8c:	eb40 0000 	adc.w	r0, r0, r0
 8082a90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8082a94:	f1a2 0201 	sub.w	r2, r2, #1
 8082a98:	d1ed      	bne.n	8082a76 <__addsf3+0x92>
 8082a9a:	fab0 fc80 	clz	ip, r0
 8082a9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8082aa2:	ebb2 020c 	subs.w	r2, r2, ip
 8082aa6:	fa00 f00c 	lsl.w	r0, r0, ip
 8082aaa:	bfaa      	itet	ge
 8082aac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8082ab0:	4252      	neglt	r2, r2
 8082ab2:	4318      	orrge	r0, r3
 8082ab4:	bfbc      	itt	lt
 8082ab6:	40d0      	lsrlt	r0, r2
 8082ab8:	4318      	orrlt	r0, r3
 8082aba:	4770      	bx	lr
 8082abc:	f092 0f00 	teq	r2, #0
 8082ac0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8082ac4:	bf06      	itte	eq
 8082ac6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8082aca:	3201      	addeq	r2, #1
 8082acc:	3b01      	subne	r3, #1
 8082ace:	e7b5      	b.n	8082a3c <__addsf3+0x58>
 8082ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082ad8:	bf18      	it	ne
 8082ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082ade:	d021      	beq.n	8082b24 <__addsf3+0x140>
 8082ae0:	ea92 0f03 	teq	r2, r3
 8082ae4:	d004      	beq.n	8082af0 <__addsf3+0x10c>
 8082ae6:	f092 0f00 	teq	r2, #0
 8082aea:	bf08      	it	eq
 8082aec:	4608      	moveq	r0, r1
 8082aee:	4770      	bx	lr
 8082af0:	ea90 0f01 	teq	r0, r1
 8082af4:	bf1c      	itt	ne
 8082af6:	2000      	movne	r0, #0
 8082af8:	4770      	bxne	lr
 8082afa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082afe:	d104      	bne.n	8082b0a <__addsf3+0x126>
 8082b00:	0040      	lsls	r0, r0, #1
 8082b02:	bf28      	it	cs
 8082b04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8082b08:	4770      	bx	lr
 8082b0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082b0e:	bf3c      	itt	cc
 8082b10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8082b14:	4770      	bxcc	lr
 8082b16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082b1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082b22:	4770      	bx	lr
 8082b24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8082b28:	bf16      	itet	ne
 8082b2a:	4608      	movne	r0, r1
 8082b2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082b30:	4601      	movne	r1, r0
 8082b32:	0242      	lsls	r2, r0, #9
 8082b34:	bf06      	itte	eq
 8082b36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8082b3a:	ea90 0f01 	teqeq	r0, r1
 8082b3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8082b42:	4770      	bx	lr

08082b44 <__aeabi_ui2f>:
 8082b44:	f04f 0300 	mov.w	r3, #0
 8082b48:	e004      	b.n	8082b54 <__aeabi_i2f+0x8>
 8082b4a:	bf00      	nop

08082b4c <__aeabi_i2f>:
 8082b4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8082b50:	bf48      	it	mi
 8082b52:	4240      	negmi	r0, r0
 8082b54:	ea5f 0c00 	movs.w	ip, r0
 8082b58:	bf08      	it	eq
 8082b5a:	4770      	bxeq	lr
 8082b5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8082b60:	4601      	mov	r1, r0
 8082b62:	f04f 0000 	mov.w	r0, #0
 8082b66:	e01c      	b.n	8082ba2 <__aeabi_l2f+0x2a>

08082b68 <__aeabi_ul2f>:
 8082b68:	ea50 0201 	orrs.w	r2, r0, r1
 8082b6c:	bf08      	it	eq
 8082b6e:	4770      	bxeq	lr
 8082b70:	f04f 0300 	mov.w	r3, #0
 8082b74:	e00a      	b.n	8082b8c <__aeabi_l2f+0x14>
 8082b76:	bf00      	nop

08082b78 <__aeabi_l2f>:
 8082b78:	ea50 0201 	orrs.w	r2, r0, r1
 8082b7c:	bf08      	it	eq
 8082b7e:	4770      	bxeq	lr
 8082b80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8082b84:	d502      	bpl.n	8082b8c <__aeabi_l2f+0x14>
 8082b86:	4240      	negs	r0, r0
 8082b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082b8c:	ea5f 0c01 	movs.w	ip, r1
 8082b90:	bf02      	ittt	eq
 8082b92:	4684      	moveq	ip, r0
 8082b94:	4601      	moveq	r1, r0
 8082b96:	2000      	moveq	r0, #0
 8082b98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082b9c:	bf08      	it	eq
 8082b9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082ba2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8082ba6:	fabc f28c 	clz	r2, ip
 8082baa:	3a08      	subs	r2, #8
 8082bac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082bb0:	db10      	blt.n	8082bd4 <__aeabi_l2f+0x5c>
 8082bb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8082bb6:	4463      	add	r3, ip
 8082bb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8082bbc:	f1c2 0220 	rsb	r2, r2, #32
 8082bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082bc4:	fa20 f202 	lsr.w	r2, r0, r2
 8082bc8:	eb43 0002 	adc.w	r0, r3, r2
 8082bcc:	bf08      	it	eq
 8082bce:	f020 0001 	biceq.w	r0, r0, #1
 8082bd2:	4770      	bx	lr
 8082bd4:	f102 0220 	add.w	r2, r2, #32
 8082bd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8082bdc:	f1c2 0220 	rsb	r2, r2, #32
 8082be0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082be4:	fa21 f202 	lsr.w	r2, r1, r2
 8082be8:	eb43 0002 	adc.w	r0, r3, r2
 8082bec:	bf08      	it	eq
 8082bee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082bf2:	4770      	bx	lr

08082bf4 <__aeabi_fmul>:
 8082bf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082bfc:	bf1e      	ittt	ne
 8082bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082c02:	ea92 0f0c 	teqne	r2, ip
 8082c06:	ea93 0f0c 	teqne	r3, ip
 8082c0a:	d06f      	beq.n	8082cec <__aeabi_fmul+0xf8>
 8082c0c:	441a      	add	r2, r3
 8082c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8082c12:	0240      	lsls	r0, r0, #9
 8082c14:	bf18      	it	ne
 8082c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8082c1a:	d01e      	beq.n	8082c5a <__aeabi_fmul+0x66>
 8082c1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8082c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8082c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8082c28:	fba0 3101 	umull	r3, r1, r0, r1
 8082c2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082c30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8082c34:	bf3e      	ittt	cc
 8082c36:	0049      	lslcc	r1, r1, #1
 8082c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8082c3c:	005b      	lslcc	r3, r3, #1
 8082c3e:	ea40 0001 	orr.w	r0, r0, r1
 8082c42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8082c46:	2afd      	cmp	r2, #253	; 0xfd
 8082c48:	d81d      	bhi.n	8082c86 <__aeabi_fmul+0x92>
 8082c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8082c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082c52:	bf08      	it	eq
 8082c54:	f020 0001 	biceq.w	r0, r0, #1
 8082c58:	4770      	bx	lr
 8082c5a:	f090 0f00 	teq	r0, #0
 8082c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8082c62:	bf08      	it	eq
 8082c64:	0249      	lsleq	r1, r1, #9
 8082c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8082c6e:	3a7f      	subs	r2, #127	; 0x7f
 8082c70:	bfc2      	ittt	gt
 8082c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8082c7a:	4770      	bxgt	lr
 8082c7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082c80:	f04f 0300 	mov.w	r3, #0
 8082c84:	3a01      	subs	r2, #1
 8082c86:	dc5d      	bgt.n	8082d44 <__aeabi_fmul+0x150>
 8082c88:	f112 0f19 	cmn.w	r2, #25
 8082c8c:	bfdc      	itt	le
 8082c8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8082c92:	4770      	bxle	lr
 8082c94:	f1c2 0200 	rsb	r2, r2, #0
 8082c98:	0041      	lsls	r1, r0, #1
 8082c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8082c9e:	f1c2 0220 	rsb	r2, r2, #32
 8082ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8082ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8082caa:	f140 0000 	adc.w	r0, r0, #0
 8082cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8082cb2:	bf08      	it	eq
 8082cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082cb8:	4770      	bx	lr
 8082cba:	f092 0f00 	teq	r2, #0
 8082cbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082cc2:	bf02      	ittt	eq
 8082cc4:	0040      	lsleq	r0, r0, #1
 8082cc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082cca:	3a01      	subeq	r2, #1
 8082ccc:	d0f9      	beq.n	8082cc2 <__aeabi_fmul+0xce>
 8082cce:	ea40 000c 	orr.w	r0, r0, ip
 8082cd2:	f093 0f00 	teq	r3, #0
 8082cd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082cda:	bf02      	ittt	eq
 8082cdc:	0049      	lsleq	r1, r1, #1
 8082cde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082ce2:	3b01      	subeq	r3, #1
 8082ce4:	d0f9      	beq.n	8082cda <__aeabi_fmul+0xe6>
 8082ce6:	ea41 010c 	orr.w	r1, r1, ip
 8082cea:	e78f      	b.n	8082c0c <__aeabi_fmul+0x18>
 8082cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082cf0:	ea92 0f0c 	teq	r2, ip
 8082cf4:	bf18      	it	ne
 8082cf6:	ea93 0f0c 	teqne	r3, ip
 8082cfa:	d00a      	beq.n	8082d12 <__aeabi_fmul+0x11e>
 8082cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082d00:	bf18      	it	ne
 8082d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082d06:	d1d8      	bne.n	8082cba <__aeabi_fmul+0xc6>
 8082d08:	ea80 0001 	eor.w	r0, r0, r1
 8082d0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082d10:	4770      	bx	lr
 8082d12:	f090 0f00 	teq	r0, #0
 8082d16:	bf17      	itett	ne
 8082d18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8082d1c:	4608      	moveq	r0, r1
 8082d1e:	f091 0f00 	teqne	r1, #0
 8082d22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8082d26:	d014      	beq.n	8082d52 <__aeabi_fmul+0x15e>
 8082d28:	ea92 0f0c 	teq	r2, ip
 8082d2c:	d101      	bne.n	8082d32 <__aeabi_fmul+0x13e>
 8082d2e:	0242      	lsls	r2, r0, #9
 8082d30:	d10f      	bne.n	8082d52 <__aeabi_fmul+0x15e>
 8082d32:	ea93 0f0c 	teq	r3, ip
 8082d36:	d103      	bne.n	8082d40 <__aeabi_fmul+0x14c>
 8082d38:	024b      	lsls	r3, r1, #9
 8082d3a:	bf18      	it	ne
 8082d3c:	4608      	movne	r0, r1
 8082d3e:	d108      	bne.n	8082d52 <__aeabi_fmul+0x15e>
 8082d40:	ea80 0001 	eor.w	r0, r0, r1
 8082d44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082d48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082d50:	4770      	bx	lr
 8082d52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082d56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8082d5a:	4770      	bx	lr

08082d5c <__aeabi_fdiv>:
 8082d5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082d64:	bf1e      	ittt	ne
 8082d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082d6a:	ea92 0f0c 	teqne	r2, ip
 8082d6e:	ea93 0f0c 	teqne	r3, ip
 8082d72:	d069      	beq.n	8082e48 <__aeabi_fdiv+0xec>
 8082d74:	eba2 0203 	sub.w	r2, r2, r3
 8082d78:	ea80 0c01 	eor.w	ip, r0, r1
 8082d7c:	0249      	lsls	r1, r1, #9
 8082d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8082d82:	d037      	beq.n	8082df4 <__aeabi_fdiv+0x98>
 8082d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8082d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8082d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8082d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082d94:	428b      	cmp	r3, r1
 8082d96:	bf38      	it	cc
 8082d98:	005b      	lslcc	r3, r3, #1
 8082d9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8082d9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8082da2:	428b      	cmp	r3, r1
 8082da4:	bf24      	itt	cs
 8082da6:	1a5b      	subcs	r3, r3, r1
 8082da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8082dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8082db0:	bf24      	itt	cs
 8082db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8082db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8082dbe:	bf24      	itt	cs
 8082dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8082dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8082dcc:	bf24      	itt	cs
 8082dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8082dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8082dd6:	011b      	lsls	r3, r3, #4
 8082dd8:	bf18      	it	ne
 8082dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8082dde:	d1e0      	bne.n	8082da2 <__aeabi_fdiv+0x46>
 8082de0:	2afd      	cmp	r2, #253	; 0xfd
 8082de2:	f63f af50 	bhi.w	8082c86 <__aeabi_fmul+0x92>
 8082de6:	428b      	cmp	r3, r1
 8082de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082dec:	bf08      	it	eq
 8082dee:	f020 0001 	biceq.w	r0, r0, #1
 8082df2:	4770      	bx	lr
 8082df4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8082df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082dfc:	327f      	adds	r2, #127	; 0x7f
 8082dfe:	bfc2      	ittt	gt
 8082e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8082e08:	4770      	bxgt	lr
 8082e0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082e0e:	f04f 0300 	mov.w	r3, #0
 8082e12:	3a01      	subs	r2, #1
 8082e14:	e737      	b.n	8082c86 <__aeabi_fmul+0x92>
 8082e16:	f092 0f00 	teq	r2, #0
 8082e1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082e1e:	bf02      	ittt	eq
 8082e20:	0040      	lsleq	r0, r0, #1
 8082e22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082e26:	3a01      	subeq	r2, #1
 8082e28:	d0f9      	beq.n	8082e1e <__aeabi_fdiv+0xc2>
 8082e2a:	ea40 000c 	orr.w	r0, r0, ip
 8082e2e:	f093 0f00 	teq	r3, #0
 8082e32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082e36:	bf02      	ittt	eq
 8082e38:	0049      	lsleq	r1, r1, #1
 8082e3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082e3e:	3b01      	subeq	r3, #1
 8082e40:	d0f9      	beq.n	8082e36 <__aeabi_fdiv+0xda>
 8082e42:	ea41 010c 	orr.w	r1, r1, ip
 8082e46:	e795      	b.n	8082d74 <__aeabi_fdiv+0x18>
 8082e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082e4c:	ea92 0f0c 	teq	r2, ip
 8082e50:	d108      	bne.n	8082e64 <__aeabi_fdiv+0x108>
 8082e52:	0242      	lsls	r2, r0, #9
 8082e54:	f47f af7d 	bne.w	8082d52 <__aeabi_fmul+0x15e>
 8082e58:	ea93 0f0c 	teq	r3, ip
 8082e5c:	f47f af70 	bne.w	8082d40 <__aeabi_fmul+0x14c>
 8082e60:	4608      	mov	r0, r1
 8082e62:	e776      	b.n	8082d52 <__aeabi_fmul+0x15e>
 8082e64:	ea93 0f0c 	teq	r3, ip
 8082e68:	d104      	bne.n	8082e74 <__aeabi_fdiv+0x118>
 8082e6a:	024b      	lsls	r3, r1, #9
 8082e6c:	f43f af4c 	beq.w	8082d08 <__aeabi_fmul+0x114>
 8082e70:	4608      	mov	r0, r1
 8082e72:	e76e      	b.n	8082d52 <__aeabi_fmul+0x15e>
 8082e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082e78:	bf18      	it	ne
 8082e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082e7e:	d1ca      	bne.n	8082e16 <__aeabi_fdiv+0xba>
 8082e80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8082e84:	f47f af5c 	bne.w	8082d40 <__aeabi_fmul+0x14c>
 8082e88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8082e8c:	f47f af3c 	bne.w	8082d08 <__aeabi_fmul+0x114>
 8082e90:	e75f      	b.n	8082d52 <__aeabi_fmul+0x15e>
 8082e92:	bf00      	nop

08082e94 <__aeabi_f2iz>:
 8082e94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8082e98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8082e9c:	d30f      	bcc.n	8082ebe <__aeabi_f2iz+0x2a>
 8082e9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8082ea2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8082ea6:	d90d      	bls.n	8082ec4 <__aeabi_f2iz+0x30>
 8082ea8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8082eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082eb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8082eb4:	fa23 f002 	lsr.w	r0, r3, r2
 8082eb8:	bf18      	it	ne
 8082eba:	4240      	negne	r0, r0
 8082ebc:	4770      	bx	lr
 8082ebe:	f04f 0000 	mov.w	r0, #0
 8082ec2:	4770      	bx	lr
 8082ec4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8082ec8:	d101      	bne.n	8082ece <__aeabi_f2iz+0x3a>
 8082eca:	0242      	lsls	r2, r0, #9
 8082ecc:	d105      	bne.n	8082eda <__aeabi_f2iz+0x46>
 8082ece:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8082ed2:	bf08      	it	eq
 8082ed4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8082ed8:	4770      	bx	lr
 8082eda:	f04f 0000 	mov.w	r0, #0
 8082ede:	4770      	bx	lr

08082ee0 <__cxa_atexit>:
 8082ee0:	b510      	push	{r4, lr}
 8082ee2:	4c05      	ldr	r4, [pc, #20]	; (8082ef8 <__cxa_atexit+0x18>)
 8082ee4:	4613      	mov	r3, r2
 8082ee6:	b12c      	cbz	r4, 8082ef4 <__cxa_atexit+0x14>
 8082ee8:	460a      	mov	r2, r1
 8082eea:	4601      	mov	r1, r0
 8082eec:	2002      	movs	r0, #2
 8082eee:	f3af 8000 	nop.w
 8082ef2:	bd10      	pop	{r4, pc}
 8082ef4:	4620      	mov	r0, r4
 8082ef6:	bd10      	pop	{r4, pc}
 8082ef8:	00000000 	.word	0x00000000

08082efc <memcpy>:
 8082efc:	b510      	push	{r4, lr}
 8082efe:	1e43      	subs	r3, r0, #1
 8082f00:	440a      	add	r2, r1
 8082f02:	4291      	cmp	r1, r2
 8082f04:	d004      	beq.n	8082f10 <memcpy+0x14>
 8082f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8082f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082f0e:	e7f8      	b.n	8082f02 <memcpy+0x6>
 8082f10:	bd10      	pop	{r4, pc}

08082f12 <memset>:
 8082f12:	4603      	mov	r3, r0
 8082f14:	4402      	add	r2, r0
 8082f16:	4293      	cmp	r3, r2
 8082f18:	d002      	beq.n	8082f20 <memset+0xe>
 8082f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8082f1e:	e7fa      	b.n	8082f16 <memset+0x4>
 8082f20:	4770      	bx	lr
	...

08082f24 <srand>:
 8082f24:	b538      	push	{r3, r4, r5, lr}
 8082f26:	4b12      	ldr	r3, [pc, #72]	; (8082f70 <srand+0x4c>)
 8082f28:	4605      	mov	r5, r0
 8082f2a:	681c      	ldr	r4, [r3, #0]
 8082f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8082f2e:	b9d3      	cbnz	r3, 8082f66 <srand+0x42>
 8082f30:	2018      	movs	r0, #24
 8082f32:	f7fd fe57 	bl	8080be4 <malloc>
 8082f36:	f243 330e 	movw	r3, #13070	; 0x330e
 8082f3a:	63a0      	str	r0, [r4, #56]	; 0x38
 8082f3c:	8003      	strh	r3, [r0, #0]
 8082f3e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8082f42:	8043      	strh	r3, [r0, #2]
 8082f44:	f241 2334 	movw	r3, #4660	; 0x1234
 8082f48:	8083      	strh	r3, [r0, #4]
 8082f4a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8082f4e:	80c3      	strh	r3, [r0, #6]
 8082f50:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8082f54:	8103      	strh	r3, [r0, #8]
 8082f56:	2305      	movs	r3, #5
 8082f58:	8143      	strh	r3, [r0, #10]
 8082f5a:	230b      	movs	r3, #11
 8082f5c:	8183      	strh	r3, [r0, #12]
 8082f5e:	2201      	movs	r2, #1
 8082f60:	2300      	movs	r3, #0
 8082f62:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8082f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8082f68:	2200      	movs	r2, #0
 8082f6a:	611d      	str	r5, [r3, #16]
 8082f6c:	615a      	str	r2, [r3, #20]
 8082f6e:	bd38      	pop	{r3, r4, r5, pc}
 8082f70:	20000468 	.word	0x20000468

08082f74 <strcmp>:
 8082f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8082f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8082f7c:	2a01      	cmp	r2, #1
 8082f7e:	bf28      	it	cs
 8082f80:	429a      	cmpcs	r2, r3
 8082f82:	d0f7      	beq.n	8082f74 <strcmp>
 8082f84:	1ad0      	subs	r0, r2, r3
 8082f86:	4770      	bx	lr

08082f88 <strdup>:
 8082f88:	4b02      	ldr	r3, [pc, #8]	; (8082f94 <strdup+0xc>)
 8082f8a:	4601      	mov	r1, r0
 8082f8c:	6818      	ldr	r0, [r3, #0]
 8082f8e:	f000 b803 	b.w	8082f98 <_strdup_r>
 8082f92:	bf00      	nop
 8082f94:	20000468 	.word	0x20000468

08082f98 <_strdup_r>:
 8082f98:	b570      	push	{r4, r5, r6, lr}
 8082f9a:	4606      	mov	r6, r0
 8082f9c:	4608      	mov	r0, r1
 8082f9e:	460c      	mov	r4, r1
 8082fa0:	f000 f80d 	bl	8082fbe <strlen>
 8082fa4:	1c45      	adds	r5, r0, #1
 8082fa6:	4629      	mov	r1, r5
 8082fa8:	4630      	mov	r0, r6
 8082faa:	f7fd fe43 	bl	8080c34 <_malloc_r>
 8082fae:	4606      	mov	r6, r0
 8082fb0:	b118      	cbz	r0, 8082fba <_strdup_r+0x22>
 8082fb2:	462a      	mov	r2, r5
 8082fb4:	4621      	mov	r1, r4
 8082fb6:	f7ff ffa1 	bl	8082efc <memcpy>
 8082fba:	4630      	mov	r0, r6
 8082fbc:	bd70      	pop	{r4, r5, r6, pc}

08082fbe <strlen>:
 8082fbe:	4603      	mov	r3, r0
 8082fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082fc4:	2a00      	cmp	r2, #0
 8082fc6:	d1fb      	bne.n	8082fc0 <strlen+0x2>
 8082fc8:	1a18      	subs	r0, r3, r0
 8082fca:	3801      	subs	r0, #1
 8082fcc:	4770      	bx	lr

08082fce <link_code_end>:
	...

08082fd0 <dynalib_user>:
 8082fd0:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8082fe0:	0000 0000                                   ....

08082fe4 <_ZL13releaseNumber>:
 8082fe4:	2e30 3232 0000 6552 6573 7474 6e69 2067     0.22..Resetting 
 8082ff4:	654d 6f6d 7972 3200 2535 6420 6e6f 0065     Memory.25% done.
 8083004:	3035 2025 6f64 656e 3700 2535 6420 6e6f     50% done.75% don
 8083014:	0065 6f44 656e 5200 6c65 6165 6573 7300     e.Done.Release.s
 8083024:	6174 6574 664f 6843 0067 6148 6472 6552     tateOfChg.HardRe
 8083034:	6573 0074 6554 7473 4620 6961 656c 5264     set.Test FailedR
 8083044:	7365 7465 4420 7665 6369 2065 6f74 4320     eset Device to C
 8083054:	6e6f 6974 756e 0065 6542 6967 6e6e 6e69     ontinue.Beginnin
 8083064:	2067 6554 7473 5220 6e75 5400 7365 2074     g Test Run.Test 
 8083074:	7453 7261 0074 6146 6c69 6465 2d20 4d20     Start.Failed - M
 8083084:	7369 6973 676e 4620 4152 004d 6554 7473     issing FRAM.Test
 8083094:	2320 0031 6e49 7020 6f72 6563 7373 2d20      #1.In process -
 80830a4:	4520 6172 6973 676e 4620 4152 004d 6146      Erasing FRAM.Fa
 80830b4:	6c69 6465 2d20 4620 4152 204d 6552 6461     iled - FRAM Read
 80830c4:	4520 7272 726f 4600 4152 204d 6554 7473      Error.FRAM Test
 80830d4:	5020 7361 6573 0064 6554 706d 7265 7461      Passed.Temperat
 80830e4:	7275 2065 7369 2520 4669 5400 7365 2074     ure is %iF.Test 
 80830f4:	3223 5000 6572 7373 5520 6573 2072 7753     #2.Press User Sw
 8083104:	7469 6863 5400 7365 2074 3323 5500 6573     itch.Test #3.Use
 8083114:	2072 7753 7469 6863 5020 6572 7373 4420     r Switch Press D
 8083124:	7465 6365 6574 0064 6142 7474 7265 2079     etected.Battery 
 8083134:	6863 7261 6567 6c20 7665 6c65 3d20 2520     charge level = %
 8083144:	0069 6554 7473 2320 0034 6142 7474 7265     i.Test #4.Batter
 8083154:	2079 6863 7261 6567 7420 7365 2074 6170     y charge test pa
 8083164:	7373 6465 5400 7365 2074 3523 4500 7078     ssed.Test #5.Exp
 8083174:	6365 2074 6874 7369 7420 7365 2074 6f74     ect this test to
 8083184:	7420 6b61 2065 367e 2030 696d 756e 6574      take ~60 minute
 8083194:	0073 6554 7473 2320 2036 7453 7261 6574     s.Test #6 Starte
 80831a4:	0064 6c45 7061 6573 2064 6974 656d 6920     d.Elapsed time i
 80831b4:	206e 696d 756e 6574 2073 7369 2520 0069     n minutes is %i.
 80831c4:	6554 7473 2320 2036 6946 696e 6873 6465     Test #6 Finished
 80831d4:	4600 6e69 6c61 5420 7365 2074 202d 6148     .Final Test - Ha
 80831e4:	6472 5220 7365 7465 6920 206e 2031 6573     rd Reset in 1 se
 80831f4:	6f63 646e 5400 7365 2074 3723 4900 2066     cond.Test #7.If 
 8083204:	6f79 2075 6573 2065 6874 7369 6d20 7365     you see this mes
 8083214:	6173 6567 2d20 6820 7261 2064 6572 6573     sage - hard rese
 8083224:	2074 6574 7473 6620 6961 656c 0064 0000     t test failed...

08083234 <_ZTVN5spark13CellularClassE>:
	...
 808323c:	0d13 0808 0d09 0808 0cff 0808 0c71 0808     ............q...
 808324c:	0cf3 0808 0ce7 0808 0cdb 0808 0cd3 0808     ................
 808325c:	0cc9 0808 0cbf 0808 0c7b 0808               ........{...

08083268 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8083270:	0d5d 0808 0d63 0808 0d8b 0808 0d6f 0808     ]...c.......o...
 8083280:	0d5f 0808                                   _...

08083284 <_ZTV7TwoWire>:
	...
 808328c:	13dd 0808 1427 0808 13ff 0808 13df 0808     ....'...........
 808329c:	1407 0808 140f 0808 1417 0808 141f 0808     ................

080832ac <_ZTV9IPAddress>:
	...
 80832b4:	14dd 0808 14cf 0808 14d1 0808 0066 6e6c     ............f.ln
 80832c4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80832d4:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80832e4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80832f4:	203d 6400 7465 6961 736c 3d20 0020 6162     = .details = .ba
 8083304:	6475 5300 7265 6169 006c 5355 5342 7265     ud.Serial.USBSer
 8083314:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
 8083324:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
 8083334:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
 8083344:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
 8083354:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
 8083364:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
 8083374:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
 8083384:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 8083394:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

080833a4 <_ZTVN5spark12NetworkClassE>:
	...
 80833ac:	157d 0808 1587 0808 1591 0808 159b 0808     }...............
 80833bc:	15a5 0808 15b1 0808 15bd 0808 15c9 0808     ................
 80833cc:	15d1 0808 15db 0808 15e5 0808               ............

080833d8 <_ZTV8SPIClass>:
	...
 80833e0:	1745 0808 1747 0808 005a 2b25 3330 3a64     E...G...Z.%+03d:
 80833f0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8083400:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8083410:	0000 0000                                   ....

08083414 <_ZTV11USARTSerial>:
	...
 808341c:	1929 0808 194d 0808 1959 0808 1645 0808     )...M...Y...E...
 808342c:	1935 0808 1941 0808 193b 0808 1947 0808     5...A...;...G...
 808343c:	192b 0808 192f 0808                         +.../...

08083444 <_ZTV9USBSerial>:
	...
 808344c:	1a01 0808 1a45 0808 1a1f 0808 1645 0808     ....E.......E...
 808345c:	1a19 0808 1a03 0808 1a0b 0808 1a3f 0808     ............?...
 808346c:	1a13 0808 19fd 0808                         ........

08083474 <__sf_fake_stdin>:
	...

08083494 <__sf_fake_stdout>:
	...

080834b4 <__sf_fake_stderr>:
	...
 80834d4:	0043                                        C.

080834d6 <link_const_variable_data_end>:
	...

080834d8 <link_constructors_location>:
 80834d8:	08080155 	.word	0x08080155
 80834dc:	08080731 	.word	0x08080731
 80834e0:	08080779 	.word	0x08080779
 80834e4:	08080d1d 	.word	0x08080d1d
 80834e8:	0808156d 	.word	0x0808156d
 80834ec:	08081631 	.word	0x08081631
 80834f0:	08081729 	.word	0x08081729
 80834f4:	08081891 	.word	0x08081891
 80834f8:	08081915 	.word	0x08081915
 80834fc:	08081e29 	.word	0x08081e29
 8083500:	08081e59 	.word	0x08081e59
 8083504:	08081ec5 	.word	0x08081ec5
 8083508:	08081f89 	.word	0x08081f89
 808350c:	0808200d 	.word	0x0808200d
 8083510:	08082091 	.word	0x08082091

08083514 <link_constructors_end>:
	...
